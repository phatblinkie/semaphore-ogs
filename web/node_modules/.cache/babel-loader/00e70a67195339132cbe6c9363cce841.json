{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport { getErrorMessage } from '@/lib/error';\nimport EditDialog from '@/components/EditDialog.vue';\nimport TaskLogView from '@/components/TaskLogView.vue';\nimport ProjectForm from '@/components/ProjectForm.vue';\nimport UserForm from '@/components/UserForm.vue';\nimport ChangePasswordForm from '@/components/ChangePasswordForm.vue';\nimport EventBus from '@/event-bus';\nimport socket from '@/socket';\nconst PROJECT_COLORS = ['red', 'blue', 'orange', 'green'];\nconst LANGUAGES = {\n  en: {\n    flag: '🇺🇸',\n    title: 'English'\n  },\n  es: {\n    flag: '🇨🇱',\n    title: 'Español'\n  },\n  ru: {\n    flag: '🇷🇺',\n    title: 'Russian'\n  },\n  de: {\n    flag: '🇩🇪',\n    title: 'German'\n  },\n  zh_cn: {\n    flag: '🇨🇳',\n    title: '中文(大陆)'\n  },\n  zh_tw: {\n    flag: '🇹🇼',\n    title: '中文(台灣)'\n  },\n  fr: {\n    flag: '🇫🇷',\n    title: 'French'\n  },\n  it: {\n    flag: '🇮🇹',\n    title: 'Italian'\n  },\n  pl: {\n    flag: '🇵🇱️',\n    title: 'Polish'\n  },\n  pt: {\n    flag: '🇵🇹',\n    title: 'Portuguese'\n  },\n  pt_br: {\n    flag: '🇧🇷',\n    title: 'Português do Brasil'\n  }\n};\nfunction getLangInfo(locale) {\n  let res = LANGUAGES[locale];\n\n  // failback short i18n\n  if (!res) {\n    res = LANGUAGES[locale.split('_')[0]];\n  }\n  if (!res) {\n    res = LANGUAGES.en;\n  }\n  return res;\n}\nfunction getSystemLang() {\n  const locale = navigator.language.replace('-', '_').toLocaleLowerCase();\n  return getLangInfo(locale || 'en');\n}\nexport default {\n  name: 'App',\n  components: {\n    ChangePasswordForm,\n    UserForm,\n    EditDialog,\n    TaskLogView,\n    ProjectForm\n  },\n  data() {\n    return {\n      drawer: null,\n      user: null,\n      userRole: null,\n      systemInfo: null,\n      state: 'loading',\n      snackbar: false,\n      snackbarText: '',\n      snackbarColor: '',\n      projects: null,\n      newProjectDialog: null,\n      newProjectType: '',\n      userDialog: null,\n      passwordDialog: null,\n      taskLogDialog: null,\n      task: null,\n      template: null,\n      darkMode: false,\n      languages: [{\n        id: '',\n        flag: getSystemLang().flag,\n        title: 'System'\n      }, ...Object.keys(LANGUAGES).map(lang => ({\n        id: lang,\n        ...LANGUAGES[lang]\n      }))]\n    };\n  },\n  watch: {\n    async projects(val) {\n      if (val.length === 0 && this.$route.path.startsWith('/project/') && this.$route.path !== '/project/new') {\n        await this.$router.push({\n          path: '/project/new'\n        });\n      }\n    },\n    async $route(val) {\n      if (val.query.t == null) {\n        this.taskLogDialog = false;\n      } else {\n        const taskId = parseInt(this.$route.query.t || '', 10);\n        if (taskId) {\n          EventBus.$emit('i-show-task', {\n            taskId\n          });\n        }\n      }\n    },\n    darkMode(val) {\n      this.$vuetify.theme.dark = val;\n      if (val) {\n        localStorage.setItem('darkMode', '1');\n      } else {\n        localStorage.removeItem('darkMode');\n      }\n    }\n  },\n  computed: {\n    lang() {\n      const locale = localStorage.getItem('lang');\n      if (!locale) {\n        return getSystemLang();\n      }\n      return getLangInfo(locale || 'en');\n    },\n    projectId() {\n      return parseInt(this.$route.params.projectId, 10) || null;\n    },\n    project() {\n      if (this.projects == null) {\n        return null;\n      }\n      return this.projects.find(x => x.id === this.projectId);\n    },\n    isAuthenticated() {\n      return document.cookie.includes('semaphore=');\n    },\n    templatesUrl() {\n      let viewId = localStorage.getItem(`project${this.projectId}__lastVisitedViewId`);\n      if (viewId) {\n        viewId = parseInt(viewId, 10);\n        if (!Number.isNaN(viewId)) {\n          return `/project/${this.projectId}/views/${viewId}/templates`;\n        }\n      }\n      return `/project/${this.projectId}/templates`;\n    }\n  },\n  async created() {\n    if (!this.isAuthenticated) {\n      if (this.$route.path !== '/auth/login') {\n        await this.$router.push({\n          path: '/auth/login'\n        });\n      }\n      this.state = 'success';\n      return;\n    }\n    if (localStorage.getItem('darkMode') === '1') {\n      this.darkMode = true;\n    }\n    try {\n      await this.loadData();\n      this.state = 'success';\n    } catch (err) {\n      EventBus.$emit('i-snackbar', {\n        color: 'error',\n        text: getErrorMessage(err)\n      });\n      this.state = 'error';\n      socket.stop();\n    }\n  },\n  mounted() {\n    EventBus.$on('i-snackbar', e => {\n      this.snackbar = true;\n      this.snackbarColor = e.color;\n      this.snackbarText = e.text;\n    });\n    EventBus.$on('i-account-change', async () => {\n      await this.loadUserInfo();\n    });\n    EventBus.$on('i-show-drawer', async () => {\n      this.drawer = true;\n    });\n    EventBus.$on('i-show-task', async e => {\n      if (parseInt(this.$route.query.t || '', 10) !== e.taskId) {\n        const query = {\n          ...this.$route.query,\n          t: e.taskId\n        };\n        await this.$router.replace({\n          query\n        });\n      }\n      this.task = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/tasks/${e.taskId}`,\n        responseType: 'json'\n      })).data;\n      this.template = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.task.template_id}`,\n        responseType: 'json'\n      })).data;\n      this.taskLogDialog = true;\n    });\n    EventBus.$on('i-open-last-project', async () => {\n      await this.trySelectMostSuitableProject();\n    });\n    EventBus.$on('i-user', async e => {\n      let text;\n      switch (e.action) {\n        case 'new':\n          text = `User ${e.item.name} created`;\n          break;\n        case 'edit':\n          text = `User ${e.item.name} saved`;\n          break;\n        case 'delete':\n          text = `User ${e.item.name} deleted`;\n          break;\n        default:\n          throw new Error('Unknown project action');\n      }\n      EventBus.$emit('i-snackbar', {\n        color: 'success',\n        text\n      });\n      if (this.user && e.item.id === this.user.id) {\n        await this.loadUserInfo();\n      }\n    });\n    EventBus.$on('i-project', async e => {\n      let text;\n      const project = this.projects.find(p => p.id === e.item.id) || e.item;\n      const projectName = project.name || `#${project.id}`;\n      switch (e.action) {\n        case 'new':\n          text = `Project ${projectName} created`;\n          break;\n        case 'edit':\n          text = `Project ${projectName} saved`;\n          break;\n        case 'delete':\n          text = `Project ${projectName} deleted`;\n          break;\n        default:\n          throw new Error('Unknown project action');\n      }\n      EventBus.$emit('i-snackbar', {\n        color: 'success',\n        text\n      });\n      await this.loadProjects();\n      switch (e.action) {\n        case 'new':\n          await this.selectProject(e.item.id);\n          break;\n        case 'delete':\n          if (this.projectId === e.item.id && this.projects.length > 0) {\n            await this.selectProject(this.projects[0].id);\n          }\n          break;\n        default:\n          break;\n      }\n    });\n  },\n  methods: {\n    async onSubscriptionKeyUpdates() {\n      EventBus.$emit('i-snackbar', {\n        color: 'success',\n        text: 'Subscription activated'\n      });\n      await this.loadUserInfo();\n    },\n    selectLanguage(lang) {\n      localStorage.setItem('lang', lang);\n      window.location.reload();\n    },\n    async onTaskLogDialogClosed() {\n      const query = {\n        ...this.$route.query,\n        t: undefined\n      };\n      await this.$router.replace({\n        query\n      });\n    },\n    async loadData() {\n      if (!socket.isRunning()) {\n        socket.start();\n      }\n      await this.loadUserInfo();\n      await this.loadProjects();\n\n      // try to find project and switch to it if URL not pointing to any project\n      if (this.$route.path === '/' || this.$route.path === '/project' || this.$route.path.startsWith('/project/')) {\n        await this.trySelectMostSuitableProject();\n      }\n\n      // display task dialog if query param t specified\n      if (this.$route.query.t) {\n        const taskId = parseInt(this.$route.query.t || '', 10);\n        if (taskId) {\n          EventBus.$emit('i-show-task', {\n            taskId\n          });\n        }\n      }\n    },\n    async trySelectMostSuitableProject() {\n      if (this.projects.length === 0) {\n        if (this.$route.path !== '/project/new') {\n          await this.$router.push({\n            path: '/project/new'\n          });\n        }\n        return;\n      }\n      let projectId;\n      if (this.projectId) {\n        projectId = this.projectId;\n      }\n      if ((projectId == null || !this.projects.some(p => p.id === projectId)) && localStorage.getItem('projectId')) {\n        projectId = parseInt(localStorage.getItem('projectId'), 10);\n      }\n      if (projectId == null || !this.projects.some(p => p.id === projectId)) {\n        projectId = this.projects[0].id;\n      }\n      if (projectId != null) {\n        await this.selectProject(projectId);\n      }\n    },\n    async selectProject(projectId) {\n      this.userRole = (await axios({\n        method: 'get',\n        url: `/api/project/${projectId}/role`,\n        responseType: 'json'\n      })).data;\n      localStorage.setItem('projectId', projectId);\n      if (this.projectId === projectId) {\n        return;\n      }\n      await this.$router.push({\n        path: `/project/${projectId}`\n      });\n    },\n    async loadProjects() {\n      this.projects = (await axios({\n        method: 'get',\n        url: '/api/projects',\n        responseType: 'json'\n      })).data;\n    },\n    async loadUserInfo() {\n      if (!this.isAuthenticated) {\n        return;\n      }\n      this.user = (await axios({\n        method: 'get',\n        url: '/api/user',\n        responseType: 'json'\n      })).data;\n      this.systemInfo = (await axios({\n        method: 'get',\n        url: '/api/info',\n        responseType: 'json'\n      })).data;\n    },\n    getProjectColor(projectData) {\n      const projectIndex = this.projects.length - this.projects.findIndex(p => p.id === projectData.id);\n      return PROJECT_COLORS[projectIndex % PROJECT_COLORS.length];\n    },\n    getProjectInitials(projectData) {\n      const parts = projectData.name.split(/\\s/);\n      if (parts.length >= 2) {\n        return `${parts[0][0]}${parts[1][0]}`.toUpperCase();\n      }\n      return parts[0].substr(0, 2).toUpperCase();\n    },\n    async restoreProject() {\n      const f = document.createElement('input');\n      f.setAttribute('type', 'file');\n      f.addEventListener('change', e => {\n        const file = e.target.files[0];\n        if (file) {\n          const reader = new FileReader();\n          reader.onload = async ev => {\n            const fileContent = ev.target.result;\n            try {\n              await axios.post('/api/projects/restore', fileContent).then(async payload => {\n                this.$router.push({\n                  path: `/project/${payload.data.id}/history`\n                });\n                this.state = 'success';\n                await this.loadProjects();\n              });\n            } catch (err) {\n              EventBus.$emit('i-snackbar', {\n                color: 'error',\n                text: getErrorMessage(err)\n              });\n            }\n          };\n          reader.readAsText(file);\n        }\n      });\n      f.click();\n    },\n    async signOut() {\n      this.snackbar = false;\n      this.snackbarColor = '';\n      this.snackbarText = '';\n      socket.stop();\n      await axios({\n        method: 'post',\n        url: '/api/auth/logout',\n        responseType: 'json'\n      });\n      if (this.$route.path !== '/auth/login') {\n        await this.$router.push({\n          path: '/auth/login'\n        });\n        this.state = 'success';\n      }\n    },\n    refreshPage() {\n      const {\n        location\n      } = document;\n      document.location = location;\n    }\n  }\n};","map":{"version":3,"mappingsmnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,wBACA,OACA,QACA,UACA,QACA;AAEA;EACAA;IACAC;IACAC;EACA;EACAC;IACAF;IACAC;EACA;EACAE;IACAH;IACAC;EACA;EACAG;IACAJ;IACAC;EACA;EACAI;IACAL;IACAC;EACA;EACAK;IACAN;IACAC;EACA;EACAM;IACAP;IACAC;EACA;EACAO;IACAR;IACAC;EACA;EACAQ;IACAT;IACAC;EACA;EACAS;IACAV;IACAC;EACA;EACAU;IACAX;IACAC;EACA;AACA;AAEA;EACA;;EAEA;EACA;IACAW;EACA;EAEA;IACAA;EACA;EAEA;AACA;AAEA;EACA;EAEA;AACA;AAEA;EACAC;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MAEAC;MACAC;MACAC;MACAC;MACAC,YACA;QACAC;QACAvC;QACAC;MACA,GACA;QACAsC;QACA;MACA;IAEA;EACA;EAEAC;IACA;MACA,wBACA,4CACA;QACA;UAAAC;QAAA;MACA;IACA;IAEA;MACA;QACA;MACA;QACA;QACA;UACAC;YAAAC;UAAA;QACA;MACA;IACA;IAEAN;MACA;MACA;QACAO;MACA;QACAA;MACA;IACA;EACA;EAEAC;IAEAC;MACA;MAEA;QACA;MACA;MAEA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;QACA;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;QACAC;QACA;UACA;QACA;MACA;MACA;IACA;EACA;EAEA;IACA;MACA;QACA;UAAAV;QAAA;MACA;MACA;MACA;IACA;IAEA;MACA;IACA;IAEA;MACA;MACA;IACA;MACAC;QACAU;QACAC;MACA;MACA;MACAC;IACA;EACA;EAEAC;IACAb;MACA;MACA;MACA;IACA;IAEAA;MACA;IACA;IAEAA;MACA;IACA;IAEAA;MACA;QACA;UAAA;UAAAc;QAAA;QACA;UAAAC;QAAA;MACA;MAEA;QACAC;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;MAEA;IACA;IAEAlB;MACA;IACA;IAEAA;MACA;MAEA;QACA;UACAW;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UACA;MACA;MAEAX;QACAU;QACAC;MACA;MAEA;QACA;MACA;IACA;IAEAX;MACA;MAEA;MACA;MAEA;QACA;UACAW;UACA;QACA;UACAA;UACA;QACA;UACAA;UACA;QACA;UACA;MACA;MAEAX;QACAU;QACAC;MACA;MAEA;MAEA;QACA;UACA;UACA;QACA;UACA;YACA;UACA;UACA;QACA;UACA;MACA;IACA;EACA;EAEAQ;IACA;MACAnB;QACAU;QACAC;MACA;MAEA;IACA;IAEAS;MACAlB;MACAmB;IACA;IAEA;MACA;QAAA;QAAAP;MAAA;MACA;QAAAC;MAAA;IACA;IAEA;MACA;QACAH;MACA;MAEA;MACA;;MAEA;MACA,gCACA,mCACA;QACA;MACA;;MAEA;MACA;QACA;QACA;UACAZ;YAAAC;UAAA;QACA;MACA;IACA;IAEA;MACA;QACA;UACA;YAAAF;UAAA;QACA;QACA;MACA;MAEA;MAEA;QACAM;MACA;MAEA,2EACAH;QACAG;MACA;MAEA;QACAA;MACA;MAEA;QACA;MACA;IACA;IAEA;MACA;QACAW;QACAC;QACAC;MACA;MAEAhB;MACA;QACA;MACA;MAEA;QAAAH;MAAA;IACA;IAEA;MACA;QACAiB;QACAC;QACAC;MACA;IACA;IAEA;MACA;QACA;MACA;MAEA;QACAF;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;IACA;IAEAI;MACA,4CACA;MACA;IACA;IAEAC;MACA;MACA;QACA;MACA;MACA;IACA;IAEA;MACA;MACAC;MACAA;QACA;QACA;UACA;UACAC;YACA;YACA;cACA,YACAC,2CACAC;gBACA;kBAAA5B;gBAAA;gBACA;gBACA;cACA;YACA;cACAC;gBACAU;gBACAC;cACA;YACA;UACA;UACAc;QACA;MACA;MACAD;IACA;IAEA;MACA;MACA;MACA;MAEAZ;MAEA;QACAI;QACAC;QACAC;MACA;MAEA;QACA;UAAAnB;QAAA;QACA;MACA;IACA;IAEA6B;MACA;QAAAC;MAAA;MACAC;IACA;EACA;AACA","names":["en","flag","title","es","ru","de","zh_cn","zh_tw","fr","it","pl","pt","pt_br","res","name","components","ChangePasswordForm","UserForm","EditDialog","TaskLogView","ProjectForm","data","drawer","user","userRole","systemInfo","state","snackbar","snackbarText","snackbarColor","projects","newProjectDialog","newProjectType","userDialog","passwordDialog","taskLogDialog","task","template","darkMode","languages","id","watch","path","EventBus","taskId","localStorage","computed","lang","projectId","project","isAuthenticated","templatesUrl","viewId","color","text","socket","mounted","t","query","method","url","responseType","methods","selectLanguage","window","getProjectColor","getProjectInitials","f","reader","post","then","refreshPage","location","document"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <v-app v-if=\"state === 'success'\" class=\"app\">\n    <EditDialog\n      v-model=\"passwordDialog\"\n      save-button-text=\"Save\"\n      :title=\"$t('changePassword')\"\n      v-if=\"user\"\n      event-name=\"i-user\"\n    >\n      <template v-slot:form=\"{ onSave, onError, needSave, needReset }\">\n        <ChangePasswordForm\n          :project-id=\"projectId\"\n          :item-id=\"user.id\"\n          @save=\"onSave\"\n          @error=\"onError\"\n          :need-save=\"needSave\"\n          :need-reset=\"needReset\"\n        />\n      </template>\n    </EditDialog>\n\n    <EditDialog\n      v-model=\"userDialog\"\n      save-button-text=\"Save\"\n      :title=\"$t('editUser')\"\n      v-if=\"user\"\n      event-name=\"i-user\"\n    >\n      <template v-slot:form=\"{ onSave, onError, needSave, needReset }\">\n        <UserForm\n          :project-id=\"projectId\"\n          :item-id=\"user.id\"\n          @save=\"onSave\"\n          @error=\"onError\"\n          :need-save=\"needSave\"\n          :need-reset=\"needReset\"\n          :is-admin=\"user.admin\"\n        />\n      </template>\n    </EditDialog>\n\n    <EditDialog\n      v-model=\"taskLogDialog\"\n      save-button-text=\"Delete\"\n      :max-width=\"1000\"\n      :hide-buttons=\"true\"\n      @close=\"onTaskLogDialogClosed()\"\n    >\n      <template v-slot:title={}>\n        <div class=\"text-truncate\" style=\"max-width: calc(100% - 36px);\">\n          <router-link\n            class=\"breadcrumbs__item breadcrumbs__item--link\"\n            :to=\"`/project/${projectId}/templates/${template ? template.id : null}`\"\n            @click=\"taskLogDialog = false\"\n          >{{ template ? template.name : null }}\n          </router-link>\n          <v-icon>mdi-chevron-right</v-icon>\n          <span class=\"breadcrumbs__item\">{{ $t('task', {expr: task ? task.id : null}) }}</span>\n        </div>\n      </template>\n      <template v-slot:form=\"{}\">\n        <TaskLogView :project-id=\"projectId\" :item-id=\"task ? task.id : null\"/>\n      </template>\n    </EditDialog>\n\n    <EditDialog\n      v-model=\"newProjectDialog\"\n      save-button-text=\"Create\"\n      :title=\"$t('newProject')\"\n      event-name=\"i-project\"\n    >\n      <template v-slot:form=\"{ onSave, onError, needSave, needReset }\">\n        <ProjectForm\n          v-if=\"newProjectType === ''\"\n          item-id=\"new\"\n          @save=\"onSave\"\n          @error=\"onError\"\n          :need-save=\"needSave\"\n          :need-reset=\"needReset\"\n        />\n      </template>\n    </EditDialog>\n\n    <v-snackbar\n      v-model=\"snackbar\"\n      :color=\"snackbarColor\"\n      :timeout=\"3000\"\n      top\n    >\n      {{ snackbarText }}\n      <v-btn\n        text\n        @click=\"snackbar = false\"\n      >\n        {{ $t('close') }}\n      </v-btn>\n    </v-snackbar>\n\n    <v-navigation-drawer\n      app\n      dark\n      :color=\"darkMode ? '#003236' : '#005057'\"\n      fixed\n      width=\"260\"\n      v-model=\"drawer\"\n      mobile-breakpoint=\"960\"\n      v-if=\"$route.path.startsWith('/project/')\"\n    >\n      <v-menu bottom max-width=\"235\" max-height=\"100%\" v-if=\"project\">\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-list class=\"pa-0 overflow-y-auto\">\n            <v-list-item\n              key=\"project\"\n              class=\"app__project-selector\"\n              v-bind=\"attrs\"\n              v-on=\"on\"\n            >\n              <v-list-item-icon>\n                <v-avatar\n                  :color=\"getProjectColor(project)\"\n                  size=\"24\"\n                  style=\"font-size: 13px; font-weight: bold;\"\n                >\n                  <span class=\"white--text\">{{ getProjectInitials(project) }}</span>\n                </v-avatar>\n              </v-list-item-icon>\n\n              <v-list-item-content>\n                <v-list-item-title class=\"app__project-selector-title\">\n                  {{ project.name }}\n                </v-list-item-title>\n                <v-list-item-subtitle>{{ userRole.role }}</v-list-item-subtitle>\n              </v-list-item-content>\n\n              <v-list-item-icon>\n                <v-icon>mdi-chevron-down</v-icon>\n              </v-list-item-icon>\n            </v-list-item>\n          </v-list>\n        </template>\n        <v-list>\n          <v-list-item\n            v-for=\"(item, i) in projects\"\n            :key=\"i\"\n            :to=\"`/project/${item.id}`\"\n            @click=\"selectProject(item.id)\"\n          >\n            <v-list-item-icon>\n              <v-avatar\n                :color=\"getProjectColor(item)\"\n                size=\"24\"\n                style=\"font-size: 13px; font-weight: bold;\"\n              >\n                <span class=\"white--text\">{{ getProjectInitials(item) }}</span>\n              </v-avatar>\n            </v-list-item-icon>\n            <v-list-item-content>{{ item.name }}</v-list-item-content>\n          </v-list-item>\n\n          <v-list-item\n            @click=\"newProjectDialog = true; newProjectType = '';\"\n            v-if=\"user.can_create_project\"\n          >\n            <v-list-item-icon>\n              <v-icon>mdi-plus</v-icon>\n            </v-list-item-icon>\n\n            <v-list-item-content>\n              {{ $t('newProject2') }}\n            </v-list-item-content>\n          </v-list-item>\n\n          <v-list-item @click=\"restoreProject\" v-if=\"user.can_create_project\">\n            <v-list-item-icon>\n              <v-icon>mdi-backup-restore</v-icon>\n            </v-list-item-icon>\n\n            <v-list-item-content>\n              {{ $t('restoreProject') }}\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n\n      <v-list class=\"pt-0\" v-if=\"!project\">\n        <v-list-item key=\"new_project\" :to=\"`/project/new`\">\n          <v-list-item-icon>\n            <v-icon>mdi-plus</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('newProject') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n\n      <v-list class=\"pt-0\" v-if=\"project\">\n\n        <v-list-item key=\"dashboard\" :to=\"`/project/${projectId}/history`\">\n          <v-list-item-icon>\n            <v-icon>mdi-view-dashboard</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('dashboard') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n\n        <v-list-item key=\"System Status\" :to=\"`/project/${projectId}/systemstatus`\">\n          <v-list-item-icon>\n            <v-icon>mdi-chart-pie</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('systemstatus') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n\n        <v-list-item v-if=\"project.type === ''\" key=\"templates\" :to=\"templatesUrl\">\n          <v-list-item-icon>\n            <v-icon>mdi-check-all</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('taskTemplates') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n\n        <v-list-item\n          v-if=\"project.type === ''\"\n          key=\"schedule\"\n          :to=\"`/project/${projectId}/schedule`\"\n        >\n          <v-list-item-icon>\n            <v-icon>mdi-clock-outline</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('Schedule') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n\n        <v-list-item\n          v-if=\"project.type === ''\"\n          key=\"inventory\"\n          :to=\"`/project/${projectId}/inventory`\"\n        >\n          <v-list-item-icon>\n            <v-icon>mdi-monitor-multiple</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('inventory') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n\n        <v-list-item\n          v-if=\"project.type === ''\"\n          key=\"environment\"\n          :to=\"`/project/${projectId}/environment`\"\n        >\n          <v-list-item-icon>\n            <v-icon>mdi-code-braces</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('environment') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n\n        <v-list-item\n          v-if=\"project.type === ''\"\n          key=\"keys\"\n          :to=\"`/project/${projectId}/keys`\"\n        >\n          <v-list-item-icon>\n            <v-icon>mdi-key-change</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('keyStore') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n\n        <v-list-item\n          v-if=\"project.type === ''\"\n          key=\"repositories\"\n          :to=\"`/project/${projectId}/repositories`\"\n        >\n          <v-list-item-icon>\n            <v-icon>mdi-git</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('repositories') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n\n        <v-list-item\n          v-if=\"project.type === ''\"\n          key=\"integrations\"\n          :to=\"`/project/${projectId}/integrations`\"\n        >\n          <v-list-item-icon>\n            <v-icon>mdi-connection</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('integrations') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n\n        <v-list-item key=\"team\" :to=\"`/project/${projectId}/team`\">\n          <v-list-item-icon>\n            <v-icon>mdi-account-multiple</v-icon>\n          </v-list-item-icon>\n\n          <v-list-item-content>\n            <v-list-item-title>{{ $t('team') }}</v-list-item-title>\n          </v-list-item-content>\n        </v-list-item>\n      </v-list>\n\n      <template v-slot:append>\n        <v-list class=\"pa-0\">\n\n          <v-list-item>\n            <v-switch\n              v-model=\"darkMode\"\n              inset\n              :label=\"$t('darkMode')\"\n              persistent-hint\n            ></v-switch>\n\n            <v-spacer/>\n\n            <v-menu top min-width=\"150\" max-width=\"235\" nudge-top=\"12\" :position-x=\"50\" absolute>\n              <template v-slot:activator=\"{on, attrs}\">\n                <v-btn\n                  icon\n                  x-large\n                  v-bind=\"attrs\"\n                  v-on=\"on\"\n                >\n                  <span style=\"font-size: 30px;\">{{ lang.flag }}</span>\n                </v-btn>\n              </template>\n\n              <v-list dense>\n                <v-list-item\n                  v-for=\"lang in languages\"\n                  :key=\"lang.id\"\n                  @click=\"selectLanguage(lang.id)\"\n                >\n\n                  <v-list-item-icon>\n                    {{ lang.flag }}\n                  </v-list-item-icon>\n\n                  <v-list-item-content>\n                    <v-list-item-title>{{ lang.title }}</v-list-item-title>\n                  </v-list-item-content>\n\n                </v-list-item>\n              </v-list>\n            </v-menu>\n\n          </v-list-item>\n\n          <v-menu top max-width=\"235\" nudge-top=\"12\">\n            <template v-slot:activator=\"{ on, attrs }\">\n              <v-list-item\n                key=\"project\"\n                v-bind=\"attrs\"\n                v-on=\"on\"\n              >\n                <v-list-item-icon>\n                  <v-icon>mdi-account</v-icon>\n                </v-list-item-icon>\n\n                <v-list-item-content>\n                  <v-list-item-title>\n                    {{ user.name }}\n                  </v-list-item-title>\n\n                </v-list-item-content>\n\n                <v-list-item-action>\n                  <v-chip color=\"red\" v-if=\"user.admin\" small>admin</v-chip>\n                </v-list-item-action>\n              </v-list-item>\n            </template>\n\n            <v-list>\n              <v-list-item key=\"version\">\n                <v-list-item-icon>\n                  <v-icon>mdi-information-variant</v-icon>\n                </v-list-item-icon>\n\n                <v-list-item-content>\n                  {{ systemInfo.version }}\n                </v-list-item-content>\n              </v-list-item>\n\n              <v-divider/>\n\n              <v-list-item key=\"users\" to=\"/users\" v-if=\"user.admin\">\n                <v-list-item-icon>\n                  <v-icon>mdi-account-multiple</v-icon>\n                </v-list-item-icon>\n\n                <v-list-item-content>\n                  {{ $t('users') }}\n                </v-list-item-content>\n              </v-list-item>\n\n              <v-list-item key=\"edit\" @click=\"userDialog = true\">\n                <v-list-item-icon>\n                  <v-icon>mdi-pencil</v-icon>\n                </v-list-item-icon>\n\n                <v-list-item-content>\n                  {{ $t('editAccount') }}\n                </v-list-item-content>\n              </v-list-item>\n\n              <v-list-item key=\"sign_out\" @click=\"signOut()\">\n                <v-list-item-icon>\n                  <v-icon>mdi-exit-to-app</v-icon>\n                </v-list-item-icon>\n\n                <v-list-item-content>\n                  {{ $t('signOut') }}\n                </v-list-item-content>\n              </v-list-item>\n            </v-list>\n          </v-menu>\n\n        </v-list>\n\n      </template>\n    </v-navigation-drawer>\n\n    <v-main>\n      <router-view\n        :projectId=\"projectId\"\n        :projectType=\"(project || {}).type || ''\"\n        :userPermissions=\"(userRole || {}).permissions\"\n        :userRole=\"(userRole || {}).role\"\n        :userId=\"(user || {}).id\"\n        :isAdmin=\"(user || {}).admin\"\n        :user=\"user\"\n      ></router-view>\n    </v-main>\n\n  </v-app>\n  <v-app v-else-if=\"state === 'loading'\">\n    <v-main>\n      <v-container\n        fluid\n        fill-height\n        align-center\n        justify-center\n        class=\"pa-0\"\n      >\n        <v-progress-circular\n          :size=\"70\"\n          color=\"primary\"\n          indeterminate\n        ></v-progress-circular>\n      </v-container>\n    </v-main>\n  </v-app>\n  <v-app v-else-if=\"state === 'error'\">\n    <v-main>\n      <v-container\n        fluid\n        flex-column\n        fill-height\n        align-center\n        justify-center\n        class=\"pa-0 text-center\"\n      >\n        <v-alert text color=\"error\" class=\"d-inline-block\">\n          <h3 class=\"headline\">\n            {{ $t('error') }}\n          </h3>\n          {{ snackbarText }}\n        </v-alert>\n        <div class=\"mb-6\">\n          <v-btn text color=\"blue darken-1\" @click=\"refreshPage()\">\n            <v-icon left>mdi-refresh</v-icon>\n            {{ $t('refreshPage') }}\n          </v-btn>\n          <v-btn text color=\"blue darken-1\" @click=\"signOut()\">\n            <v-icon left>mdi-exit-to-app</v-icon>\n            {{ $t('relogin') }}\n          </v-btn>\n        </div>\n      </v-container>\n    </v-main>\n  </v-app>\n  <v-app v-else></v-app>\n</template>\n<style lang=\"scss\">\n\n.v-alert__wrapper {\n  overflow: auto;\n}\n\n.v-dialog > .v-card > .v-card__title {\n  flex-wrap: nowrap;\n  overflow: hidden;\n\n  & * {\n    white-space: nowrap;\n  }\n}\n\n.v-data-table tbody tr.v-data-table__expanded__content {\n  box-shadow: none !important;\n\n}\n\n.v-data-table a {\n  text-decoration-line: none;\n\n  &:hover {\n    text-decoration-line: underline;\n  }\n}\n\n.breadcrumbs__item--link {\n  text-decoration-line: none;\n\n  &:hover {\n    text-decoration-line: underline;\n  }\n}\n\n.breadcrumbs__separator {\n  padding: 0 10px;\n}\n\n.app__project-selector {\n  height: 64px;\n\n  & > .v-list-item__content {\n    padding: 0;\n  }\n\n  .v-list-item__icon {\n    margin-top: 20px !important;\n  }\n}\n\n.app__project-selector-title {\n  font-size: 1.25rem !important;\n  font-weight: bold;\n}\n\n.v-application--is-ltr .v-list-item__action:first-child,\n.v-application--is-ltr .v-list-item__icon:first-child {\n  margin-right: 16px !important;\n}\n\n.v-toolbar__content {\n  height: 64px !important;\n}\n\n.v-data-table-header {\n}\n\n.v-data-table > .v-data-table__wrapper > table > thead > tr:last-child > th {\n  text-transform: uppercase;\n  white-space: nowrap;\n}\n\n.v-data-table > .v-data-table__wrapper > table > tbody > tr {\n  background: transparent !important;\n\n  & > td {\n    white-space: nowrap;\n  }\n\n  & > td:first-child {\n    //font-weight: bold !important;\n  }\n}\n\n.v-data-table > .v-data-table__wrapper > table > tbody > tr > th,\n.v-data-table > .v-data-table__wrapper > table > thead > tr > th,\n.v-data-table > .v-data-table__wrapper > table > tfoot > tr > th,\n.v-data-table > .v-data-table__wrapper > table > tbody > tr > td {\n  font-size: 1rem !important;\n}\n\n.v-data-footer {\n  font-size: 1rem !important;\n}\n\n.v-toolbar__title {\n  font-weight: bold !important;\n}\n\n.v-app-bar__nav-icon {\n  margin-left: 0 !important;\n}\n\n.v-toolbar__title:not(:first-child) {\n  margin-left: 10px !important;\n}\n\n@media (min-width: 960px) {\n  .v-app-bar__nav-icon {\n    display: none !important;\n  }\n\n  .v-toolbar__title:not(:first-child) {\n    padding-left: 0 !important;\n    margin-left: 0 !important;\n  }\n}\n\n</style>\n\n<script>\nimport axios from 'axios';\nimport { getErrorMessage } from '@/lib/error';\nimport EditDialog from '@/components/EditDialog.vue';\nimport TaskLogView from '@/components/TaskLogView.vue';\nimport ProjectForm from '@/components/ProjectForm.vue';\nimport UserForm from '@/components/UserForm.vue';\nimport ChangePasswordForm from '@/components/ChangePasswordForm.vue';\nimport EventBus from '@/event-bus';\nimport socket from '@/socket';\n\nconst PROJECT_COLORS = [\n  'red',\n  'blue',\n  'orange',\n  'green',\n];\n\nconst LANGUAGES = {\n  en: {\n    flag: '🇺🇸',\n    title: 'English',\n  },\n  es: {\n    flag: '🇨🇱',\n    title: 'Español',\n  },\n  ru: {\n    flag: '🇷🇺',\n    title: 'Russian',\n  },\n  de: {\n    flag: '🇩🇪',\n    title: 'German',\n  },\n  zh_cn: {\n    flag: '🇨🇳',\n    title: '中文(大陆)',\n  },\n  zh_tw: {\n    flag: '🇹🇼',\n    title: '中文(台灣)',\n  },\n  fr: {\n    flag: '🇫🇷',\n    title: 'French',\n  },\n  it: {\n    flag: '🇮🇹',\n    title: 'Italian',\n  },\n  pl: {\n    flag: '🇵🇱️',\n    title: 'Polish',\n  },\n  pt: {\n    flag: '🇵🇹',\n    title: 'Portuguese',\n  },\n  pt_br: {\n    flag: '🇧🇷',\n    title: 'Português do Brasil',\n  },\n};\n\nfunction getLangInfo(locale) {\n  let res = LANGUAGES[locale];\n\n  // failback short i18n\n  if (!res) {\n    res = LANGUAGES[locale.split('_')[0]];\n  }\n\n  if (!res) {\n    res = LANGUAGES.en;\n  }\n\n  return res;\n}\n\nfunction getSystemLang() {\n  const locale = navigator.language.replace('-', '_').toLocaleLowerCase();\n\n  return getLangInfo(locale || 'en');\n}\n\nexport default {\n  name: 'App',\n  components: {\n    ChangePasswordForm,\n    UserForm,\n    EditDialog,\n    TaskLogView,\n    ProjectForm,\n  },\n  data() {\n    return {\n      drawer: null,\n      user: null,\n      userRole: null,\n      systemInfo: null,\n      state: 'loading',\n      snackbar: false,\n      snackbarText: '',\n      snackbarColor: '',\n      projects: null,\n      newProjectDialog: null,\n      newProjectType: '',\n      userDialog: null,\n      passwordDialog: null,\n\n      taskLogDialog: null,\n      task: null,\n      template: null,\n      darkMode: false,\n      languages: [\n        {\n          id: '',\n          flag: getSystemLang().flag,\n          title: 'System',\n        },\n        ...Object.keys(LANGUAGES).map((lang) => ({\n          id: lang,\n          ...LANGUAGES[lang],\n        })),\n      ],\n    };\n  },\n\n  watch: {\n    async projects(val) {\n      if (val.length === 0\n        && this.$route.path.startsWith('/project/')\n        && this.$route.path !== '/project/new') {\n        await this.$router.push({ path: '/project/new' });\n      }\n    },\n\n    async $route(val) {\n      if (val.query.t == null) {\n        this.taskLogDialog = false;\n      } else {\n        const taskId = parseInt(this.$route.query.t || '', 10);\n        if (taskId) {\n          EventBus.$emit('i-show-task', { taskId });\n        }\n      }\n    },\n\n    darkMode(val) {\n      this.$vuetify.theme.dark = val;\n      if (val) {\n        localStorage.setItem('darkMode', '1');\n      } else {\n        localStorage.removeItem('darkMode');\n      }\n    },\n  },\n\n  computed: {\n\n    lang() {\n      const locale = localStorage.getItem('lang');\n\n      if (!locale) {\n        return getSystemLang();\n      }\n\n      return getLangInfo(locale || 'en');\n    },\n\n    projectId() {\n      return parseInt(this.$route.params.projectId, 10) || null;\n    },\n\n    project() {\n      if (this.projects == null) {\n        return null;\n      }\n      return this.projects.find((x) => x.id === this.projectId);\n    },\n\n    isAuthenticated() {\n      return document.cookie.includes('semaphore=');\n    },\n\n    templatesUrl() {\n      let viewId = localStorage.getItem(`project${this.projectId}__lastVisitedViewId`);\n      if (viewId) {\n        viewId = parseInt(viewId, 10);\n        if (!Number.isNaN(viewId)) {\n          return `/project/${this.projectId}/views/${viewId}/templates`;\n        }\n      }\n      return `/project/${this.projectId}/templates`;\n    },\n  },\n\n  async created() {\n    if (!this.isAuthenticated) {\n      if (this.$route.path !== '/auth/login') {\n        await this.$router.push({ path: '/auth/login' });\n      }\n      this.state = 'success';\n      return;\n    }\n\n    if (localStorage.getItem('darkMode') === '1') {\n      this.darkMode = true;\n    }\n\n    try {\n      await this.loadData();\n      this.state = 'success';\n    } catch (err) {\n      EventBus.$emit('i-snackbar', {\n        color: 'error',\n        text: getErrorMessage(err),\n      });\n      this.state = 'error';\n      socket.stop();\n    }\n  },\n\n  mounted() {\n    EventBus.$on('i-snackbar', (e) => {\n      this.snackbar = true;\n      this.snackbarColor = e.color;\n      this.snackbarText = e.text;\n    });\n\n    EventBus.$on('i-account-change', async () => {\n      await this.loadUserInfo();\n    });\n\n    EventBus.$on('i-show-drawer', async () => {\n      this.drawer = true;\n    });\n\n    EventBus.$on('i-show-task', async (e) => {\n      if (parseInt(this.$route.query.t || '', 10) !== e.taskId) {\n        const query = { ...this.$route.query, t: e.taskId };\n        await this.$router.replace({ query });\n      }\n\n      this.task = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/tasks/${e.taskId}`,\n        responseType: 'json',\n      })).data;\n\n      this.template = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.task.template_id}`,\n        responseType: 'json',\n      })).data;\n\n      this.taskLogDialog = true;\n    });\n\n    EventBus.$on('i-open-last-project', async () => {\n      await this.trySelectMostSuitableProject();\n    });\n\n    EventBus.$on('i-user', async (e) => {\n      let text;\n\n      switch (e.action) {\n        case 'new':\n          text = `User ${e.item.name} created`;\n          break;\n        case 'edit':\n          text = `User ${e.item.name} saved`;\n          break;\n        case 'delete':\n          text = `User ${e.item.name} deleted`;\n          break;\n        default:\n          throw new Error('Unknown project action');\n      }\n\n      EventBus.$emit('i-snackbar', {\n        color: 'success',\n        text,\n      });\n\n      if (this.user && e.item.id === this.user.id) {\n        await this.loadUserInfo();\n      }\n    });\n\n    EventBus.$on('i-project', async (e) => {\n      let text;\n\n      const project = this.projects.find((p) => p.id === e.item.id) || e.item;\n      const projectName = project.name || `#${project.id}`;\n\n      switch (e.action) {\n        case 'new':\n          text = `Project ${projectName} created`;\n          break;\n        case 'edit':\n          text = `Project ${projectName} saved`;\n          break;\n        case 'delete':\n          text = `Project ${projectName} deleted`;\n          break;\n        default:\n          throw new Error('Unknown project action');\n      }\n\n      EventBus.$emit('i-snackbar', {\n        color: 'success',\n        text,\n      });\n\n      await this.loadProjects();\n\n      switch (e.action) {\n        case 'new':\n          await this.selectProject(e.item.id);\n          break;\n        case 'delete':\n          if (this.projectId === e.item.id && this.projects.length > 0) {\n            await this.selectProject(this.projects[0].id);\n          }\n          break;\n        default:\n          break;\n      }\n    });\n  },\n\n  methods: {\n    async onSubscriptionKeyUpdates() {\n      EventBus.$emit('i-snackbar', {\n        color: 'success',\n        text: 'Subscription activated',\n      });\n\n      await this.loadUserInfo();\n    },\n\n    selectLanguage(lang) {\n      localStorage.setItem('lang', lang);\n      window.location.reload();\n    },\n\n    async onTaskLogDialogClosed() {\n      const query = { ...this.$route.query, t: undefined };\n      await this.$router.replace({ query });\n    },\n\n    async loadData() {\n      if (!socket.isRunning()) {\n        socket.start();\n      }\n\n      await this.loadUserInfo();\n      await this.loadProjects();\n\n      // try to find project and switch to it if URL not pointing to any project\n      if (this.$route.path === '/'\n        || this.$route.path === '/project'\n        || (this.$route.path.startsWith('/project/'))) {\n        await this.trySelectMostSuitableProject();\n      }\n\n      // display task dialog if query param t specified\n      if (this.$route.query.t) {\n        const taskId = parseInt(this.$route.query.t || '', 10);\n        if (taskId) {\n          EventBus.$emit('i-show-task', { taskId });\n        }\n      }\n    },\n\n    async trySelectMostSuitableProject() {\n      if (this.projects.length === 0) {\n        if (this.$route.path !== '/project/new') {\n          await this.$router.push({ path: '/project/new' });\n        }\n        return;\n      }\n\n      let projectId;\n\n      if (this.projectId) {\n        projectId = this.projectId;\n      }\n\n      if ((projectId == null || !this.projects.some((p) => p.id === projectId))\n        && localStorage.getItem('projectId')) {\n        projectId = parseInt(localStorage.getItem('projectId'), 10);\n      }\n\n      if (projectId == null || !this.projects.some((p) => p.id === projectId)) {\n        projectId = this.projects[0].id;\n      }\n\n      if (projectId != null) {\n        await this.selectProject(projectId);\n      }\n    },\n\n    async selectProject(projectId) {\n      this.userRole = (await axios({\n        method: 'get',\n        url: `/api/project/${projectId}/role`,\n        responseType: 'json',\n      })).data;\n\n      localStorage.setItem('projectId', projectId);\n      if (this.projectId === projectId) {\n        return;\n      }\n\n      await this.$router.push({ path: `/project/${projectId}` });\n    },\n\n    async loadProjects() {\n      this.projects = (await axios({\n        method: 'get',\n        url: '/api/projects',\n        responseType: 'json',\n      })).data;\n    },\n\n    async loadUserInfo() {\n      if (!this.isAuthenticated) {\n        return;\n      }\n\n      this.user = (await axios({\n        method: 'get',\n        url: '/api/user',\n        responseType: 'json',\n      })).data;\n\n      this.systemInfo = (await axios({\n        method: 'get',\n        url: '/api/info',\n        responseType: 'json',\n      })).data;\n    },\n\n    getProjectColor(projectData) {\n      const projectIndex = this.projects.length\n        - this.projects.findIndex((p) => p.id === projectData.id);\n      return PROJECT_COLORS[projectIndex % PROJECT_COLORS.length];\n    },\n\n    getProjectInitials(projectData) {\n      const parts = projectData.name.split(/\\s/);\n      if (parts.length >= 2) {\n        return `${parts[0][0]}${parts[1][0]}`.toUpperCase();\n      }\n      return parts[0].substr(0, 2).toUpperCase();\n    },\n\n    async restoreProject() {\n      const f = document.createElement('input');\n      f.setAttribute('type', 'file');\n      f.addEventListener('change', (e) => {\n        const file = e.target.files[0];\n        if (file) {\n          const reader = new FileReader();\n          reader.onload = async (ev) => {\n            const fileContent = ev.target.result;\n            try {\n              await axios\n                .post('/api/projects/restore', fileContent)\n                .then(async (payload) => {\n                  this.$router.push({ path: `/project/${payload.data.id}/history` });\n                  this.state = 'success';\n                  await this.loadProjects();\n                });\n            } catch (err) {\n              EventBus.$emit('i-snackbar', {\n                color: 'error',\n                text: getErrorMessage(err),\n              });\n            }\n          };\n          reader.readAsText(file);\n        }\n      });\n      f.click();\n    },\n\n    async signOut() {\n      this.snackbar = false;\n      this.snackbarColor = '';\n      this.snackbarText = '';\n\n      socket.stop();\n\n      (await axios({\n        method: 'post',\n        url: '/api/auth/logout',\n        responseType: 'json',\n      }));\n\n      if (this.$route.path !== '/auth/login') {\n        await this.$router.push({ path: '/auth/login' });\n        this.state = 'success';\n      }\n    },\n\n    refreshPage() {\n      const { location } = document;\n      document.location = location;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}