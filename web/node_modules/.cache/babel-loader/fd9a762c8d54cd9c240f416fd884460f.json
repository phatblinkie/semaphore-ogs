{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EventBus from '@/event-bus';\nexport default {\n  props: {\n    position: String,\n    title: String,\n    icon: String,\n    iconColor: String,\n    saveButtonText: String,\n    value: Boolean,\n    maxWidth: Number,\n    minContentHeight: Number,\n    eventName: String,\n    hideButtons: Boolean,\n    dontCloseOnSave: Boolean\n  },\n  data() {\n    return {\n      dialog: false,\n      needSave: false,\n      needReset: false\n    };\n  },\n  watch: {\n    async dialog(val) {\n      this.$emit('input', val);\n      this.needReset = val;\n      if (val) {\n        window.addEventListener('keydown', this.handleEscape);\n      } else {\n        window.removeEventListener('keydown', this.handleEscape);\n      }\n    },\n    async value(val) {\n      this.dialog = val;\n    }\n  },\n  methods: {\n    onSave(e) {\n      if (this.dontCloseOnSave) {\n        this.clearFlags();\n        return;\n      }\n      this.close(e);\n    },\n    close(e) {\n      this.dialog = false;\n      this.clearFlags();\n      if (e) {\n        this.$emit('save', e);\n        if (this.eventName) {\n          EventBus.$emit(this.eventName, e);\n        }\n      }\n      this.$emit('close');\n    },\n    clearFlags() {\n      this.needSave = false;\n      this.needReset = false;\n    },\n    handleEscape(ev) {\n      if (ev.key === 'Escape' && this.dialog !== false) {\n        this.close();\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;AAEA;EACAA;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;EAEAC;IACA;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACA;MACA;MACA;MACA;QACAC;MACA;QACAA;MACA;IACA;IAEA;MACA;IACA;EACA;EAEAC;IACAC;MACA;QACA;QACA;MACA;MAEA;IACA;IAEAC;MACA;MAEA;MACA;QACA;QACA;UACAC;QACA;MACA;MACA;IACA;IAEAC;MACA;MACA;IACA;IAEAC;MACA;QACA;MACA;IACA;EACA;AACA","names":["props","position","title","icon","iconColor","saveButtonText","value","maxWidth","minContentHeight","eventName","hideButtons","dontCloseOnSave","data","dialog","needSave","needReset","watch","window","methods","onSave","close","EventBus","clearFlags","handleEscape"],"sourceRoot":"src/components","sources":["EditDialog.vue"],"sourcesContent":["<!--\nModal dialog which contains slot \"form\" and two buttons (\"Cancel\" and \"OK\").\nShould be used to wrap forms which need to be displayed in modal dialog.\nCan use used in tandem with ItemFormBase.js. See KeyForm.vue for example.\n-->\n<template xmlns:v-slot=\"http://www.w3.org/1999/XSL/Transform\">\n  <v-dialog\n    v-model=\"dialog\"\n    :max-width=\"maxWidth || 400\"\n    persistent\n    :transition=\"false\"\n    :content-class=\"'item-dialog item-dialog--' + position\"\n  >\n    <v-card>\n      <v-card-title>\n        <slot name=\"title\">\n          <v-icon v-if=\"icon\" :color=\"iconColor\" class=\"mr-3\">{{ icon }}</v-icon>\n          {{ title }}\n        </slot>\n\n        <v-spacer></v-spacer>\n        <v-btn icon @click=\"close()\">\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n      </v-card-title>\n\n      <v-card-text class=\"pb-0\" :style=\"{minHeight: minContentHeight + 'px'}\">\n        <slot\n          name=\"form\"\n          :onSave=\"onSave\"\n          :onError=\"clearFlags\"\n          :needSave=\"needSave\"\n          :needReset=\"needReset\"\n        ></slot>\n      </v-card-text>\n\n      <v-card-actions v-if=\"!hideButtons\">\n        <v-spacer></v-spacer>\n\n        <v-btn\n          color=\"blue darken-1\"\n          text\n          @click=\"close()\"\n        >\n          {{ $t('cancel') }}\n        </v-btn>\n\n        <v-btn\n          color=\"blue darken-1\"\n          text\n          @click=\"needSave = true\"\n          v-if=\"saveButtonText != null\"\n        >\n          {{ saveButtonText }}\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n<style lang=\"scss\">\n  .item-dialog--top {\n    align-self: flex-start;\n  }\n  .item-dialog--center {\n  }\n</style>\n<script>\n\nimport EventBus from '@/event-bus';\n\nexport default {\n  props: {\n    position: String,\n    title: String,\n    icon: String,\n    iconColor: String,\n    saveButtonText: String,\n    value: Boolean,\n    maxWidth: Number,\n    minContentHeight: Number,\n    eventName: String,\n    hideButtons: Boolean,\n    dontCloseOnSave: Boolean,\n  },\n\n  data() {\n    return {\n      dialog: false,\n      needSave: false,\n      needReset: false,\n    };\n  },\n\n  watch: {\n    async dialog(val) {\n      this.$emit('input', val);\n      this.needReset = val;\n      if (val) {\n        window.addEventListener('keydown', this.handleEscape);\n      } else {\n        window.removeEventListener('keydown', this.handleEscape);\n      }\n    },\n\n    async value(val) {\n      this.dialog = val;\n    },\n  },\n\n  methods: {\n    onSave(e) {\n      if (this.dontCloseOnSave) {\n        this.clearFlags();\n        return;\n      }\n\n      this.close(e);\n    },\n\n    close(e) {\n      this.dialog = false;\n\n      this.clearFlags();\n      if (e) {\n        this.$emit('save', e);\n        if (this.eventName) {\n          EventBus.$emit(this.eventName, e);\n        }\n      }\n      this.$emit('close');\n    },\n\n    clearFlags() {\n      this.needSave = false;\n      this.needReset = false;\n    },\n\n    handleEscape(ev) {\n      if (ev.key === 'Escape' && this.dialog !== false) {\n        this.close();\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}