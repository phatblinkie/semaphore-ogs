{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\nimport TaskParamsForm from '@/components/TaskParamsForm.vue';\nexport default {\n  components: {\n    TaskParamsForm\n  },\n  mixins: [ItemFormBase],\n  data() {\n    return {\n      templates: [],\n      authMethods: [{\n        id: '',\n        title: 'None'\n      }, {\n        id: 'github',\n        title: 'GitHub Webhooks'\n      }, {\n        id: 'token',\n        title: 'Token'\n      }, {\n        id: 'hmac',\n        title: 'HMAC'\n      }],\n      keys: null\n    };\n  },\n  async created() {\n    this.templates = (await axios({\n      templates: 'get',\n      url: `/api/project/${this.projectId}/templates`,\n      responseType: 'json'\n    })).data;\n  },\n  computed: {\n    isLoaded() {\n      return this.keys != null;\n    },\n    loginPasswordKeys() {\n      if (this.keys == null) {\n        return null;\n      }\n      return this.keys.filter(key => key.type === 'login_password');\n    },\n    template() {\n      return this.templates.find(t => t.id === this.item.template_id);\n    }\n  },\n  methods: {\n    getNewItem() {\n      return {\n        template_id: {}\n      };\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/integrations`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/integrations/${this.itemId}`;\n    },\n    async afterLoadData() {\n      this.keys = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/keys`,\n        responseType: 'json'\n      })).data;\n      if (this.item.task_params == null) {\n        this.item.task_params = {};\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;AACA;AACA;AAEA;EACAA;IAAAC;EAAA;EACAC;EACAC;IACA;MACAC;MACAC;QACAC;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;MACAC;IACA;EACA;EACA;IACA;MACAJ;MACAK;MACAC;IACA;EACA;EAEAC;IACAC;MACA;IACA;IAEAC;MACA;QACA;MACA;MACA;IACA;IAEAC;MACA;IACA;EACA;EAEAC;IAEAC;MACA;QACAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEA;MACA;QACAC;QACAX;QACAC;MACA;MAEA;QACA;MACA;IACA;EAEA;AACA","names":["components","TaskParamsForm","mixins","data","templates","authMethods","id","title","keys","url","responseType","computed","isLoaded","loginPasswordKeys","template","methods","getNewItem","template_id","getItemsUrl","getSingleItemUrl","method"],"sourceRoot":"src/components","sources":["IntegrationForm.vue"],"sourcesContent":["<template>\n  <v-form\n    ref=\"form\"\n    lazy-validation\n    v-model=\"formValid\"\n    v-if=\"isLoaded\"\n  >\n    <v-alert\n      :value=\"formError\"\n      color=\"error\"\n      class=\"pb-2\"\n    >{{ formError }}\n    </v-alert>\n\n    <v-text-field\n      v-model=\"item.name\"\n      label=\"Name\"\n      :rules=\"[v => !!v || 'Name is required']\"\n      required\n      :disabled=\"formSaving\"\n    ></v-text-field>\n\n    <v-select\n      v-model=\"item.template_id\"\n      label=\"Task Template to run\"\n      clearable\n      :items=\"templates\"\n      item-value=\"id\"\n      item-text=\"name\"\n      :disabled=\"formSaving\"\n    ></v-select>\n\n    <v-select\n      v-model=\"item.auth_method\"\n      label=\"Auth method\"\n      :items=\"authMethods\"\n      item-value=\"id\"\n      item-text=\"title\"\n      :disabled=\"formSaving\"\n    ></v-select>\n\n    <v-text-field\n      v-if=\"['token', 'hmac'].includes(item.auth_method)\"\n      v-model=\"item.auth_header\"\n      label=\"Auth header\"\n      :disabled=\"formSaving\"\n    ></v-text-field>\n\n    <v-select\n      v-if=\"item.auth_method\"\n      v-model=\"item.auth_secret_id\"\n      :label=\"$t('vaultPassword2')\"\n      clearable\n      :items=\"loginPasswordKeys\"\n      item-value=\"id\"\n      item-text=\"name\"\n      :disabled=\"formSaving\"\n    ></v-select>\n\n    <TaskParamsForm\n      v-if=\"item.template_id\"\n      v-model=\"item.task_params\"\n      :app=\"(template || {}).app\"\n    />\n  </v-form>\n</template>\n<script>\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\nimport TaskParamsForm from '@/components/TaskParamsForm.vue';\n\nexport default {\n  components: { TaskParamsForm },\n  mixins: [ItemFormBase],\n  data() {\n    return {\n      templates: [],\n      authMethods: [{\n        id: '',\n        title: 'None',\n      }, {\n        id: 'github',\n        title: 'GitHub Webhooks',\n      }, {\n        id: 'token',\n        title: 'Token',\n      }, {\n        id: 'hmac',\n        title: 'HMAC',\n      }],\n      keys: null,\n    };\n  },\n  async created() {\n    this.templates = (await axios({\n      templates: 'get',\n      url: `/api/project/${this.projectId}/templates`,\n      responseType: 'json',\n    })).data;\n  },\n\n  computed: {\n    isLoaded() {\n      return this.keys != null;\n    },\n\n    loginPasswordKeys() {\n      if (this.keys == null) {\n        return null;\n      }\n      return this.keys.filter((key) => key.type === 'login_password');\n    },\n\n    template() {\n      return this.templates.find((t) => t.id === this.item.template_id);\n    },\n  },\n\n  methods: {\n\n    getNewItem() {\n      return {\n        template_id: {},\n      };\n    },\n\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/integrations`;\n    },\n\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/integrations/${this.itemId}`;\n    },\n\n    async afterLoadData() {\n      this.keys = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/keys`,\n        responseType: 'json',\n      })).data;\n\n      if (this.item.task_params == null) {\n        this.item.task_params = {};\n      }\n    },\n\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}