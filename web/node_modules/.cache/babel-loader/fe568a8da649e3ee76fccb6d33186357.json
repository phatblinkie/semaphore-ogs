{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport draggable from 'vuedraggable';\nimport axios from 'axios';\nexport default {\n  props: {\n    projectId: Number\n  },\n  components: {\n    draggable\n  },\n  async created() {\n    this.views = (await axios({\n      method: 'get',\n      url: `/api/project/${this.projectId}/views`,\n      responseType: 'json'\n    })).data.map(view => ({\n      ...view,\n      active: false,\n      disabled: false\n    }));\n    this.views.sort((v1, v2) => v1.position - v2.position);\n  },\n  data() {\n    return {\n      views: null\n    };\n  },\n  methods: {\n    async onDragEnd() {\n      const viewPositions = this.views.reduce((ret, view, index) => {\n        if (view.id < 0 || view.position === index) {\n          return ret;\n        }\n        return {\n          ...ret,\n          [view.id]: index\n        };\n      }, {});\n      await axios({\n        method: 'post',\n        url: `/api/project/${this.projectId}/views/positions`,\n        responseType: 'json',\n        data: viewPositions\n      });\n      Object.keys(viewPositions).map(id => parseInt(id, 10)).forEach(id => {\n        const view = this.views.find(v => v.id === id);\n        view.position = viewPositions[id];\n      });\n    },\n    async saveView(viewId) {\n      const i = this.views.findIndex(v => v.id === viewId);\n      if (i === -1) {\n        return;\n      }\n      const view = this.views[i];\n      if (!view.title) {\n        return;\n      }\n      view.disabled = true;\n      try {\n        if (view.id < 0) {\n          const newView = (await axios({\n            method: 'post',\n            url: `/api/project/${this.projectId}/views`,\n            responseType: 'json',\n            data: {\n              project_id: this.projectId,\n              title: view.title,\n              position: i\n            }\n          })).data;\n          view.id = newView.id;\n        } else {\n          await axios({\n            method: 'put',\n            url: `/api/project/${this.projectId}/views/${view.id}`,\n            responseType: 'json',\n            data: {\n              id: view.id,\n              project_id: this.projectId,\n              title: view.title,\n              position: i\n            }\n          });\n        }\n      } finally {\n        view.disabled = false;\n      }\n      view.active = false;\n    },\n    async resetView(viewId) {\n      const view = this.views.find(v => v.id === viewId);\n      if (view == null) {\n        return;\n      }\n      view.disabled = true;\n      try {\n        const oldView = (await axios({\n          method: 'get',\n          url: `/api/project/${this.projectId}/views/${view.id}`,\n          responseType: 'json'\n        })).data;\n        view.title = oldView.title;\n      } finally {\n        view.disabled = false;\n      }\n      view.active = false;\n    },\n    editView(viewId) {\n      const view = this.views.find(v => v.id === viewId);\n      if (view == null) {\n        return;\n      }\n      view.active = true;\n    },\n    async removeView(viewId) {\n      const i = this.views.findIndex(v => v.id === viewId);\n      if (i === -1) {\n        return;\n      }\n      const view = this.views[i];\n      if (view.id >= 0) {\n        view.disabled = true;\n        try {\n          await axios({\n            method: 'delete',\n            url: `/api/project/${this.projectId}/views/${view.id}`,\n            responseType: 'json'\n          });\n        } finally {\n          view.disabled = false;\n        }\n      }\n      this.views.splice(i, 1);\n    },\n    addView() {\n      this.views.push({\n        id: -Math.round(Math.random() * 10000000),\n        title: '',\n        active: true,\n        disabled: false\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;AACA;AAEA;EACAA;IACAC;EACA;EAEAC;IACAC;EACA;EAEA;IACA;MACAC;MACAC;MACAC;IACA;MACA;MACAC;MACAC;IACA;IACA;EACA;EAEAC;IACA;MACAC;IACA;EACA;EACAC;IACA;MACA;QACA;UACA;QACA;QACA;UACA;UACA;QACA;MACA;MAEA;QACAP;QACAC;QACAC;QACAG;MACA;MAEAG;QACA;QACAC;MACA;IACA;IAEA;MACA;MACA;QACA;MACA;MAEA;MAEA;QACA;MACA;MAEAA;MACA;QACA;UACA;YACAT;YACAC;YACAC;YACAG;cACAK;cACAC;cACAC;YACA;UACA;UACAH;QACA;UACA;YACAT;YACAC;YACAC;YACAG;cACAQ;cACAH;cACAC;cACAC;YACA;UACA;QACA;MACA;QACAH;MACA;MACAA;IACA;IAEA;MACA;MACA;QACA;MACA;MAEAA;MACA;QACA;UACAT;UACAC;UACAC;QACA;QACAO;MACA;QACAA;MACA;MAEAA;IACA;IAEAK;MACA;MACA;QACA;MACA;MACAL;IACA;IAEA;MACA;MACA;QACA;MACA;MAEA;MAEA;QACAA;QACA;UACA;YACAT;YACAC;YACAC;UACA;QACA;UACAO;QACA;MACA;MAEA;IACA;IACAM;MACA;QACAF;QACAF;QACAR;QACAC;MACA;IACA;EACA;AACA","names":["props","projectId","components","draggable","method","url","responseType","active","disabled","data","views","methods","Object","view","project_id","title","position","id","editView","addView"],"sourceRoot":"src/components","sources":["EditViewsForm.vue"],"sourcesContent":["<template>\n  <div v-if=\"views != null\">\n    <draggable\n        v-if=\"views.length > 0\"\n        :list=\"views\"\n        handle=\".handle6785\"\n        class=\"mb-5\"\n        @end=\"onDragEnd\"\n    >\n      <div v-for=\"(view) in views\" :key=\"view.id\" class=\"d-flex mb-2\">\n        <v-icon class=\"handle6785\" style=\"cursor: move;\">mdi-menu</v-icon>\n        <v-text-field\n            class=\"ml-4 mr-1\"\n            hide-details\n            dense\n            solo\n            :flat=\"!view.active\"\n            v-model=\"view.title\"\n            @focus=\"editView(view.id)\"\n            :disabled=\"view.disabled\"\n        />\n        <v-btn\n            class=\"mt-1\"\n            small\n            icon\n            @click=\"saveView(view.id)\"\n            v-if=\"view.active\"\n            :disabled=\"view.disabled\"\n        >\n          <v-icon small color=\"green\">mdi-check</v-icon>\n        </v-btn>\n        <v-btn\n            class=\"mt-1\"\n            small\n            icon\n            @click=\"resetView(view.id)\"\n            v-if=\"view.active && view.id > 0\"\n            :disabled=\"view.disabled\"\n        >\n          <v-icon small color=\"red\">mdi-close</v-icon>\n        </v-btn>\n\n        <v-btn class=\"ml-4\" icon @click=\"removeView(view.id)\">\n          <v-icon>mdi-delete</v-icon>\n        </v-btn>\n      </div>\n    </draggable>\n    <v-alert\n        v-else\n        type=\"info\"\n    >{{ $t('noViews') }}</v-alert>\n    <v-btn @click=\"addView()\" color=\"primary\">{{ $t('addView') }}</v-btn>\n  </div>\n</template>\n\n<script>\nimport draggable from 'vuedraggable';\nimport axios from 'axios';\n\nexport default {\n  props: {\n    projectId: Number,\n  },\n\n  components: {\n    draggable,\n  },\n\n  async created() {\n    this.views = (await axios({\n      method: 'get',\n      url: `/api/project/${this.projectId}/views`,\n      responseType: 'json',\n    })).data.map((view) => ({\n      ...view,\n      active: false,\n      disabled: false,\n    }));\n    this.views.sort((v1, v2) => v1.position - v2.position);\n  },\n\n  data() {\n    return {\n      views: null,\n    };\n  },\n  methods: {\n    async onDragEnd() {\n      const viewPositions = this.views.reduce((ret, view, index) => {\n        if (view.id < 0 || view.position === index) {\n          return ret;\n        }\n        return {\n          ...ret,\n          [view.id]: index,\n        };\n      }, {});\n\n      await axios({\n        method: 'post',\n        url: `/api/project/${this.projectId}/views/positions`,\n        responseType: 'json',\n        data: viewPositions,\n      });\n\n      Object.keys(viewPositions).map((id) => parseInt(id, 10)).forEach((id) => {\n        const view = this.views.find((v) => v.id === id);\n        view.position = viewPositions[id];\n      });\n    },\n\n    async saveView(viewId) {\n      const i = this.views.findIndex((v) => v.id === viewId);\n      if (i === -1) {\n        return;\n      }\n\n      const view = this.views[i];\n\n      if (!view.title) {\n        return;\n      }\n\n      view.disabled = true;\n      try {\n        if (view.id < 0) {\n          const newView = (await axios({\n            method: 'post',\n            url: `/api/project/${this.projectId}/views`,\n            responseType: 'json',\n            data: {\n              project_id: this.projectId,\n              title: view.title,\n              position: i,\n            },\n          })).data;\n          view.id = newView.id;\n        } else {\n          await axios({\n            method: 'put',\n            url: `/api/project/${this.projectId}/views/${view.id}`,\n            responseType: 'json',\n            data: {\n              id: view.id,\n              project_id: this.projectId,\n              title: view.title,\n              position: i,\n            },\n          });\n        }\n      } finally {\n        view.disabled = false;\n      }\n      view.active = false;\n    },\n\n    async resetView(viewId) {\n      const view = this.views.find((v) => v.id === viewId);\n      if (view == null) {\n        return;\n      }\n\n      view.disabled = true;\n      try {\n        const oldView = (await axios({\n          method: 'get',\n          url: `/api/project/${this.projectId}/views/${view.id}`,\n          responseType: 'json',\n        })).data;\n        view.title = oldView.title;\n      } finally {\n        view.disabled = false;\n      }\n\n      view.active = false;\n    },\n\n    editView(viewId) {\n      const view = this.views.find((v) => v.id === viewId);\n      if (view == null) {\n        return;\n      }\n      view.active = true;\n    },\n\n    async removeView(viewId) {\n      const i = this.views.findIndex((v) => v.id === viewId);\n      if (i === -1) {\n        return;\n      }\n\n      const view = this.views[i];\n\n      if (view.id >= 0) {\n        view.disabled = true;\n        try {\n          await axios({\n            method: 'delete',\n            url: `/api/project/${this.projectId}/views/${view.id}`,\n            responseType: 'json',\n          });\n        } finally {\n          view.disabled = false;\n        }\n      }\n\n      this.views.splice(i, 1);\n    },\n    addView() {\n      this.views.push({\n        id: -Math.round(Math.random() * 10000000),\n        title: '',\n        active: true,\n        disabled: false,\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}