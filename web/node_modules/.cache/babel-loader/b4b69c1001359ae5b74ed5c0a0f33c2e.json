{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\nimport { codemirror } from 'vue-codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/vue/vue.js';\nimport 'codemirror/addon/lint/json-lint.js';\nimport 'codemirror/addon/display/placeholder.js';\nexport default {\n  mixins: [ItemFormBase],\n  props: {\n    templateId: Number,\n    sourceTask: Object\n  },\n  components: {\n    codemirror\n  },\n  data() {\n    return {\n      template: null,\n      buildTasks: null,\n      commitAvailable: null,\n      editedEnvironment: null,\n      cmOptions: {\n        tabSize: 2,\n        mode: 'application/json',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false\n      },\n      advancedOptions: false\n    };\n  },\n  watch: {\n    needReset(val) {\n      if (val) {\n        this.item.template_id = this.templateId;\n      }\n    },\n    templateId(val) {\n      this.item.template_id = val;\n    },\n    sourceTask(val) {\n      this.assignItem(val);\n    },\n    commitAvailable(val) {\n      if (val == null) {\n        this.commit_hash = null;\n      }\n    }\n  },\n  methods: {\n    getTaskMessage(task) {\n      let buildTask = task;\n      while (buildTask.version == null && buildTask.build_task != null) {\n        buildTask = buildTask.build_task;\n      }\n      if (!buildTask) {\n        return '';\n      }\n      return buildTask.version + (buildTask.message ? ` — ${buildTask.message}` : '');\n    },\n    assignItem(val) {\n      const v = val || {};\n      if (this.item == null) {\n        this.item = {};\n      }\n      Object.keys(v).forEach(field => {\n        this.item[field] = v[field];\n      });\n      this.editedEnvironment = JSON.parse(v.environment || '{}');\n      this.commitAvailable = v.commit_hash != null;\n    },\n    isLoaded() {\n      return this.item != null && this.template != null && this.buildTasks != null;\n    },\n    beforeSave() {\n      this.item.environment = JSON.stringify(this.editedEnvironment);\n    },\n    async afterLoadData() {\n      this.assignItem(this.sourceTask);\n      this.item.template_id = this.templateId;\n      this.advancedOptions = this.item.arguments != null;\n      this.template = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.templateId}`,\n        responseType: 'json'\n      })).data;\n      this.buildTasks = this.template.type === 'deploy' ? (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.template.build_template_id}/tasks?status=success`,\n        responseType: 'json'\n      })).data.filter(task => task.status === 'success') : [];\n      if (this.item.build_task_id == null && this.buildTasks.length > 0 && this.buildTasks.length > 0) {\n        this.item.build_task_id = this.buildTasks[0].id;\n      }\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/tasks`;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;IACA;EACA;EACAC;IACAC;MACA;QACA;MACA;IACA;IAEAlB;MACA;IACA;IAEAC;MACA;IACA;IAEAM;MACA;QACA;MACA;IACA;EACA;EACAY;IACAC;MACA;MAEA;QACAC;MACA;MAEA;QACA;MACA;MAEA;IACA;IAEAC;MACA;MAEA;QACA;MACA;MAEAC;QACA;MACA;MAEA;MACA;IACA;IAEAC;MACA,4BACA,yBACA;IACA;IAEAC;MACA;IACA;IAEA;MACA;MAEA;MAEA;MAEA;QACAC;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;MAEA,uCACA,8BACA;QACA;MACA;IACA;IAEAC;MACA;IACA;EACA;AACA","names":["mixins","props","templateId","sourceTask","components","codemirror","data","template","buildTasks","commitAvailable","editedEnvironment","cmOptions","tabSize","mode","lineNumbers","line","lint","indentWithTabs","advancedOptions","watch","needReset","methods","getTaskMessage","buildTask","assignItem","Object","isLoaded","beforeSave","keys","url","responseType","getItemsUrl"],"sourceRoot":"src/components","sources":["TerraformTaskForm.vue"],"sourcesContent":["<template>\n  <v-form\n    ref=\"form\"\n    lazy-validation\n    v-model=\"formValid\"\n    v-if=\"isLoaded()\"\n  >\n    <v-alert\n      :value=\"formError\"\n      color=\"error\"\n      class=\"pb-2\"\n    >{{ formError }}\n    </v-alert>\n\n    <v-alert\n      color=\"blue\"\n      dark\n      icon=\"mdi-source-fork\"\n      dismissible\n      v-model=\"commitAvailable\"\n      prominent\n    >\n      <div\n        style=\"font-weight: bold;\"\n      >{{ (item.commit_hash || '').substr(0, 10) }}\n      </div>\n      <div v-if=\"sourceTask && sourceTask.commit_message\">{{ sourceTask.commit_message }}</div>\n    </v-alert>\n\n    <v-select\n      v-if=\"template.type === 'deploy'\"\n      v-model=\"item.build_task_id\"\n      :label=\"$t('buildVersion')\"\n      :items=\"buildTasks\"\n      item-value=\"id\"\n      :item-text=\"(itm) => getTaskMessage(itm)\"\n      :rules=\"[v => !!v || $t('build_version_required')]\"\n      required\n      :disabled=\"formSaving\"\n    />\n\n    <v-text-field\n      v-model=\"item.message\"\n      :label=\"$t('messageOptional')\"\n      :disabled=\"formSaving\"\n    />\n\n    <v-text-field\n      v-for=\"(v) in template.survey_vars || []\"\n      :key=\"v.name\"\n      :label=\"v.title\"\n      :hint=\"v.description\"\n      v-model=\"editedEnvironment[v.name]\"\n      :required=\"v.required\"\n      :rules=\"[\n          val => !v.required || !!val || v.title + $t('isRequired'),\n          val => !val || v.type !== 'int' || /^\\d+$/.test(val) ||\n          v.title + ' ' + $t('mustBeInteger'),\n        ]\"\n    />\n\n    <v-row no-gutters class=\"mt-6\">\n      <v-col cols=\"12\" sm=\"6\">\n        <v-checkbox class=\"mt-0\" v-model=\"item.dry_run\">\n          <template v-slot:label>\n            <div class=\"text-no-wrap\">Plan</div>\n          </template>\n        </v-checkbox>\n      </v-col>\n    </v-row>\n\n    <div class=\"mt-4\" v-if=\"!advancedOptions\">\n      <a @click=\"advancedOptions = true\">\n        {{ $t('advanced') }}\n        <v-icon style=\"transform: translateY(-1px)\">mdi-chevron-right</v-icon>\n      </a>\n    </div>\n\n    <div class=\"mt-4\" v-else>\n      <a @click=\"advancedOptions = false\">\n        {{ $t('hide') }}\n        <v-icon style=\"transform: translateY(-1px)\">mdi-chevron-up</v-icon>\n      </a>\n    </div>\n\n    <v-alert\n      v-if=\"advancedOptions && !template.allow_override_args_in_task\"\n      color=\"info\"\n      dense\n      text\n      class=\"mb-2\"\n    >\n      {{ $t('pleaseAllowOverridingCliArgumentInTaskTemplateSett') }}<br>\n      <div style=\"position: relative; margin-top: 10px;\">\n        <video\n          autoplay\n          muted\n          style=\"width: 100%; border-radius: 4px;\"\n        >\n          <source\n            src=\"/allow-override-cli-args-in-task.mp4\"\n            type=\"video/mp4\"/>\n        </video>\n      </div>\n    </v-alert>\n\n    <codemirror\n      class=\"mt-4\"\n      v-if=\"advancedOptions && template.allow_override_args_in_task\"\n      :style=\"{ border: '1px solid lightgray' }\"\n      v-model=\"item.arguments\"\n      :options=\"cmOptions\"\n      :placeholder=\"$t('cliArgsJsonArrayExampleIMyinventoryshPrivatekeythe')\"\n    />\n\n  </v-form>\n</template>\n<script>\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\nimport { codemirror } from 'vue-codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/vue/vue.js';\nimport 'codemirror/addon/lint/json-lint.js';\nimport 'codemirror/addon/display/placeholder.js';\n\nexport default {\n  mixins: [ItemFormBase],\n  props: {\n    templateId: Number,\n    sourceTask: Object,\n  },\n  components: {\n    codemirror,\n  },\n  data() {\n    return {\n      template: null,\n      buildTasks: null,\n      commitAvailable: null,\n      editedEnvironment: null,\n      cmOptions: {\n        tabSize: 2,\n        mode: 'application/json',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false,\n      },\n      advancedOptions: false,\n    };\n  },\n  watch: {\n    needReset(val) {\n      if (val) {\n        this.item.template_id = this.templateId;\n      }\n    },\n\n    templateId(val) {\n      this.item.template_id = val;\n    },\n\n    sourceTask(val) {\n      this.assignItem(val);\n    },\n\n    commitAvailable(val) {\n      if (val == null) {\n        this.commit_hash = null;\n      }\n    },\n  },\n  methods: {\n    getTaskMessage(task) {\n      let buildTask = task;\n\n      while (buildTask.version == null && buildTask.build_task != null) {\n        buildTask = buildTask.build_task;\n      }\n\n      if (!buildTask) {\n        return '';\n      }\n\n      return buildTask.version + (buildTask.message ? ` — ${buildTask.message}` : '');\n    },\n\n    assignItem(val) {\n      const v = val || {};\n\n      if (this.item == null) {\n        this.item = {};\n      }\n\n      Object.keys(v).forEach((field) => {\n        this.item[field] = v[field];\n      });\n\n      this.editedEnvironment = JSON.parse(v.environment || '{}');\n      this.commitAvailable = v.commit_hash != null;\n    },\n\n    isLoaded() {\n      return this.item != null\n        && this.template != null\n        && this.buildTasks != null;\n    },\n\n    beforeSave() {\n      this.item.environment = JSON.stringify(this.editedEnvironment);\n    },\n\n    async afterLoadData() {\n      this.assignItem(this.sourceTask);\n\n      this.item.template_id = this.templateId;\n\n      this.advancedOptions = this.item.arguments != null;\n\n      this.template = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.templateId}`,\n        responseType: 'json',\n      })).data;\n\n      this.buildTasks = this.template.type === 'deploy' ? (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.template.build_template_id}/tasks?status=success`,\n        responseType: 'json',\n      })).data.filter((task) => task.status === 'success') : [];\n\n      if (this.item.build_task_id == null\n        && this.buildTasks.length > 0\n        && this.buildTasks.length > 0) {\n        this.item.build_task_id = this.buildTasks[0].id;\n      }\n    },\n\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/tasks`;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}