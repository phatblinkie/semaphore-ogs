{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport { USER_PERMISSIONS } from '@/lib/constants';\nimport ItemListPageBase from '@/components/ItemListPageBase';\nimport IntegrationForm from '@/components/IntegrationForm.vue';\nimport IntegrationsBase from '@/views/project/IntegrationsBase';\nimport copyToClipboard from '@/lib/copyToClipboard';\nexport default {\n  mixins: [ItemListPageBase, IntegrationsBase],\n  components: {\n    IntegrationForm\n  },\n  data() {\n    return {\n      templates: null\n    };\n  },\n  async created() {\n    this.templates = (await axios({\n      method: 'get',\n      url: `/api/project/${this.projectId}/templates`,\n      responseType: 'json'\n    })).data;\n  },\n  methods: {\n    copyToClipboard,\n    allowActions() {\n      return this.can(USER_PERMISSIONS.updateProject);\n    },\n    getHeaders() {\n      return [{\n        text: 'Name',\n        value: 'name',\n        width: '33.33%',\n        sortable: true\n      }, {\n        text: 'Template',\n        value: 'template_id',\n        width: '33.33%',\n        sortable: true\n      }, {\n        text: 'Actions',\n        value: 'actions',\n        sortable: false\n      }];\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/integrations`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/integrations/${this.itemId}`;\n    },\n    getEventName() {\n      return 'w-integration';\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA;AAEA;AAEA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IAAAC;EAAA;EACAC;IACA;MACAC;IACA;EACA;EAEA;IACA;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACAC;IACAC;MACA;IACA;IACAC;MACA;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAH;QACAC;QACAC;QACAC;MACA,GACA;QACAH;QACAC;QACAE;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["mixins","components","IntegrationForm","data","templates","method","url","responseType","methods","copyToClipboard","allowActions","getHeaders","text","value","width","sortable","getItemsUrl","getSingleItemUrl","getEventName"],"sourceRoot":"src/views/project","sources":["Integrations.vue"],"sourcesContent":["<template xmlns:v-slot=\"http://www.w3.org/1999/XSL/Transform\">\n  <div v-if=\"items != null && templates != null\">\n    <EditDialog\n      v-model=\"editDialog\"\n      :save-button-text=\"itemId === 'new' ? $t('create') : $t('save')\"\n      :title=\"itemId === 'new' ? $t('NewIntegration') : $t('EditIntegration')\"\n      :max-width=\"450\"\n      :transition=\"false\"\n      @save=\"loadItems()\"\n    >\n      <template v-slot:form=\"{ onSave, onError, needSave, needReset }\">\n        <IntegrationForm\n          :project-id=\"projectId\"\n          :item-id=\"itemId\"\n          @save=\"onSave\"\n          @error=\"onError\"\n          :need-save=\"needSave\"\n          :need-reset=\"needReset\"\n        />\n      </template>\n    </EditDialog>\n\n    <ObjectRefsDialog\n      object-title=\"integration\"\n      :object-refs=\"itemRefs\"\n      :project-id=\"projectId\"\n      v-model=\"itemRefsDialog\"\n    />\n\n    <YesNoDialog\n      :title=\"$t('DeleteIntegration')\"\n      :text=\"$t('DeleteIntegrationMsg')\"\n      v-model=\"deleteItemDialog\"\n      @yes=\"deleteItem(itemId)\"\n    />\n\n    <v-toolbar flat>\n      <v-app-bar-nav-icon @click=\"showDrawer()\"></v-app-bar-nav-icon>\n      <v-toolbar-title>{{ $t('integrations') }}</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-btn\n        color=\"primary\"\n        @click=\"editItem('new')\"\n      >{{ $t('NewIntegration') }}\n      </v-btn>\n    </v-toolbar>\n\n    <div class=\"px-4 py-3\">\n      <div v-for=\"alias of (aliases || [])\" :key=\"alias.id\">\n        <code class=\"mr-2\">{{ alias.url }}</code>\n        <v-btn icon\n               @click=\"copyToClipboard(\n                 alias.url, 'The alias URL  has been copied to the clipboard.')\">\n          <v-icon>mdi-content-copy</v-icon>\n        </v-btn>\n        <v-btn icon @click=\"deleteAlias(alias.id)\">\n          <v-icon>mdi-delete</v-icon>\n        </v-btn>\n      </div>\n\n      <v-btn color=\"primary\" @click=\"addAlias()\" :disabled=\"aliases == null\">\n        {{ aliases == null ? $t('LoadAlias') : $t('AddAlias') }}\n      </v-btn>\n    </div>\n\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"items\"\n      class=\"mt-4\"\n      :items-per-page=\"Number.MAX_VALUE\"\n    >\n      <template v-slot:item.name=\"{ item }\">\n        <router-link\n          :to=\"`/project/${projectId}/integration/${item.id}`\"\n        >{{ item.name }}\n        </router-link>\n      </template>\n      <template v-slot:item.template_id=\"{ item }\">\n        <router-link\n          :to=\"`/project/${projectId}/templates/${item.template_id}`\">\n          <code>{{ templates.find((t) => t.id === item.template_id).name }}</code>\n        </router-link>\n      </template>\n      <template v-slot:item.actions=\"{ item }\">\n        <div style=\"white-space: nowrap\">\n          <v-btn\n            icon\n            class=\"mr-1\"\n            @click=\"askDeleteItem(item.id)\"\n          >\n            <v-icon>mdi-delete</v-icon>\n          </v-btn>\n\n          <v-btn\n            icon\n            class=\"mr-1\"\n            @click=\"editItem(item.id)\"\n          >\n            <v-icon>mdi-pencil</v-icon>\n          </v-btn>\n        </div>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n<script>\nimport axios from 'axios';\n\nimport { USER_PERMISSIONS } from '@/lib/constants';\n\nimport ItemListPageBase from '@/components/ItemListPageBase';\nimport IntegrationForm from '@/components/IntegrationForm.vue';\nimport IntegrationsBase from '@/views/project/IntegrationsBase';\nimport copyToClipboard from '@/lib/copyToClipboard';\n\nexport default {\n  mixins: [ItemListPageBase, IntegrationsBase],\n  components: { IntegrationForm },\n  data() {\n    return {\n      templates: null,\n    };\n  },\n\n  async created() {\n    this.templates = (await axios({\n      method: 'get',\n      url: `/api/project/${this.projectId}/templates`,\n      responseType: 'json',\n    })).data;\n  },\n\n  methods: {\n    copyToClipboard,\n    allowActions() {\n      return this.can(USER_PERMISSIONS.updateProject);\n    },\n    getHeaders() {\n      return [{\n        text: 'Name',\n        value: 'name',\n        width: '33.33%',\n        sortable: true,\n      },\n      {\n        text: 'Template',\n        value: 'template_id',\n        width: '33.33%',\n        sortable: true,\n      },\n      {\n        text: 'Actions',\n        value: 'actions',\n        sortable: false,\n      }];\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/integrations`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/integrations/${this.itemId}`;\n    },\n    getEventName() {\n      return 'w-integration';\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}