{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n\nimport IndeterminateProgressCircular from '@/components/IndeterminateProgressCircular.vue';\nconst TaskStatus = Object.freeze({\n  WAITING: 'waiting',\n  STARTING: 'starting',\n  WAITING_CONFIRMATION: 'waiting_confirmation',\n  CONFIRMED: 'confirmed',\n  RUNNING: 'running',\n  SUCCESS: 'success',\n  ERROR: 'error',\n  STOPPING: 'stopping',\n  STOPPED: 'stopped'\n});\nexport default {\n  components: {\n    IndeterminateProgressCircular\n  },\n  props: {\n    status: String\n  },\n  methods: {\n    getStatusIcon(status) {\n      switch (status) {\n        case TaskStatus.WAITING:\n          return 'mdi-alarm';\n        case TaskStatus.STARTING:\n          return 'mdi-play-circle';\n        case TaskStatus.RUNNING:\n          return '';\n        case TaskStatus.SUCCESS:\n          return 'mdi-check-circle';\n        case TaskStatus.ERROR:\n          return 'mdi-information';\n        case TaskStatus.STOPPING:\n          return 'mdi-stop-circle';\n        case TaskStatus.STOPPED:\n          return 'mdi-stop-circle';\n        case TaskStatus.CONFIRMED:\n          return 'mdi-check-circle';\n        case TaskStatus.WAITING_CONFIRMATION:\n          return 'mdi-pause-circle';\n        default:\n          throw new Error(`Unknown task status ${status}`);\n      }\n    },\n    humanizeStatus(status) {\n      switch (status) {\n        case TaskStatus.WAITING:\n          return 'Waiting';\n        case TaskStatus.STARTING:\n          return 'Starting...';\n        case TaskStatus.RUNNING:\n          return 'Running';\n        case TaskStatus.SUCCESS:\n          return 'Success';\n        case TaskStatus.ERROR:\n          return 'Failed';\n        case TaskStatus.STOPPING:\n          return 'Stopping...';\n        case TaskStatus.STOPPED:\n          return 'Stopped';\n        case TaskStatus.CONFIRMED:\n          return 'Confirmed';\n        case TaskStatus.WAITING_CONFIRMATION:\n          return 'Waiting confirmation';\n        default:\n          throw new Error(`Unknown task status ${status}`);\n      }\n    },\n    getStatusColor(status) {\n      switch (status) {\n        case TaskStatus.WAITING:\n          return '';\n        case TaskStatus.STARTING:\n          return 'warning';\n        case TaskStatus.RUNNING:\n          return 'primary';\n        case TaskStatus.SUCCESS:\n          return 'success';\n        case TaskStatus.ERROR:\n          return 'error';\n        case TaskStatus.STOPPING:\n          return '';\n        case TaskStatus.STOPPED:\n          return '';\n        case TaskStatus.CONFIRMED:\n          return 'warning';\n        case TaskStatus.WAITING_CONFIRMATION:\n          return 'warning';\n        default:\n          throw new Error(`Unknown task status ${status}`);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;AAQA;AAEA;EACAA;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;EACAC;AACA;AAEA;EACAC;IAAAC;EAAA;EACAC;IACAC;EACA;EAEAC;IACAC;MACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;IAEAC;MACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;IAEAC;MACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;EACA;AACA","names":["WAITING","STARTING","WAITING_CONFIRMATION","CONFIRMED","RUNNING","SUCCESS","ERROR","STOPPING","STOPPED","components","IndeterminateProgressCircular","props","status","methods","getStatusIcon","humanizeStatus","getStatusColor"],"sourceRoot":"src/components","sources":["TaskStatus.vue"],"sourcesContent":["<template>\n  <v-chip v-if=\"status\" style=\"font-weight: bold;\" :color=\"getStatusColor(status)\">\n    <v-icon v-if=\"status !== 'running'\" left>{{ getStatusIcon(status) }}</v-icon>\n    <IndeterminateProgressCircular v-else style=\"margin-left: -5px;\" />\n    {{ humanizeStatus(status) }}\n  </v-chip>\n</template>\n<script>\nimport IndeterminateProgressCircular from '@/components/IndeterminateProgressCircular.vue';\n\nconst TaskStatus = Object.freeze({\n  WAITING: 'waiting',\n  STARTING: 'starting',\n  WAITING_CONFIRMATION: 'waiting_confirmation',\n  CONFIRMED: 'confirmed',\n  RUNNING: 'running',\n  SUCCESS: 'success',\n  ERROR: 'error',\n  STOPPING: 'stopping',\n  STOPPED: 'stopped',\n});\n\nexport default {\n  components: { IndeterminateProgressCircular },\n  props: {\n    status: String,\n  },\n\n  methods: {\n    getStatusIcon(status) {\n      switch (status) {\n        case TaskStatus.WAITING:\n          return 'mdi-alarm';\n        case TaskStatus.STARTING:\n          return 'mdi-play-circle';\n        case TaskStatus.RUNNING:\n          return '';\n        case TaskStatus.SUCCESS:\n          return 'mdi-check-circle';\n        case TaskStatus.ERROR:\n          return 'mdi-information';\n        case TaskStatus.STOPPING:\n          return 'mdi-stop-circle';\n        case TaskStatus.STOPPED:\n          return 'mdi-stop-circle';\n        case TaskStatus.CONFIRMED:\n          return 'mdi-check-circle';\n        case TaskStatus.WAITING_CONFIRMATION:\n          return 'mdi-pause-circle';\n        default:\n          throw new Error(`Unknown task status ${status}`);\n      }\n    },\n\n    humanizeStatus(status) {\n      switch (status) {\n        case TaskStatus.WAITING:\n          return 'Waiting';\n        case TaskStatus.STARTING:\n          return 'Starting...';\n        case TaskStatus.RUNNING:\n          return 'Running';\n        case TaskStatus.SUCCESS:\n          return 'Success';\n        case TaskStatus.ERROR:\n          return 'Failed';\n        case TaskStatus.STOPPING:\n          return 'Stopping...';\n        case TaskStatus.STOPPED:\n          return 'Stopped';\n        case TaskStatus.CONFIRMED:\n          return 'Confirmed';\n        case TaskStatus.WAITING_CONFIRMATION:\n          return 'Waiting confirmation';\n        default:\n          throw new Error(`Unknown task status ${status}`);\n      }\n    },\n\n    getStatusColor(status) {\n      switch (status) {\n        case TaskStatus.WAITING:\n          return '';\n        case TaskStatus.STARTING:\n          return 'warning';\n        case TaskStatus.RUNNING:\n          return 'primary';\n        case TaskStatus.SUCCESS:\n          return 'success';\n        case TaskStatus.ERROR:\n          return 'error';\n        case TaskStatus.STOPPING:\n          return '';\n        case TaskStatus.STOPPED:\n          return '';\n        case TaskStatus.CONFIRMED:\n          return 'warning';\n        case TaskStatus.WAITING_CONFIRMATION:\n          return 'warning';\n        default:\n          throw new Error(`Unknown task status ${status}`);\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}