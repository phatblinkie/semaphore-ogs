{"ast":null,"code":"import axios from 'axios';\nimport { getErrorMessage } from '@/lib/error';\n\n/**\n * Most of Semaphore entities (keys, environments, etc) have similar REST API for\n * access and manipulation.\n * This class presents mixin for creating editing form for such entities.\n * This class should be used as mixin in Vue-template.\n *\n * Simplest example: KeyForm.vue. It demonstrate all you need to understand how it works.\n *\n * You must provide next required properties to use this mixin:\n *\n * * itemId\n * * projectId\n *\n * Your template must have <v-form ref=\"form\">...</v-form>.\n *\n * You must provide next methods in your template:\n *\n * * getItemsUrl() - returns URL for retrieving collection of entities (GET-method).\n * * getSingleItemUrl() - returns URL for retrieving and manipulation of single entity\n *                        (GET, POST, PUT, DELETE methods).\n */\nexport default {\n  props: {\n    itemId: [Number, String],\n    projectId: [Number, String],\n    needSave: Boolean,\n    // flag which signal about user want to save form\n    needReset: Boolean // flag which signal about user want to reset form\n  },\n  data() {\n    return {\n      item: null,\n      formValid: false,\n      formError: null,\n      formSaving: false\n    };\n  },\n  async created() {\n    await this.loadData();\n  },\n  computed: {\n    isNew() {\n      return this.itemId === 'new';\n    }\n  },\n  watch: {\n    async needSave(val) {\n      if (val) {\n        await this.save();\n      }\n    },\n    async needReset(val) {\n      if (val) {\n        await this.reset();\n      }\n    }\n  },\n  methods: {\n    async reset() {\n      this.item = null;\n      this.formError = null;\n      if (this.$refs.form) {\n        this.$refs.form.resetValidation();\n      }\n      await this.afterReset();\n      await this.loadData();\n    },\n    getItemsUrl() {\n      throw new Error('Not implemented'); // must me implemented in template\n    },\n    getSingleItemUrl() {\n      throw new Error('Not implemented'); // must me implemented in template\n    },\n    beforeSave() {},\n    afterReset() {},\n    afterSave() {},\n    beforeLoadData() {},\n    afterLoadData() {},\n    getNewItem() {\n      return {};\n    },\n    async loadData() {\n      await this.beforeLoadData();\n      if (this.isNew) {\n        this.item = this.getNewItem();\n      } else {\n        this.item = (await axios({\n          method: 'get',\n          url: this.getSingleItemUrl(),\n          responseType: 'json'\n        })).data;\n      }\n      await this.afterLoadData();\n    },\n    /**\n     * You add add/override some PUT/POST request options with using this method.\n     * For example, you want to change response type, just override this method:\n     * ```\n     * getRequestOptions() {\n     *   return {\n     *     responseType: 'text'\n     *   }\n     * }\n     * ```\n     *\n     * This method works only for create (POST) and update (PUT) requests.\n     * @returns {Object}\n     */\n    getRequestOptions() {\n      return {};\n    },\n    /**\n     * Saves or creates item via API.\n     * @returns {Promise<null>} null if validation didn't pass or user data if user saved.\n     */\n    async save(data = {}) {\n      this.formError = null;\n      if (!this.$refs.form.validate()) {\n        this.$emit('error', {});\n        return null;\n      }\n      this.formSaving = true;\n      let item;\n      try {\n        await this.beforeSave();\n        item = (await axios({\n          method: this.isNew ? 'post' : 'put',\n          url: this.isNew ? this.getItemsUrl() : this.getSingleItemUrl(),\n          responseType: 'json',\n          data: {\n            ...this.item,\n            project_id: this.projectId,\n            ...data\n          },\n          ...this.getRequestOptions()\n        })).data;\n        await this.afterSave(item);\n        this.$emit('save', {\n          item: item || this.item,\n          action: this.isNew ? 'new' : 'edit'\n        });\n      } catch (err) {\n        this.formError = getErrorMessage(err);\n        this.$emit('error', {\n          message: this.formError\n        });\n      } finally {\n        this.formSaving = false;\n      }\n      return item || this.item;\n    }\n  }\n};","map":{"version":3,"names":["axios","getErrorMessage","props","itemId","Number","String","projectId","needSave","Boolean","needReset","data","item","formValid","formError","formSaving","created","loadData","computed","isNew","watch","val","save","reset","methods","$refs","form","resetValidation","afterReset","getItemsUrl","Error","getSingleItemUrl","beforeSave","afterSave","beforeLoadData","afterLoadData","getNewItem","method","url","responseType","getRequestOptions","validate","$emit","project_id","action","err","message"],"sources":["/home/admin/repos/semaphore-ogs/web/src/components/ItemFormBase.js"],"sourcesContent":["import axios from 'axios';\nimport { getErrorMessage } from '@/lib/error';\n\n/**\n * Most of Semaphore entities (keys, environments, etc) have similar REST API for\n * access and manipulation.\n * This class presents mixin for creating editing form for such entities.\n * This class should be used as mixin in Vue-template.\n *\n * Simplest example: KeyForm.vue. It demonstrate all you need to understand how it works.\n *\n * You must provide next required properties to use this mixin:\n *\n * * itemId\n * * projectId\n *\n * Your template must have <v-form ref=\"form\">...</v-form>.\n *\n * You must provide next methods in your template:\n *\n * * getItemsUrl() - returns URL for retrieving collection of entities (GET-method).\n * * getSingleItemUrl() - returns URL for retrieving and manipulation of single entity\n *                        (GET, POST, PUT, DELETE methods).\n */\nexport default {\n  props: {\n    itemId: [Number, String],\n    projectId: [Number, String],\n    needSave: Boolean, // flag which signal about user want to save form\n    needReset: Boolean, // flag which signal about user want to reset form\n  },\n\n  data() {\n    return {\n      item: null,\n      formValid: false,\n      formError: null,\n      formSaving: false,\n    };\n  },\n\n  async created() {\n    await this.loadData();\n  },\n\n  computed: {\n    isNew() {\n      return this.itemId === 'new';\n    },\n  },\n\n  watch: {\n    async needSave(val) {\n      if (val) {\n        await this.save();\n      }\n    },\n    async needReset(val) {\n      if (val) {\n        await this.reset();\n      }\n    },\n  },\n\n  methods: {\n    async reset() {\n      this.item = null;\n      this.formError = null;\n      if (this.$refs.form) {\n        this.$refs.form.resetValidation();\n      }\n      await this.afterReset();\n      await this.loadData();\n    },\n\n    getItemsUrl() {\n      throw new Error('Not implemented'); // must me implemented in template\n    },\n\n    getSingleItemUrl() {\n      throw new Error('Not implemented'); // must me implemented in template\n    },\n\n    beforeSave() {\n\n    },\n\n    afterReset() {\n\n    },\n\n    afterSave() {\n\n    },\n\n    beforeLoadData() {\n\n    },\n\n    afterLoadData() {\n\n    },\n\n    getNewItem() {\n      return {};\n    },\n\n    async loadData() {\n      await this.beforeLoadData();\n\n      if (this.isNew) {\n        this.item = this.getNewItem();\n      } else {\n        this.item = (await axios({\n          method: 'get',\n          url: this.getSingleItemUrl(),\n          responseType: 'json',\n        })).data;\n      }\n\n      await this.afterLoadData();\n    },\n\n    /**\n     * You add add/override some PUT/POST request options with using this method.\n     * For example, you want to change response type, just override this method:\n     * ```\n     * getRequestOptions() {\n     *   return {\n     *     responseType: 'text'\n     *   }\n     * }\n     * ```\n     *\n     * This method works only for create (POST) and update (PUT) requests.\n     * @returns {Object}\n     */\n    getRequestOptions() {\n      return {};\n    },\n\n    /**\n     * Saves or creates item via API.\n     * @returns {Promise<null>} null if validation didn't pass or user data if user saved.\n     */\n    async save(data = {}) {\n      this.formError = null;\n\n      if (!this.$refs.form.validate()) {\n        this.$emit('error', {});\n        return null;\n      }\n\n      this.formSaving = true;\n      let item;\n\n      try {\n        await this.beforeSave();\n\n        item = (await axios({\n          method: this.isNew ? 'post' : 'put',\n          url: this.isNew\n            ? this.getItemsUrl()\n            : this.getSingleItemUrl(),\n          responseType: 'json',\n          data: {\n            ...this.item,\n            project_id: this.projectId,\n            ...data,\n          },\n          ...(this.getRequestOptions()),\n        })).data;\n\n        await this.afterSave(item);\n\n        this.$emit('save', {\n          item: item || this.item,\n          action: this.isNew ? 'new' : 'edit',\n        });\n      } catch (err) {\n        this.formError = getErrorMessage(err);\n        this.$emit('error', {\n          message: this.formError,\n        });\n      } finally {\n        this.formSaving = false;\n      }\n\n      return item || this.item;\n    },\n  },\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,aAAa;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;EACbC,KAAK,EAAE;IACLC,MAAM,EAAE,CAACC,MAAM,EAAEC,MAAM,CAAC;IACxBC,SAAS,EAAE,CAACF,MAAM,EAAEC,MAAM,CAAC;IAC3BE,QAAQ,EAAEC,OAAO;IAAE;IACnBC,SAAS,EAAED,OAAO,CAAE;EACtB,CAAC;EAEDE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVC,SAAS,EAAE,KAAK;MAChBC,SAAS,EAAE,IAAI;MACfC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EAED,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,QAAQ,CAAC,CAAC;EACvB,CAAC;EAEDC,QAAQ,EAAE;IACRC,KAAKA,CAAA,EAAG;MACN,OAAO,IAAI,CAACf,MAAM,KAAK,KAAK;IAC9B;EACF,CAAC;EAEDgB,KAAK,EAAE;IACL,MAAMZ,QAAQA,CAACa,GAAG,EAAE;MAClB,IAAIA,GAAG,EAAE;QACP,MAAM,IAAI,CAACC,IAAI,CAAC,CAAC;MACnB;IACF,CAAC;IACD,MAAMZ,SAASA,CAACW,GAAG,EAAE;MACnB,IAAIA,GAAG,EAAE;QACP,MAAM,IAAI,CAACE,KAAK,CAAC,CAAC;MACpB;IACF;EACF,CAAC;EAEDC,OAAO,EAAE;IACP,MAAMD,KAAKA,CAAA,EAAG;MACZ,IAAI,CAACX,IAAI,GAAG,IAAI;MAChB,IAAI,CAACE,SAAS,GAAG,IAAI;MACrB,IAAI,IAAI,CAACW,KAAK,CAACC,IAAI,EAAE;QACnB,IAAI,CAACD,KAAK,CAACC,IAAI,CAACC,eAAe,CAAC,CAAC;MACnC;MACA,MAAM,IAAI,CAACC,UAAU,CAAC,CAAC;MACvB,MAAM,IAAI,CAACX,QAAQ,CAAC,CAAC;IACvB,CAAC;IAEDY,WAAWA,CAAA,EAAG;MACZ,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACtC,CAAC;IAEDC,gBAAgBA,CAAA,EAAG;MACjB,MAAM,IAAID,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACtC,CAAC;IAEDE,UAAUA,CAAA,EAAG,CAEb,CAAC;IAEDJ,UAAUA,CAAA,EAAG,CAEb,CAAC;IAEDK,SAASA,CAAA,EAAG,CAEZ,CAAC;IAEDC,cAAcA,CAAA,EAAG,CAEjB,CAAC;IAEDC,aAAaA,CAAA,EAAG,CAEhB,CAAC;IAEDC,UAAUA,CAAA,EAAG;MACX,OAAO,CAAC,CAAC;IACX,CAAC;IAED,MAAMnB,QAAQA,CAAA,EAAG;MACf,MAAM,IAAI,CAACiB,cAAc,CAAC,CAAC;MAE3B,IAAI,IAAI,CAACf,KAAK,EAAE;QACd,IAAI,CAACP,IAAI,GAAG,IAAI,CAACwB,UAAU,CAAC,CAAC;MAC/B,CAAC,MAAM;QACL,IAAI,CAACxB,IAAI,GAAG,CAAC,MAAMX,KAAK,CAAC;UACvBoC,MAAM,EAAE,KAAK;UACbC,GAAG,EAAE,IAAI,CAACP,gBAAgB,CAAC,CAAC;UAC5BQ,YAAY,EAAE;QAChB,CAAC,CAAC,EAAE5B,IAAI;MACV;MAEA,MAAM,IAAI,CAACwB,aAAa,CAAC,CAAC;IAC5B,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIK,iBAAiBA,CAAA,EAAG;MAClB,OAAO,CAAC,CAAC;IACX,CAAC;IAED;AACJ;AACA;AACA;IACI,MAAMlB,IAAIA,CAACX,IAAI,GAAG,CAAC,CAAC,EAAE;MACpB,IAAI,CAACG,SAAS,GAAG,IAAI;MAErB,IAAI,CAAC,IAAI,CAACW,KAAK,CAACC,IAAI,CAACe,QAAQ,CAAC,CAAC,EAAE;QAC/B,IAAI,CAACC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACvB,OAAO,IAAI;MACb;MAEA,IAAI,CAAC3B,UAAU,GAAG,IAAI;MACtB,IAAIH,IAAI;MAER,IAAI;QACF,MAAM,IAAI,CAACoB,UAAU,CAAC,CAAC;QAEvBpB,IAAI,GAAG,CAAC,MAAMX,KAAK,CAAC;UAClBoC,MAAM,EAAE,IAAI,CAAClB,KAAK,GAAG,MAAM,GAAG,KAAK;UACnCmB,GAAG,EAAE,IAAI,CAACnB,KAAK,GACX,IAAI,CAACU,WAAW,CAAC,CAAC,GAClB,IAAI,CAACE,gBAAgB,CAAC,CAAC;UAC3BQ,YAAY,EAAE,MAAM;UACpB5B,IAAI,EAAE;YACJ,GAAG,IAAI,CAACC,IAAI;YACZ+B,UAAU,EAAE,IAAI,CAACpC,SAAS;YAC1B,GAAGI;UACL,CAAC;UACD,GAAI,IAAI,CAAC6B,iBAAiB,CAAC;QAC7B,CAAC,CAAC,EAAE7B,IAAI;QAER,MAAM,IAAI,CAACsB,SAAS,CAACrB,IAAI,CAAC;QAE1B,IAAI,CAAC8B,KAAK,CAAC,MAAM,EAAE;UACjB9B,IAAI,EAAEA,IAAI,IAAI,IAAI,CAACA,IAAI;UACvBgC,MAAM,EAAE,IAAI,CAACzB,KAAK,GAAG,KAAK,GAAG;QAC/B,CAAC,CAAC;MACJ,CAAC,CAAC,OAAO0B,GAAG,EAAE;QACZ,IAAI,CAAC/B,SAAS,GAAGZ,eAAe,CAAC2C,GAAG,CAAC;QACrC,IAAI,CAACH,KAAK,CAAC,OAAO,EAAE;UAClBI,OAAO,EAAE,IAAI,CAAChC;QAChB,CAAC,CAAC;MACJ,CAAC,SAAS;QACR,IAAI,CAACC,UAAU,GAAG,KAAK;MACzB;MAEA,OAAOH,IAAI,IAAI,IAAI,CAACA,IAAI;IAC1B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}