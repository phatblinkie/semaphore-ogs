{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport { codemirror } from 'vue-codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/vue/vue.js';\nimport 'codemirror/addon/display/placeholder.js';\nimport { getErrorMessage } from '@/lib/error';\n// import EventBus from '@/event-bus';\n// import { getErrorMessage } from '@/lib/error';\n\n// const PREDEFINED_ENV_VARS = [{\n//   name: 'ANSIBLE_HOST_KEY_CHECKING',\n//   value: 'False',\n//   description: 'Avoid host key checking by the tools Ansible uses to connect to the host.',\n// }];\n\nexport default {\n  mixins: [ItemFormBase],\n  components: {\n    codemirror\n  },\n  created() {},\n  watch: {\n    extraVarsEditMode(val) {\n      let extraVars;\n      switch (val) {\n        case 'json':\n          if (this.extraVars == null) {\n            return;\n          }\n          this.json = JSON.stringify(this.extraVars.reduce((prev, curr) => ({\n            ...prev,\n            [curr.name]: curr.value\n          }), {}), null, 2);\n          break;\n        case 'table':\n          try {\n            extraVars = JSON.parse(this.json);\n            this.formError = null;\n          } catch (err) {\n            this.formError = getErrorMessage(err);\n            this.extraVars = null;\n            return;\n          }\n          if (Object.keys(extraVars).some(x => typeof extraVars[x] === 'object')) {\n            this.extraVars = null;\n          } else {\n            this.extraVars = Object.keys(extraVars).map(x => ({\n              name: x,\n              value: extraVars[x]\n            }));\n          }\n          break;\n        default:\n          throw new Error(`Invalid extra variables edit mode: ${val}`);\n      }\n    }\n  },\n  data() {\n    return {\n      // PREDEFINED_ENV_VARS,\n      images: ['dind-runner:latest'],\n      advancedOptions: false,\n      json: '{}',\n      extraVars: [],\n      env: [],\n      secrets: [],\n      cmOptions: {\n        tabSize: 2,\n        mode: 'application/json',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false\n      },\n      extraVarsEditMode: 'json'\n      // predefinedEnvVars: [],\n    };\n  },\n  methods: {\n    addExtraVar(name = '', value = '') {\n      this.extraVars.push({\n        name,\n        value\n      });\n    },\n    removeExtraVar(val) {\n      const i = this.extraVars.findIndex(v => v.name === val.name);\n      if (i > -1) {\n        this.extraVars.splice(i, 1);\n      }\n    },\n    addEnvVar(name = '', value = '') {\n      this.env.push({\n        name,\n        value\n      });\n    },\n    removeEnvVar(val) {\n      const i = this.env.findIndex(v => v.name === val.name);\n      if (i > -1) {\n        this.env.splice(i, 1);\n      }\n    },\n    addSecret(type) {\n      this.secrets.push({\n        type,\n        name: '',\n        value: '',\n        new: true\n      });\n    },\n    removeSecret(val) {\n      const i = this.secrets.findIndex(v => v.name === val.name);\n      if (i > -1) {\n        const s = this.secrets[i];\n        this.secrets.splice(i, 1);\n        if (!s.new) {\n          this.secrets.push({\n            ...s,\n            remove: true\n          });\n        }\n      }\n    },\n    // setExtraVar(name, value) {\n    //   try {\n    //     const obj = JSON.parse(this.json || '{}');\n    //     if (value == null) {\n    //       delete obj[name];\n    //     } else {\n    //       obj[name] = value;\n    //     }\n    //     this.json = JSON.stringify(obj, null, 2);\n    //   } catch (err) {\n    //     EventBus.$emit('i-snackbar', {\n    //       color: 'error',\n    //       text: getErrorMessage(err),\n    //     });\n    //   }\n    // },\n\n    beforeSave() {\n      switch (this.extraVarsEditMode) {\n        case 'json':\n          this.item.json = this.json;\n          break;\n        case 'table':\n          if (this.extraVars == null) {\n            this.item.json = this.json;\n          } else {\n            this.item.json = JSON.stringify(this.extraVars.reduce((prev, curr) => ({\n              ...prev,\n              [curr.name]: curr.value\n            }), {}));\n          }\n          break;\n        default:\n          throw new Error(`Invalid extra variables edit mode: ${this.extraVarsEditMode}`);\n      }\n      const env = (this.env || []).reduce((prev, curr) => ({\n        ...prev,\n        [curr.name]: curr.value\n      }), {});\n\n      // this.predefinedEnvVars.forEach((index) => {\n      //   const predefinedVar = PREDEFINED_ENV_VARS[index];\n      //   env[predefinedVar.name] = predefinedVar.value;\n      // });\n\n      const secrets = (this.secrets || []).map(s => {\n        let operation;\n        if (s.new) {\n          operation = 'create';\n        } else if (s.remove) {\n          operation = 'delete';\n        } else if (s.value !== '') {\n          operation = 'update';\n        }\n        return {\n          id: s.id,\n          name: s.name,\n          secret: s.value,\n          type: s.type,\n          operation\n        };\n      }).filter(s => s.operation != null);\n      this.item.env = JSON.stringify(env);\n      this.item.secrets = secrets;\n    },\n    afterLoadData() {\n      this.json = JSON.stringify(JSON.parse(this.item?.json || '{}'), null, 2);\n      const json = JSON.parse(this.item?.json || '{}');\n      const env = JSON.parse(this.item?.env || '{}');\n      const secrets = this.item?.secrets || [];\n      if (Object.keys(json).some(x => typeof json[x] === 'object')) {\n        this.extraVars = null;\n        this.extraVarsEditMode = 'json';\n      } else {\n        this.extraVars = Object.keys(json).map(x => ({\n          name: x,\n          value: json[x]\n        }));\n        this.extraVarsEditMode = 'table';\n      }\n      this.env = Object.keys(env)\n      // .filter((x) => {\n      //   const index = PREDEFINED_ENV_VARS.findIndex((v) => v.name === x);\n      //   return index === -1 || PREDEFINED_ENV_VARS[index].value !== env[x];\n      // })\n      .map(x => ({\n        name: x,\n        value: env[x]\n      }));\n      this.secrets = secrets.map(x => ({\n        id: x.id,\n        name: x.name,\n        value: '',\n        type: x.type\n      }));\n\n      // Object.keys(env).forEach((x) => {\n      //   const index = PREDEFINED_ENV_VARS.findIndex((v) => v.name === x);\n      //   if (index !== -1 && PREDEFINED_ENV_VARS[index].value === env[x]) {\n      //     this.predefinedEnvVars.push(index);\n      //   }\n      // });\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/environment`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/environment/${this.itemId}`;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqQA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;EACAA;EACAC;IACAC;EACA;EAEAC,WACA;EAEAC;IACAC;MACA;MAEA;QACA;UACA;YACA;UACA;UAEA;YACA;YACA;UACA;UACA;QACA;UACA;YACAC;YACA;UACA;YACA;YACA;YACA;UACA;UACA;YACA;UACA;YACA,wCACAC;cACAC;cACAC;YACA;UACA;UACA;QACA;UACA;MACA;IACA;EACA;EAEAC;IACA;MACA;MACAC,SACA,qBACA;MACAC;MAEAC;MACAP;MACAQ;MACAC;MAEAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MAEAjB;MACA;IACA;EACA;EAEAkB;IACAC;MACA;QAAAhB;QAAAC;MAAA;IACA;IAEAgB;MACA;MACA;QACA;MACA;IACA;IAEAC;MACA;QAAAlB;QAAAC;MAAA;IACA;IAEAkB;MACA;MACA;QACA;MACA;IACA;IAEAC;MACA;QACAC;QAAArB;QAAAC;QAAAqB;MACA;IACA;IAEAC;MACA;MACA;QACA;QACA;QAEA;UACA;YACA;YACAC;UACA;QACA;MACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEAC;MACA;QACA;UACA;UACA;QACA;UACA;YACA;UACA;YACA;cACA;cACA;YACA;UACA;UACA;QACA;UACA;MACA;MAEA;QACA;QACA;MACA;;MAEA;MACA;MACA;MACA;;MAEA;QACA;QACA;UACAC;QACA;UACAA;QACA;UACAA;QACA;QACA;UACAC;UACA3B;UACA4B;UACAP;UACAK;QACA;MACA;MAEA;MACA;IACA;IAEAG;MACA;MAEA;MAEA;MAEA;MAEA;QACA;QACA;MACA;QACA,mCACA9B;UACAC;UACAC;QACA;QACA;MACA;MAEA;MACA;MACA;MACA;MACA;MAAA,CACAF;QACAC;QACAC;MACA;MAEA;QACA0B;QACA3B;QACAC;QACAoB;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAS;MACA;IACA;IAEAC;MACA;IACA;EACA;AACA","names":["mixins","components","codemirror","created","watch","extraVarsEditMode","extraVars","map","name","value","data","images","advancedOptions","json","env","secrets","cmOptions","tabSize","mode","lineNumbers","line","lint","indentWithTabs","methods","addExtraVar","removeExtraVar","addEnvVar","removeEnvVar","addSecret","type","new","removeSecret","remove","beforeSave","operation","id","secret","afterLoadData","getItemsUrl","getSingleItemUrl"],"sourceRoot":"src/components","sources":["EnvironmentForm.vue"],"sourcesContent":["<template>\n  <v-form\n    ref=\"form\"\n    lazy-validation\n    v-model=\"formValid\"\n    v-if=\"item != null\"\n  >\n    <v-alert\n      :value=\"formError\"\n      color=\"error\"\n      class=\"pb-2\"\n    >{{ formError }}</v-alert>\n\n    <v-text-field\n      v-model=\"item.name\"\n      :label=\"$t('environmentName')\"\n      :rules=\"[v => !!v || $t('name_required')]\"\n      required\n      :disabled=\"formSaving\"\n      class=\"mb-4\"\n    ></v-text-field>\n\n    <v-subheader class=\"px-0\">\n      <v-icon class=\"mr-1\">mdi-variable</v-icon> {{ $t('extraVariables') }}\n\n      <v-tooltip bottom color=\"black\" open-delay=\"300\" max-width=\"400\">\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-icon\n            class=\"ml-1\"\n            v-bind=\"attrs\"\n            v-on=\"on\"\n          >mdi-help-circle</v-icon>\n        </template>\n        <span>\n          Variables passed via <code>--extra-vars</code> (Ansible) or\n          <code>-var</code> (Terraform/OpenTofu).\n        </span>\n      </v-tooltip>\n\n      <v-spacer />\n\n      <v-btn-toggle\n        v-model=\"extraVarsEditMode\"\n        tile\n        group\n      >\n        <v-btn value=\"table\" small class=\"mr-0\" style=\"border-radius: 4px;\">\n          Table\n        </v-btn>\n        <v-btn value=\"json\" small class=\"mr-0\" style=\"border-radius: 4px;\">\n          JSON\n        </v-btn>\n      </v-btn-toggle>\n    </v-subheader>\n\n    <codemirror\n      v-if=\"extraVarsEditMode === 'json'\"\n      :style=\"{ border: '1px solid lightgray' }\"\n      v-model=\"json\"\n      :options=\"cmOptions\"\n      :placeholder=\"$t('enterExtraVariablesJson')\"\n    />\n\n    <div v-else-if=\"extraVarsEditMode === 'table'\">\n      <v-data-table\n        v-if=\"extraVars != null\"\n        :items=\"extraVars\"\n        :items-per-page=\"-1\"\n        class=\"elevation-1\"\n        hide-default-footer\n        no-data-text=\"No values\"\n      >\n        <template v-slot:item=\"props\">\n          <tr>\n            <td class=\"pa-1\">\n              <v-text-field\n                solo-inverted\n                flat\n                hide-details\n                v-model=\"props.item.name\"\n                class=\"v-text-field--solo--no-min-height\"\n                :placeholder=\"$t('name')\"\n              ></v-text-field>\n            </td>\n            <td class=\"pa-1\">\n              <v-text-field\n                solo-inverted\n                flat\n                hide-details\n                v-model=\"props.item.value\"\n                class=\"v-text-field--solo--no-min-height\"\n                :placeholder=\"$t('Value')\"\n              ></v-text-field>\n            </td>\n            <td style=\"width: 38px;\">\n              <v-icon\n                small\n                class=\"pa-1\"\n                @click=\"removeExtraVar(props.item)\"\n              >\n                mdi-delete\n              </v-icon>\n            </td>\n          </tr>\n        </template>\n      </v-data-table>\n      <div class=\"mt-2 mb-4\" v-if=\"extraVars != null\">\n        <v-btn\n          color=\"primary\"\n          @click=\"addExtraVar()\"\n        >{{ $t('New Extra Variable') }}</v-btn>\n      </div>\n      <v-alert color=\"error\" v-else>Can't be displayed as table.</v-alert>\n    </div>\n\n    <div>\n      <v-subheader class=\"px-0 mt-4\">\n        <v-icon class=\"mr-1\">mdi-application-settings</v-icon>\n        {{ $t('environmentVariables') }}\n      </v-subheader>\n      <v-data-table\n        :items=\"env\"\n        :items-per-page=\"-1\"\n        class=\"elevation-1\"\n        hide-default-footer\n        no-data-text=\"No values\"\n      >\n        <template v-slot:item=\"props\">\n          <tr>\n            <td class=\"pa-1\">\n              <v-text-field\n                solo-inverted\n                flat\n                hide-details\n                v-model=\"props.item.name\"\n                class=\"v-text-field--solo--no-min-height\"\n                :placeholder=\"$t('name')\"\n              ></v-text-field>\n            </td>\n            <td class=\"pa-1\">\n              <v-text-field\n                solo-inverted\n                flat\n                hide-details\n                v-model=\"props.item.value\"\n                class=\"v-text-field--solo--no-min-height\"\n                :placeholder=\"$t('Value')\"\n              ></v-text-field>\n            </td>\n            <td style=\"width: 38px;\">\n              <v-icon\n                small\n                class=\"pa-1\"\n                @click=\"removeEnvVar(props.item)\"\n              >\n                mdi-delete\n              </v-icon>\n            </td>\n          </tr>\n        </template>\n      </v-data-table>\n      <div class=\"mt-2 mb-4\">\n        <v-btn\n          color=\"primary\"\n          @click=\"addEnvVar()\"\n        >{{ $t('New Environment Variable') }}</v-btn>\n      </div>\n    </div>\n\n    <div>\n      <v-subheader class=\"px-0 mt-4\">\n        <v-icon class=\"mr-1\">mdi-lock</v-icon>{{ $t('Secrets') }}\n      </v-subheader>\n\n      <v-data-table\n        :items=\"secrets.filter(s => !s.remove)\"\n        :items-per-page=\"-1\"\n        class=\"elevation-1\"\n        hide-default-footer\n        no-data-text=\"No values\"\n      >\n        <template v-slot:item=\"props\">\n          <tr>\n            <td class=\"pa-1\">\n              <v-icon>\n                {{ props.item.type === 'var' ? 'mdi-variable' : 'mdi-application-settings' }}\n              </v-icon>\n            </td>\n            <td class=\"pa-1\">\n              <v-text-field\n                solo-inverted\n                flat\n                hide-details\n                v-model=\"props.item.name\"\n                class=\"v-text-field--solo--no-min-height\"\n                :placeholder=\"$t('name')\"\n              ></v-text-field>\n            </td>\n            <td class=\"pa-1\">\n              <v-text-field\n                solo-inverted\n                flat\n                hide-details\n                v-model=\"props.item.value\"\n                placeholder=\"*******\"\n                class=\"v-text-field--solo--no-min-height\"\n              ></v-text-field>\n            </td>\n            <td style=\"width: 38px;\">\n              <v-icon\n                small\n                class=\"pa-1\"\n                @click=\"removeSecret(props.item)\"\n              >\n                mdi-delete\n              </v-icon>\n            </td>\n          </tr>\n        </template>\n      </v-data-table>\n\n      <div class=\"mt-2 mb-4\">\n        <v-menu\n          offset-y\n        >\n          <template v-slot:activator=\"{ on, attrs }\">\n            <v-btn\n              v-bind=\"attrs\"\n              v-on=\"on\"\n              color=\"primary\"\n            >New Secret</v-btn>\n          </template>\n          <v-list>\n            <v-list-item\n              link\n              @click=\"addSecret('var')\"\n            >\n              <v-list-item-icon>\n                <v-icon>mdi-variable</v-icon>\n              </v-list-item-icon>\n              <v-list-item-title>{{ $t('Secret Extra Variable') }}</v-list-item-title>\n            </v-list-item>\n            <v-list-item\n              link\n              @click=\"addSecret('env')\"\n            >\n              <v-list-item-icon>\n                <v-icon>mdi-application-settings</v-icon>\n              </v-list-item-icon>\n              <v-list-item-title>{{ $t('Secret Environment Variable') }}</v-list-item-title>\n            </v-list-item>\n          </v-list>\n        </v-menu>\n      </div>\n\n    </div>\n\n  </v-form>\n</template>\n\n<script>\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport ItemFormBase from '@/components/ItemFormBase';\n\nimport { codemirror } from 'vue-codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/vue/vue.js';\nimport 'codemirror/addon/display/placeholder.js';\nimport { getErrorMessage } from '@/lib/error';\n// import EventBus from '@/event-bus';\n// import { getErrorMessage } from '@/lib/error';\n\n// const PREDEFINED_ENV_VARS = [{\n//   name: 'ANSIBLE_HOST_KEY_CHECKING',\n//   value: 'False',\n//   description: 'Avoid host key checking by the tools Ansible uses to connect to the host.',\n// }];\n\nexport default {\n  mixins: [ItemFormBase],\n  components: {\n    codemirror,\n  },\n\n  created() {\n  },\n\n  watch: {\n    extraVarsEditMode(val) {\n      let extraVars;\n\n      switch (val) {\n        case 'json':\n          if (this.extraVars == null) {\n            return;\n          }\n\n          this.json = JSON.stringify(this.extraVars.reduce((prev, curr) => ({\n            ...prev,\n            [curr.name]: curr.value,\n          }), {}), null, 2);\n          break;\n        case 'table':\n          try {\n            extraVars = JSON.parse(this.json);\n            this.formError = null;\n          } catch (err) {\n            this.formError = getErrorMessage(err);\n            this.extraVars = null;\n            return;\n          }\n          if (Object.keys(extraVars).some((x) => typeof extraVars[x] === 'object')) {\n            this.extraVars = null;\n          } else {\n            this.extraVars = Object.keys(extraVars)\n              .map((x) => ({\n                name: x,\n                value: extraVars[x],\n              }));\n          }\n          break;\n        default:\n          throw new Error(`Invalid extra variables edit mode: ${val}`);\n      }\n    },\n  },\n\n  data() {\n    return {\n      // PREDEFINED_ENV_VARS,\n      images: [\n        'dind-runner:latest',\n      ],\n      advancedOptions: false,\n\n      json: '{}',\n      extraVars: [],\n      env: [],\n      secrets: [],\n\n      cmOptions: {\n        tabSize: 2,\n        mode: 'application/json',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false,\n      },\n\n      extraVarsEditMode: 'json',\n      // predefinedEnvVars: [],\n    };\n  },\n\n  methods: {\n    addExtraVar(name = '', value = '') {\n      this.extraVars.push({ name, value });\n    },\n\n    removeExtraVar(val) {\n      const i = this.extraVars.findIndex((v) => v.name === val.name);\n      if (i > -1) {\n        this.extraVars.splice(i, 1);\n      }\n    },\n\n    addEnvVar(name = '', value = '') {\n      this.env.push({ name, value });\n    },\n\n    removeEnvVar(val) {\n      const i = this.env.findIndex((v) => v.name === val.name);\n      if (i > -1) {\n        this.env.splice(i, 1);\n      }\n    },\n\n    addSecret(type) {\n      this.secrets.push({\n        type, name: '', value: '', new: true,\n      });\n    },\n\n    removeSecret(val) {\n      const i = this.secrets.findIndex((v) => v.name === val.name);\n      if (i > -1) {\n        const s = this.secrets[i];\n        this.secrets.splice(i, 1);\n\n        if (!s.new) {\n          this.secrets.push({\n            ...s,\n            remove: true,\n          });\n        }\n      }\n    },\n\n    // setExtraVar(name, value) {\n    //   try {\n    //     const obj = JSON.parse(this.json || '{}');\n    //     if (value == null) {\n    //       delete obj[name];\n    //     } else {\n    //       obj[name] = value;\n    //     }\n    //     this.json = JSON.stringify(obj, null, 2);\n    //   } catch (err) {\n    //     EventBus.$emit('i-snackbar', {\n    //       color: 'error',\n    //       text: getErrorMessage(err),\n    //     });\n    //   }\n    // },\n\n    beforeSave() {\n      switch (this.extraVarsEditMode) {\n        case 'json':\n          this.item.json = this.json;\n          break;\n        case 'table':\n          if (this.extraVars == null) {\n            this.item.json = this.json;\n          } else {\n            this.item.json = JSON.stringify(this.extraVars.reduce((prev, curr) => ({\n              ...prev,\n              [curr.name]: curr.value,\n            }), {}));\n          }\n          break;\n        default:\n          throw new Error(`Invalid extra variables edit mode: ${this.extraVarsEditMode}`);\n      }\n\n      const env = (this.env || []).reduce((prev, curr) => ({\n        ...prev,\n        [curr.name]: curr.value,\n      }), {});\n\n      // this.predefinedEnvVars.forEach((index) => {\n      //   const predefinedVar = PREDEFINED_ENV_VARS[index];\n      //   env[predefinedVar.name] = predefinedVar.value;\n      // });\n\n      const secrets = (this.secrets || []).map((s) => {\n        let operation;\n        if (s.new) {\n          operation = 'create';\n        } else if (s.remove) {\n          operation = 'delete';\n        } else if (s.value !== '') {\n          operation = 'update';\n        }\n        return {\n          id: s.id,\n          name: s.name,\n          secret: s.value,\n          type: s.type,\n          operation,\n        };\n      }).filter((s) => s.operation != null);\n\n      this.item.env = JSON.stringify(env);\n      this.item.secrets = secrets;\n    },\n\n    afterLoadData() {\n      this.json = JSON.stringify(JSON.parse(this.item?.json || '{}'), null, 2);\n\n      const json = JSON.parse(this.item?.json || '{}');\n\n      const env = JSON.parse(this.item?.env || '{}');\n\n      const secrets = this.item?.secrets || [];\n\n      if (Object.keys(json).some((x) => typeof json[x] === 'object')) {\n        this.extraVars = null;\n        this.extraVarsEditMode = 'json';\n      } else {\n        this.extraVars = Object.keys(json)\n          .map((x) => ({\n            name: x,\n            value: json[x],\n          }));\n        this.extraVarsEditMode = 'table';\n      }\n\n      this.env = Object.keys(env)\n        // .filter((x) => {\n        //   const index = PREDEFINED_ENV_VARS.findIndex((v) => v.name === x);\n        //   return index === -1 || PREDEFINED_ENV_VARS[index].value !== env[x];\n        // })\n        .map((x) => ({\n          name: x,\n          value: env[x],\n        }));\n\n      this.secrets = secrets.map((x) => ({\n        id: x.id,\n        name: x.name,\n        value: '',\n        type: x.type,\n      }));\n\n      // Object.keys(env).forEach((x) => {\n      //   const index = PREDEFINED_ENV_VARS.findIndex((v) => v.name === x);\n      //   if (index !== -1 && PREDEFINED_ENV_VARS[index].value === env[x]) {\n      //     this.predefinedEnvVars.push(index);\n      //   }\n      // });\n    },\n\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/environment`;\n    },\n\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/environment/${this.itemId}`;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}