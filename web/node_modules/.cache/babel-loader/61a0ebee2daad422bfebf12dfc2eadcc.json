{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport TaskStatus from '@/components/TaskStatus.vue';\nimport socket from '@/socket';\nexport default {\n  components: {\n    TaskStatus\n  },\n  props: {\n    itemId: Number,\n    projectId: Number\n  },\n  data() {\n    return {\n      item: {},\n      output: [],\n      user: {}\n    };\n  },\n  watch: {\n    async itemId() {\n      this.reset();\n      await this.loadData();\n    },\n    async projectId() {\n      this.reset();\n      await this.loadData();\n    }\n  },\n  computed: {\n    canStop() {\n      return ['running', 'stopping', 'waiting', 'starting', 'waiting_confirmation', 'confirmed'].includes(this.item.status);\n    }\n  },\n  async created() {\n    socket.addListener(data => this.onWebsocketDataReceived(data));\n    await this.loadData();\n  },\n  methods: {\n    async confirmTask() {\n      await axios({\n        method: 'post',\n        url: `/api/project/${this.projectId}/tasks/${this.itemId}/confirm`,\n        responseType: 'json',\n        data: {}\n      });\n    },\n    async stopTask(force) {\n      await axios({\n        method: 'post',\n        url: `/api/project/${this.projectId}/tasks/${this.itemId}/stop`,\n        responseType: 'json',\n        data: {\n          force\n        }\n      });\n    },\n    reset() {\n      this.item = {};\n      this.output = [];\n      this.user = {};\n    },\n    onWebsocketDataReceived(data) {\n      if (data.project_id !== this.projectId || data.task_id !== this.itemId) {\n        return;\n      }\n      switch (data.type) {\n        case 'update':\n          Object.assign(this.item, {\n            ...data,\n            type: undefined\n          });\n          break;\n        case 'log':\n          this.output.push(data);\n          setTimeout(() => {\n            this.$refs.output.scrollTop = this.$refs.output.scrollHeight;\n          }, 200);\n          break;\n        default:\n          break;\n      }\n    },\n    async loadData() {\n      this.item = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/tasks/${this.itemId}`,\n        responseType: 'json'\n      })).data;\n      this.output = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/tasks/${this.itemId}/output`,\n        responseType: 'json'\n      })).data;\n      this.user = (await axios({\n        method: 'get',\n        url: `/api/users/${this.item.user_id}`,\n        responseType: 'json'\n      })).data;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2JA;AACA;AACA;AAEA;EACAA;IAAAC;EAAA;EACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACA;MACA;MACA;IACA;IAEA;MACA;MACA;IACA;EACA;EAEAC;IACAC;MACA;IACA;EACA;EAEA;IACAC;IACA;EACA;EAEAC;IACA;MACA;QACAC;QACAC;QACAC;QACAX;MACA;IACA;IAEA;MACA;QACAS;QACAC;QACAC;QACAX;UACAY;QACA;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEAC;MACA;QACA;MACA;MAEA;QACA;UACAC;YACA;YACAC;UACA;UACA;QACA;UACA;UACAC;YACA;UACA;UACA;QACA;UACA;MACA;IACA;IAEA;MACA;QACAR;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;IACA;EACA;AACA","names":["components","TaskStatus","props","itemId","projectId","data","item","output","user","watch","computed","canStop","socket","methods","method","url","responseType","force","reset","onWebsocketDataReceived","Object","type","setTimeout"],"sourceRoot":"src/components","sources":["TaskLogView.vue"],"sourcesContent":["<template>\n  <div class=\"task-log-view\" :class=\"{'task-log-view--with-message': item.message}\">\n    <v-alert\n      type=\"info\"\n      text\n      v-if=\"item.message\"\n    >{{ item.message }}\n    </v-alert>\n\n    <v-container class=\"pa-0 mb-2\">\n      <v-row no-gutters>\n        <v-col>\n          <v-list two-line subheader class=\"pa-0\">\n            <v-list-item class=\"pa-0\">\n              <v-list-item-content>\n                <div class=\"pr-4\">\n                  <TaskStatus :status=\"item.status\"/>\n                </div>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-col>\n        <v-col>\n          <v-list two-line subheader class=\"pa-0\">\n            <v-list-item class=\"pa-0\">\n              <v-list-item-content v-if=\"item.user_id != null\">\n                <v-list-item-title>{{ $t('author') }}</v-list-item-title>\n                <v-list-item-subtitle>{{ user.name || '-' }}</v-list-item-subtitle>\n              </v-list-item-content>\n              <v-list-item-content v-else-if=\"item.integration_id != null\">\n                <v-list-item-title>{{ $t('integration') }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-col>\n        <v-col>\n          <v-list two-line subheader class=\"pa-0\">\n            <v-list-item class=\"pa-0\">\n              <v-list-item-content>\n                <v-list-item-title>{{ $t('started') || '-' }}</v-list-item-title>\n                <v-list-item-subtitle>\n                  {{ item.start | formatDate }}\n                </v-list-item-subtitle>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-col>\n        <v-col>\n          <v-list-item class=\"pa-0\">\n            <v-list-item-content>\n              <v-list-item-title>{{ $t('duration') || '-' }}</v-list-item-title>\n              <v-list-item-subtitle>\n                {{ [item.start, item.end] | formatMilliseconds }}\n              </v-list-item-subtitle>\n            </v-list-item-content>\n          </v-list-item>\n        </v-col>\n      </v-row>\n    </v-container>\n    <div class=\"task-log-records\" ref=\"output\">\n      <div class=\"task-log-records__record\" v-for=\"record in output\" :key=\"record.id\">\n        <div class=\"task-log-records__time\">\n          {{ record.time | formatTime }}\n        </div>\n        <div class=\"task-log-records__output\" v-html=\"$options.filters.formatLog(record.output)\">\n        </div>\n      </div>\n    </div>\n\n    <div\n      v-if=\"item.status === 'waiting_confirmation'\"\n      class=\"pl-4\"\n      style=\"\n        background: white;\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 55px;\n        display: flex;\n        align-items: center;\n      \"\n    >\n      Please confirm this task.\n    </div>\n\n    <v-btn\n      color=\"warning\"\n      style=\"position: absolute; bottom: 10px; right: 170px; width: 150px;\"\n      v-if=\"item.status === 'waiting_confirmation'\"\n      @click=\"confirmTask()\"\n    >\n      {{ $t('confirmTask') }}\n    </v-btn>\n\n    <v-btn\n      color=\"error\"\n      style=\"position: absolute; bottom: 10px; right: 10px; width: 150px;\"\n      v-if=\"canStop\"\n      @click=\"stopTask(item.status === 'stopping')\"\n    >\n      {{ item.status === 'stopping' ? $t('forceStop') : $t('stop') }}\n    </v-btn>\n\n  </div>\n</template>\n\n<style lang=\"scss\">\n\n@import '~vuetify/src/styles/settings/_variables';\n\n.task-log-view {\n}\n\n.task-log-records {\n  background: black;\n  color: white;\n  height: calc(100vh - 280px);\n  overflow: auto;\n  font-family: monospace;\n  margin: 0 -24px;\n  padding: 5px 10px 50px;\n}\n\n.task-log-view--with-message .task-log-records {\n  height: calc(100vh - 300px);\n}\n\n.task-log-records__record {\n  display: flex;\n  flex-direction: row;\n  justify-content: left;\n}\n\n.task-log-records__time {\n  width: 120px;\n  min-width: 120px;\n}\n\n.task-log-records__output {\n  width: 100%;\n  white-space: pre;\n}\n\n@media #{map-get($display-breakpoints, 'sm-and-down')} {\n  .task-log-records {\n    height: calc(100vh - 340px);\n  }\n\n  .task-log-view--with-message .task-log-records {\n    height: calc(100vh - 370px);\n  }\n}\n</style>\n<script>\nimport axios from 'axios';\nimport TaskStatus from '@/components/TaskStatus.vue';\nimport socket from '@/socket';\n\nexport default {\n  components: { TaskStatus },\n  props: {\n    itemId: Number,\n    projectId: Number,\n  },\n  data() {\n    return {\n      item: {},\n      output: [],\n      user: {},\n    };\n  },\n\n  watch: {\n    async itemId() {\n      this.reset();\n      await this.loadData();\n    },\n\n    async projectId() {\n      this.reset();\n      await this.loadData();\n    },\n  },\n\n  computed: {\n    canStop() {\n      return ['running', 'stopping', 'waiting', 'starting', 'waiting_confirmation', 'confirmed'].includes(this.item.status);\n    },\n  },\n\n  async created() {\n    socket.addListener((data) => this.onWebsocketDataReceived(data));\n    await this.loadData();\n  },\n\n  methods: {\n    async confirmTask() {\n      await axios({\n        method: 'post',\n        url: `/api/project/${this.projectId}/tasks/${this.itemId}/confirm`,\n        responseType: 'json',\n        data: {},\n      });\n    },\n\n    async stopTask(force) {\n      await axios({\n        method: 'post',\n        url: `/api/project/${this.projectId}/tasks/${this.itemId}/stop`,\n        responseType: 'json',\n        data: {\n          force,\n        },\n      });\n    },\n\n    reset() {\n      this.item = {};\n      this.output = [];\n      this.user = {};\n    },\n\n    onWebsocketDataReceived(data) {\n      if (data.project_id !== this.projectId || data.task_id !== this.itemId) {\n        return;\n      }\n\n      switch (data.type) {\n        case 'update':\n          Object.assign(this.item, {\n            ...data,\n            type: undefined,\n          });\n          break;\n        case 'log':\n          this.output.push(data);\n          setTimeout(() => {\n            this.$refs.output.scrollTop = this.$refs.output.scrollHeight;\n          }, 200);\n          break;\n        default:\n          break;\n      }\n    },\n\n    async loadData() {\n      this.item = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/tasks/${this.itemId}`,\n        responseType: 'json',\n      })).data;\n\n      this.output = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/tasks/${this.itemId}/output`,\n        responseType: 'json',\n      })).data;\n\n      this.user = (await axios({\n        method: 'get',\n        url: `/api/users/${this.item.user_id}`,\n        responseType: 'json',\n      })).data;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}