{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\nexport default {\n  mixins: [ItemFormBase],\n  components: {},\n  data() {\n    return {\n      cmOptions: {\n        tabSize: 2,\n        mode: 'text/x-ini',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false\n      },\n      keys: null,\n      inventoryTypes: [{\n        id: 'static',\n        name: 'Static'\n      }, {\n        id: 'static-yaml',\n        name: 'Static YAML'\n      }, {\n        id: 'file',\n        name: 'File'\n      }]\n    };\n  },\n  methods: {\n    async getNoneKey() {\n      return (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/keys`,\n        responseType: 'json'\n      })).data.filter(key => key.type === 'none')[0];\n    },\n    async beforeSave() {\n      let noneKey = await this.getNoneKey();\n      if (!noneKey) {\n        await axios({\n          method: 'post',\n          url: `/api/project/${this.projectId}/keys`,\n          responseType: 'json',\n          data: {\n            name: 'None',\n            type: 'none',\n            project_id: this.projectId\n          }\n        });\n        noneKey = await this.getNoneKey();\n      }\n      this.item.type = 'terraform-workspace';\n      this.item.ssh_key_id = noneKey.id;\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/inventory`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/inventory/${this.itemId}`;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;AAEA;AACA;AAEA;EACAA;EAEAC,aACA;EAEAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;QACAC;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;IACA;EACA;EAEAC;IACA;MACA;QACAC;QACAC;QACAC;MACA;IACA;IAEA;MACA;MAEA;QACA;UACAF;UACAC;UACAC;UACAf;YACAW;YACAK;YACAC;UACA;QACA;QACAC;MACA;MAEA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["mixins","components","data","cmOptions","tabSize","mode","lineNumbers","line","lint","indentWithTabs","keys","inventoryTypes","id","name","methods","method","url","responseType","type","project_id","noneKey","getItemsUrl","getSingleItemUrl"],"sourceRoot":"src/components","sources":["TerraformInventoryForm.vue"],"sourcesContent":["<template>\n  <v-form\n    ref=\"form\"\n    lazy-validation\n    v-model=\"formValid\"\n    v-if=\"item != null\"\n  >\n    <v-alert\n      :value=\"formError\"\n      color=\"error\"\n      class=\"pb-2\"\n    >{{ formError }}</v-alert>\n\n    <v-text-field\n      v-model=\"item.name\"\n      label=\"Display name\"\n      :rules=\"[v => !!v || $t('name_required')]\"\n      required\n      :disabled=\"formSaving\"\n    ></v-text-field>\n\n    <v-text-field\n      v-model=\"item.inventory\"\n      label=\"Workspace name\"\n      :rules=\"[v => !!v || $t('path_required')]\"\n      required\n      :disabled=\"formSaving\"\n    ></v-text-field>\n\n    <v-alert\n        dense\n        text\n        class=\"mt-4\"\n        type=\"info\"\n        v-if=\"item.type === 'static'\"\n    >\n      {{ $t('staticInventoryExample') }}\n      <pre style=\"font-size: 14px;\">[website]\n172.18.8.40\n172.18.8.41</pre>\n    </v-alert>\n  </v-form>\n</template>\n<style>\n</style>\n<script>\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\n\nexport default {\n  mixins: [ItemFormBase],\n\n  components: {\n  },\n\n  data() {\n    return {\n      cmOptions: {\n        tabSize: 2,\n        mode: 'text/x-ini',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false,\n      },\n      keys: null,\n      inventoryTypes: [{\n        id: 'static',\n        name: 'Static',\n      }, {\n        id: 'static-yaml',\n        name: 'Static YAML',\n      }, {\n        id: 'file',\n        name: 'File',\n      }],\n    };\n  },\n\n  methods: {\n    async getNoneKey() {\n      return (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/keys`,\n        responseType: 'json',\n      })).data.filter((key) => key.type === 'none')[0];\n    },\n\n    async beforeSave() {\n      let noneKey = await this.getNoneKey();\n\n      if (!noneKey) {\n        await axios({\n          method: 'post',\n          url: `/api/project/${this.projectId}/keys`,\n          responseType: 'json',\n          data: {\n            name: 'None',\n            type: 'none',\n            project_id: this.projectId,\n          },\n        });\n        noneKey = await this.getNoneKey();\n      }\n\n      this.item.type = 'terraform-workspace';\n      this.item.ssh_key_id = noneKey.id;\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/inventory`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/inventory/${this.itemId}`;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}