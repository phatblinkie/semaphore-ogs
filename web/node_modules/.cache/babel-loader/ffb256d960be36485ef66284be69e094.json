{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport ItemFormBase from '@/components/ItemFormBase';\nexport default {\n  mixins: [ItemFormBase],\n  data() {\n    return {\n      helpDialog: null,\n      helpKey: null,\n      keys: null,\n      inventoryTypes: [{\n        id: 'static',\n        name: 'Static'\n      }, {\n        id: 'static-yaml',\n        name: 'Static YAML'\n      }, {\n        id: 'file',\n        name: 'File'\n      }]\n    };\n  },\n  async created() {\n    this.keys = (await axios({\n      keys: 'get',\n      url: `/api/project/${this.projectId}/keys`,\n      responseType: 'json'\n    })).data;\n  },\n  computed: {\n    type() {\n      return this.getTypeOfUrl(this.item.git_url);\n    }\n  },\n  methods: {\n    getTypeOfUrl(url) {\n      if (url == null || url === '') {\n        return null;\n      }\n      if (url.startsWith('/')) {\n        return 'local';\n      }\n      const m = url.match(/^(\\w+):\\/\\//);\n      if (m == null) {\n        return 'ssh';\n      }\n      if (!['git', 'file', 'ssh', 'http', 'https'].includes(m[1])) {\n        return null;\n      }\n      return m[1];\n    },\n    setType(type) {\n      let url;\n      const m = this.item.git_url.match(/^\\w+:\\/\\/(.*)$/);\n      if (m != null) {\n        url = m[1];\n      } else {\n        url = this.item.git_url;\n      }\n      if (type === 'local') {\n        url = url.startsWith('/') ? url : `/${url}`;\n      } else {\n        url = `${type}://${url}`;\n      }\n      this.item.git_url = url;\n    },\n    showHelpDialog(key) {\n      this.helpKey = key;\n      this.helpDialog = true;\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/repositories`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/repositories/${this.itemId}`;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;MAEAC;MACAC;QACAC;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;IACA;EACA;EACA;IACA;MACAH;MACAI;MACAC;IACA;EACA;EACAC;IACAC;MACA;IACA;EACA;EAEAC;IACAC;MACA;QACA;MACA;MAEA;QACA;MACA;MAEA;MAEA;QACA;MACA;MAEA;QACA;MACA;MAEA;IACA;IAEAC;MACA;MAEA;MACA;QACAN;MACA;QACAA;MACA;MAEA;QACAA;MACA;QACAA;MACA;MAEA;IACA;IAEAO;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;EACA;AACA","names":["mixins","data","helpDialog","helpKey","keys","inventoryTypes","id","name","url","responseType","computed","type","methods","getTypeOfUrl","setType","showHelpDialog","getItemsUrl","getSingleItemUrl"],"sourceRoot":"src/components","sources":["RepositoryForm.vue"],"sourcesContent":["<template>\n  <v-form\n      ref=\"form\"\n      lazy-validation\n      v-model=\"formValid\"\n      v-if=\"item != null && keys != null\"\n  >\n    <v-alert\n        :value=\"formError\"\n        color=\"error\"\n        class=\"pb-2\"\n    >{{ formError }}\n    </v-alert>\n\n    <v-text-field\n        v-model=\"item.name\"\n        :label=\"$t('name')\"\n        :rules=\"[v => !!v || $t('name_required')]\"\n        required\n        :disabled=\"formSaving\"\n    ></v-text-field>\n\n    <v-text-field\n        v-model.trim=\"item.git_url\"\n        :label=\"$t('urlOrPath')\"\n        :rules=\"[\n          v => !!v || $t('repository_required'),\n          v => getTypeOfUrl(v) != null || $t('incorrectUrl'),\n        ]\"\n        required\n        :disabled=\"formSaving\"\n        :hide-details=\"true\"\n    ></v-text-field>\n\n    <div class=\"mt-1 mb-4\">\n      <span class=\"caption\">git:</span>\n      <v-chip\n        v-for=\"x in ['ssh', 'http', 'https', 'file', 'git']\"\n        x-small\n        class=\"ml-1\"\n        :color=\"type ===x ? 'primary' : ''\"\n        @click=\"setType(x)\"\n        style=\"font-weight: bold;\"\n        :key=\"x\"\n      >{{ x }}</v-chip>\n      <span class=\"caption ml-3\">local:</span>\n      <v-chip\n        x-small\n        class=\"ml-1\"\n        :color=\"type ==='local' ? 'primary' : ''\"\n        @click=\"setType('local')\"\n        style=\"font-weight: bold;\"\n      >\n        {{ $t('absPath') }}\n      </v-chip>\n    </div>\n\n    <v-text-field\n      v-model.trim=\"item.git_branch\"\n      :label=\"$t('branch')\"\n      :rules=\"[v => (!!v || type === 'local') || $t('branch_required')]\"\n      required\n      :disabled=\"formSaving || type === 'local'\"\n    ></v-text-field>\n\n    <v-select\n        v-model=\"item.ssh_key_id\"\n        :label=\"$t('accessKey')\"\n        :items=\"keys\"\n        item-value=\"id\"\n        item-text=\"name\"\n        :rules=\"[v => !!v || $t('key_required')]\"\n        required\n        :disabled=\"formSaving\"\n    >\n      <template v-slot:append-outer>\n        <v-tooltip left color=\"black\" content-class=\"opacity1\">\n          <template v-slot:activator=\"{ on, attrs }\">\n            <v-icon\n              v-bind=\"attrs\"\n              v-on=\"on\"\n            >\n              mdi-help-circle\n            </v-icon>\n          </template>\n          <div class=\"py-4\">\n            <p>{{ $t('credentialsToAccessToTheGitRepositoryItShouldBe') }}</p>\n            <ul>\n              <li><code>{{ $t('ssh') }}</code> {{ $t('ifYouUseGitOrSshUrl') }}</li>\n              <li><code>{{ $t('none') }}</code> {{ $t('ifYouUseHttpsOrFileUrl') }}</li>\n            </ul>\n          </div>\n        </v-tooltip>\n      </template>\n    </v-select>\n  </v-form>\n</template>\n<script>\nimport axios from 'axios';\nimport ItemFormBase from '@/components/ItemFormBase';\n\nexport default {\n  mixins: [ItemFormBase],\n  data() {\n    return {\n      helpDialog: null,\n      helpKey: null,\n\n      keys: null,\n      inventoryTypes: [{\n        id: 'static',\n        name: 'Static',\n      }, {\n        id: 'static-yaml',\n        name: 'Static YAML',\n      }, {\n        id: 'file',\n        name: 'File',\n      }],\n    };\n  },\n  async created() {\n    this.keys = (await axios({\n      keys: 'get',\n      url: `/api/project/${this.projectId}/keys`,\n      responseType: 'json',\n    })).data;\n  },\n  computed: {\n    type() {\n      return this.getTypeOfUrl(this.item.git_url);\n    },\n  },\n\n  methods: {\n    getTypeOfUrl(url) {\n      if (url == null || url === '') {\n        return null;\n      }\n\n      if (url.startsWith('/')) {\n        return 'local';\n      }\n\n      const m = url.match(/^(\\w+):\\/\\//);\n\n      if (m == null) {\n        return 'ssh';\n      }\n\n      if (!['git', 'file', 'ssh', 'http', 'https'].includes(m[1])) {\n        return null;\n      }\n\n      return m[1];\n    },\n\n    setType(type) {\n      let url;\n\n      const m = this.item.git_url.match(/^\\w+:\\/\\/(.*)$/);\n      if (m != null) {\n        url = m[1];\n      } else {\n        url = this.item.git_url;\n      }\n\n      if (type === 'local') {\n        url = url.startsWith('/') ? url : `/${url}`;\n      } else {\n        url = `${type}://${url}`;\n      }\n\n      this.item.git_url = url;\n    },\n\n    showHelpDialog(key) {\n      this.helpKey = key;\n      this.helpDialog = true;\n    },\n\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/repositories`;\n    },\n\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/repositories/${this.itemId}`;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}