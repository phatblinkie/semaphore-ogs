{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport axios from 'axios';\nimport ItemFormBase from '@/components/ItemFormBase';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/vue/vue.js';\nimport 'codemirror/addon/lint/json-lint.js';\nimport 'codemirror/addon/display/placeholder.js';\nimport ArgsPicker from '@/components/ArgsPicker.vue';\nimport { TEMPLATE_TYPE_ICONS, TEMPLATE_TYPE_TITLES } from '../lib/constants';\nimport SurveyVars from './SurveyVars';\nexport default {\n  mixins: [ItemFormBase],\n  components: {\n    ArgsPicker,\n    SurveyVars\n  },\n  props: {\n    sourceItemId: Number,\n    fields: Object,\n    app: String\n  },\n  data() {\n    return {\n      cronFormats: [{\n        cron: '* * * * *',\n        title: '1 minute'\n      }, {\n        cron: '*/5 * * * *',\n        title: '5 minutes'\n      }, {\n        cron: '*/10 * * * *',\n        title: '10 minutes'\n      }, {\n        cron: '@hourly',\n        title: '1 hour'\n      }, {\n        cron: '@daily',\n        title: '24 hours'\n      }],\n      itemTypeIndex: 0,\n      TEMPLATE_TYPE_ICONS,\n      TEMPLATE_TYPE_TITLES,\n      cmOptions: {\n        tabSize: 2,\n        mode: 'application/json',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false\n      },\n      item: null,\n      keys: null,\n      inventory: null,\n      repositories: null,\n      environment: null,\n      views: null,\n      schedules: null,\n      buildTemplates: null,\n      cronFormat: '* * * * *',\n      cronRepositoryId: null,\n      cronVisible: false,\n      helpDialog: null,\n      helpKey: null,\n      advancedOptions: false,\n      args: []\n    };\n  },\n  watch: {\n    needReset(val) {\n      if (val) {\n        if (this.item != null) {\n          this.item.template_id = this.templateId;\n        }\n      }\n    },\n    sourceItemId(val) {\n      this.item.template_id = val;\n    },\n    itemTypeIndex(val) {\n      this.item.type = Object.keys(TEMPLATE_TYPE_ICONS)[val];\n    }\n  },\n  computed: {\n    isLoaded() {\n      if (this.isNew && this.sourceItemId == null) {\n        return true;\n      }\n      return this.keys != null && this.repositories != null && this.inventory != null && this.environment != null && this.item != null && this.schedules != null && this.views != null;\n    },\n    loginPasswordKeys() {\n      if (this.keys == null) {\n        return null;\n      }\n      return this.keys.filter(key => key.type === 'login_password');\n    }\n  },\n  methods: {\n    setArgs(args) {\n      this.args = args;\n    },\n    fieldLabel(f) {\n      return this.$t((this.fields[f] || {\n        label: f\n      }).label);\n    },\n    needField(f) {\n      return this.fields[f] != null;\n    },\n    isFieldRequired(f) {\n      return this.fields[f] != null && !this.fields[f].optional;\n    },\n    setSurveyVars(v) {\n      this.item.survey_vars = v;\n    },\n    showHelpDialog(key) {\n      this.helpKey = key;\n      this.helpDialog = true;\n    },\n    async afterLoadData() {\n      if (this.sourceItemId) {\n        this.item = (await axios({\n          keys: 'get',\n          url: `/api/project/${this.projectId}/templates/${this.sourceItemId}`,\n          responseType: 'json'\n        })).data;\n        this.item.id = null;\n      }\n      this.advancedOptions = this.item.arguments != null || this.item.allow_override_args_in_task;\n      this.keys = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/keys`,\n        responseType: 'json'\n      })).data;\n      this.repositories = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/repositories`,\n        responseType: 'json'\n      })).data;\n      this.inventory = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/inventory`,\n        responseType: 'json'\n      })).data;\n      this.environment = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/environment`,\n        responseType: 'json'\n      })).data;\n      const template = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates`,\n        responseType: 'json'\n      })).data;\n      const builds = [];\n      const deploys = [];\n      template.forEach(t => {\n        switch (t.type) {\n          case 'build':\n            if (builds.length === 0) {\n              builds.push({\n                header: 'Build Templates'\n              });\n            }\n            builds.push(t);\n            break;\n          case 'deploy':\n            if (deploys.length === 0) {\n              deploys.push({\n                header: 'Deploy Templates'\n              });\n            }\n            deploys.push(t);\n            break;\n          default:\n            break;\n        }\n        this.args = JSON.parse(this.item.arguments || '[]');\n      });\n      this.buildTemplates = builds;\n      if (this.buildTemplates.length > 0 && deploys.length > 0) {\n        this.buildTemplates.push({\n          divider: true\n        });\n      }\n      this.buildTemplates.push(...deploys);\n      this.schedules = this.isNew ? [] : (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.itemId}/schedules`,\n        responseType: 'json'\n      })).data;\n      this.views = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/views`,\n        responseType: 'json'\n      })).data;\n      if (this.schedules.length > 0) {\n        const schedule = this.schedules.find(s => s.repository_id != null);\n        if (schedule != null) {\n          this.cronFormat = schedule.cron_format;\n          this.cronRepositoryId = schedule.repository_id;\n          this.cronVisible = this.cronRepositoryId != null;\n        }\n      }\n      this.itemTypeIndex = Object.keys(TEMPLATE_TYPE_ICONS).indexOf(this.item.type);\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/templates`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/templates/${this.itemId}`;\n    },\n    async beforeSave() {\n      if (this.cronFormat == null || this.cronFormat === '') {\n        return;\n      }\n      await axios({\n        method: 'post',\n        url: `/api/project/${this.projectId}/schedules/validate`,\n        responseType: 'json',\n        data: {\n          cron_format: this.cronFormat\n        }\n      });\n      this.item.app = this.app;\n      this.item.arguments = JSON.stringify(this.args);\n    },\n    async afterSave(newItem) {\n      if (newItem || this.schedules.length === 0) {\n        if (this.cronFormat != null && this.cronFormat !== '' && this.cronVisible) {\n          // new schedule\n          await axios({\n            method: 'post',\n            url: `/api/project/${this.projectId}/schedules`,\n            responseType: 'json',\n            data: {\n              project_id: this.projectId,\n              template_id: newItem ? newItem.id : this.itemId,\n              cron_format: this.cronFormat,\n              repository_id: this.cronRepositoryId,\n              active: true\n            }\n          });\n        }\n      } else if (this.schedules.length > 1) {\n        // do nothing\n      } else if (this.cronFormat == null || this.cronFormat === '' || !this.cronVisible) {\n        // drop schedule\n        await axios({\n          method: 'delete',\n          url: `/api/project/${this.projectId}/schedules/${this.schedules[0].id}`,\n          responseType: 'json'\n        });\n      } else {\n        // update schedule\n        await axios({\n          method: 'put',\n          url: `/api/project/${this.projectId}/schedules/${this.schedules[0].id}`,\n          responseType: 'json',\n          data: {\n            id: this.schedules[0].id,\n            project_id: this.projectId,\n            template_id: this.itemId,\n            cron_format: this.cronFormat,\n            repository_id: this.cronRepositoryId\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiTA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;EAEAC;IACAC;IACAC;EACA;EAEAC;IACAC;IACAC;IACAC;EACA;EAEAC;IACA;MACAC;QACAC;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MAEAC;MACAC;MAEAC;MACAC;IACA;EACA;EAEAC;IACAC;MACA;QACA;UACA;QACA;MACA;IACA;IAEAjC;MACA;IACA;IAEAO;MACA;IACA;EACA;EAEA2B;IACAC;MACA;QACA;MACA;MAEA,4BACA,6BACA,0BACA,4BACA,qBACA,0BACA;IACA;IAEAC;MACA;QACA;MACA;MACA;IACA;EACA;EAEAC;IACAC;MACA;IACA;IAEAC;MACA;QAAAC;MAAA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;IACA;IAEA;MACA;QACA;UACA1B;UACA2B;UACAC;QACA;QACA;MACA;MAEA;MAEA;QACA5B;QACA2B;QACAC;MACA;MAEA;QACA5B;QACA2B;QACAC;MACA;MAEA;QACA5B;QACA2B;QACAC;MACA;MAEA;QACA5B;QACA2B;QACAC;MACA;MAEA;QACA5B;QACA2B;QACAC;MACA;MACA;MACA;MACAC;QACA;UACA;YACA;cACAC;gBAAAC;cAAA;YACA;YACAD;YACA;UACA;YACA;cACAE;gBAAAD;cAAA;YACA;YACAC;YACA;UACA;YACA;QACA;QAEA;MACA;MAEA;MACA;QACA;UAAAC;QAAA;MACA;MACA;MAEA;QACAjC;QACA2B;QACAC;MACA;MAEA;QACA5B;QACA2B;QACAC;MACA;MAEA;QACA;QACA;UACA;UACA;UACA;QACA;MACA;MAEA;IACA;IAEAM;MACA;IACA;IAEAC;MACA;IACA;IAEA;MACA;QACA;MACA;MAEA;QACAC;QACAT;QACAC;QACA3C;UACAoD;QACA;MACA;MAEA;MAEA;IACA;IAEA;MACA;QACA;UACA;UACA;YACAD;YACAT;YACAC;YACA3C;cACAqD;cACAC;cACAF;cACAG;cACAC;YACA;UACA;QACA;MACA;QACA;MAAA,CACA;QACA;QACA;UACAL;UACAT;UACAC;QACA;MACA;QACA;QACA;UACAQ;UACAT;UACAC;UACA3C;YACAyD;YACAJ;YACAC;YACAF;YACAG;UACA;QACA;MACA;IACA;EACA;AACA","names":["mixins","components","ArgsPicker","SurveyVars","props","sourceItemId","fields","app","data","cronFormats","cron","title","itemTypeIndex","TEMPLATE_TYPE_ICONS","TEMPLATE_TYPE_TITLES","cmOptions","tabSize","mode","lineNumbers","line","lint","indentWithTabs","item","keys","inventory","repositories","environment","views","schedules","buildTemplates","cronFormat","cronRepositoryId","cronVisible","helpDialog","helpKey","advancedOptions","args","watch","needReset","computed","isLoaded","loginPasswordKeys","methods","setArgs","fieldLabel","label","needField","isFieldRequired","setSurveyVars","showHelpDialog","url","responseType","template","builds","header","deploys","divider","getItemsUrl","getSingleItemUrl","method","cron_format","project_id","template_id","repository_id","active","id"],"sourceRoot":"src/components","sources":["TemplateForm.vue"],"sourcesContent":["<template>\n  <div v-if=\"!isLoaded\">\n    <v-row>\n      <v-col>\n        <v-skeleton-loader\n            type=\"table-heading, list-item-two-line, image, table-tfoot\"\n        ></v-skeleton-loader>\n      </v-col>\n      <v-col>\n        <v-skeleton-loader\n            type=\"table-heading, list-item-two-line, image, table-tfoot\"\n        ></v-skeleton-loader>\n      </v-col>\n    </v-row>\n  </div>\n  <v-form\n    v-else\n    ref=\"form\"\n    lazy-validation\n    v-model=\"formValid\"\n  >\n    <v-dialog\n      v-model=\"helpDialog\"\n      hide-overlay\n      width=\"300\"\n    >\n      <v-alert\n        border=\"top\"\n        colored-border\n        type=\"info\"\n        elevation=\"2\"\n        class=\"mb-0 pb-0\"\n      >\n        <div v-if=\"helpKey === 'build_version'\">\n          <p>\n            {{ $t('definesStartVersionOfYourArtifactEachRunIncrements') }}\n          </p>\n          <p>\n            {{ $t('forMoreInformationAboutBuildingSeeThe') }}\n            <a href=\"https://docs.ansible-semaphore.com/user-guide/task-templates#build\"\n               target=\"_blank\"\n            >{{ $t('taskTemplateReference') }}</a>.\n          </p>\n        </div>\n        <div v-else-if=\"helpKey === 'build'\">\n          <p>\n            {{ $t('definesWhatArtifactShouldBeDeployedWhenTheTaskRun') }}\n          </p>\n          <p>\n            {{ $t('forMoreInformationAboutDeployingSeeThe') }}\n            <a href=\"https://docs.ansible-semaphore.com/user-guide/task-templates#build\"\n               target=\"_blank\"\n            >{{ $t('taskTemplateReference2') }}</a>.\n          </p>\n        </div>\n        <div v-if=\"helpKey === 'cron'\">\n          <p>{{ $t('definesAutorunSchedule') }}</p>\n          <p>\n            {{ $t('forMoreInformationAboutCronSeeThe') }}\n            <a href=\"https://pkg.go.dev/github.com/robfig/cron/v3#hdr-CRON_Expression_Format\"\n               target=\"_blank\"\n            >{{ $t('cronExpressionFormatReference') }}</a>.\n          </p>\n        </div>\n      </v-alert>\n    </v-dialog>\n\n    <v-alert\n      :value=\"formError\"\n      color=\"error\"\n      class=\"pb-2\"\n    >{{ formError }}\n    </v-alert>\n\n    <v-row>\n      <v-col cols=\"12\" md=\"6\" class=\"pb-0\">\n        <v-card class=\"mb-6\" :color=\"$vuetify.theme.dark ? '#212121' : 'white'\">\n          <v-tabs\n            fixed-tabs\n            v-model=\"itemTypeIndex\"\n          >\n            <v-tab\n              style=\"padding: 0\"\n              v-for=\"(key) in Object.keys(TEMPLATE_TYPE_ICONS)\"\n              :key=\"key\"\n            >\n              <v-icon small class=\"mr-2\">{{ TEMPLATE_TYPE_ICONS[key] }}</v-icon>\n              {{ $t(TEMPLATE_TYPE_TITLES[key]) }}\n            </v-tab>\n          </v-tabs>\n\n          <div class=\"ml-4 mr-4 mt-6\" v-if=\"item.type\">\n            <v-text-field\n              v-if=\"item.type === 'build'\"\n              v-model=\"item.start_version\"\n              :label=\"$t('startVersion')\"\n              :rules=\"[v => !!v || $t('start_version_required')]\"\n              required\n              :disabled=\"formSaving\"\n              :placeholder=\"$t('example000')\"\n              append-outer-icon=\"mdi-help-circle\"\n              @click:append-outer=\"showHelpDialog('build_version')\"\n            ></v-text-field>\n\n            <v-autocomplete\n              v-if=\"item.type === 'deploy'\"\n              v-model=\"item.build_template_id\"\n              :label=\"$t('buildTemplate')\"\n              :items=\"buildTemplates\"\n              item-value=\"id\"\n              item-text=\"name\"\n              :rules=\"[v => !!v || $t('build_template_required')]\"\n              required\n              :disabled=\"formSaving\"\n              append-outer-icon=\"mdi-help-circle\"\n              @click:append-outer=\"showHelpDialog('build')\"\n            ></v-autocomplete>\n\n            <v-checkbox\n              v-if=\"item.type === 'deploy'\"\n              class=\"mt-0\"\n              :label=\"$t('autorun')\"\n              v-model=\"item.autorun\"\n            />\n          </div>\n\n        </v-card>\n\n        <v-text-field\n          v-model=\"item.name\"\n          :label=\"$t('name2')\"\n          :rules=\"[v => !!v || $t('name_required')]\"\n          outlined\n          dense\n          required\n          :disabled=\"formSaving\"\n        ></v-text-field>\n\n        <v-textarea\n          v-model=\"item.description\"\n          :label=\"$t('description')\"\n          :disabled=\"formSaving\"\n          rows=\"1\"\n          :auto-grow=\"true\"\n          outlined\n          dense\n        ></v-textarea>\n\n        <v-text-field\n          v-model=\"item.playbook\"\n          :label=\"fieldLabel('playbook')\"\n          :rules=\"isFieldRequired('playbook') ? [v => !!v || $t('playbook_filename_required')] : []\"\n          outlined\n          dense\n          :required=\"isFieldRequired('playbook')\"\n          :disabled=\"formSaving\"\n          :placeholder=\"$t('exampleSiteyml')\"\n          v-if=\"needField('playbook')\"\n        ></v-text-field>\n\n        <v-select\n          v-model=\"item.inventory_id\"\n          :label=\"fieldLabel('inventory')\"\n          :items=\"inventory\"\n          item-value=\"id\"\n          item-text=\"name\"\n          outlined\n          dense\n          required\n          :disabled=\"formSaving\"\n          v-if=\"needField('inventory')\"\n        ></v-select>\n\n        <v-select\n          v-model=\"item.repository_id\"\n          :label=\"fieldLabel('repository') + ' *'\"\n          :items=\"repositories\"\n          item-value=\"id\"\n          item-text=\"name\"\n          :rules=\"isFieldRequired('repository') ? [v => !!v || $t('repository_required')] : []\"\n          outlined\n          dense\n          :required=\"isFieldRequired('repository')\"\n          :disabled=\"formSaving\"\n          v-if=\"needField('repository')\"\n        ></v-select>\n\n        <v-select\n          v-model=\"item.environment_id\"\n          :label=\"fieldLabel('environment')\"\n          :items=\"environment\"\n          item-value=\"id\"\n          item-text=\"name\"\n          :rules=\"isFieldRequired('environment') ? [v => !!v || $t('environment_required')] : []\"\n          outlined\n          dense\n          :required=\"isFieldRequired('environment')\"\n          :disabled=\"formSaving\"\n          v-if=\"needField('environment')\"\n        ></v-select>\n\n        <v-select\n          v-if=\"itemTypeIndex === 0 && needField('vault')\"\n          v-model=\"item.vault_key_id\"\n          :label=\"fieldLabel('vault')\"\n          clearable\n          :items=\"loginPasswordKeys\"\n          item-value=\"id\"\n          item-text=\"name\"\n          :disabled=\"formSaving\"\n          outlined\n          dense\n        ></v-select>\n      </v-col>\n\n      <v-col cols=\"12\" md=\"6\" class=\"pb-0\">\n\n        <v-select\n          v-if=\"itemTypeIndex > 0 && needField('vault')\"\n          v-model=\"item.vault_key_id\"\n          :label=\"fieldLabel('vault')\"\n          clearable\n          :items=\"loginPasswordKeys\"\n          item-value=\"id\"\n          item-text=\"name\"\n          :disabled=\"formSaving\"\n          outlined\n          dense\n        ></v-select>\n\n        <SurveyVars style=\"margin-top: -10px;\" :vars=\"item.survey_vars\" @change=\"setSurveyVars\"/>\n\n        <v-select\n          v-model=\"item.view_id\"\n          :label=\"$t('view')\"\n          clearable\n          :items=\"views\"\n          item-value=\"id\"\n          item-text=\"title\"\n          :disabled=\"formSaving\"\n          outlined\n          dense\n        ></v-select>\n\n        <v-checkbox\n          class=\"mt-0\"\n          :label=\"$t('iWantToRunATaskByTheCronOnlyForForNewCommitsOfSome')\"\n          v-model=\"cronVisible\"\n        />\n\n        <v-select\n          v-if=\"cronVisible\"\n          v-model=\"cronRepositoryId\"\n          :label=\"$t('repository2')\"\n          :placeholder=\"$t('cronChecksNewCommitBeforeRun')\"\n          :rules=\"[v => !!v || $t('repository_required')]\"\n          :items=\"repositories\"\n          item-value=\"id\"\n          item-text=\"name\"\n          clearable\n          :disabled=\"formSaving\"\n          outlined\n          dense\n        ></v-select>\n\n        <v-select\n          v-if=\"cronVisible\"\n          v-model=\"cronFormat\"\n          :label=\"$t('Check interval')\"\n          :hint=\"$t('New commit check interval')\"\n          item-value=\"cron\"\n          item-text=\"title\"\n          :items=\"cronFormats\"\n          :disabled=\"formSaving\"\n          outlined\n          dense\n        />\n\n        <v-checkbox\n          class=\"mt-0\"\n          :label=\"$t('suppressSuccessAlerts')\"\n          v-model=\"item.suppress_success_alerts\"\n        />\n\n        <ArgsPicker\n          :vars=\"args\"\n          @change=\"setArgs\"\n        />\n\n        <v-checkbox\n          class=\"mt-0\"\n          :label=\"$t('allowCliArgsInTask')\"\n          v-model=\"item.allow_override_args_in_task\"\n        />\n\n      </v-col>\n    </v-row>\n  </v-form>\n</template>\n<style lang=\"scss\">\n.CodeMirror-placeholder {\n  color: #a4a4a4 !important;\n}\n</style>\n<script>\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport axios from 'axios';\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/vue/vue.js';\nimport 'codemirror/addon/lint/json-lint.js';\nimport 'codemirror/addon/display/placeholder.js';\nimport ArgsPicker from '@/components/ArgsPicker.vue';\nimport { TEMPLATE_TYPE_ICONS, TEMPLATE_TYPE_TITLES } from '../lib/constants';\nimport SurveyVars from './SurveyVars';\n\nexport default {\n  mixins: [ItemFormBase],\n\n  components: {\n    ArgsPicker,\n    SurveyVars,\n  },\n\n  props: {\n    sourceItemId: Number,\n    fields: Object,\n    app: String,\n  },\n\n  data() {\n    return {\n      cronFormats: [{\n        cron: '* * * * *',\n        title: '1 minute',\n      }, {\n        cron: '*/5 * * * *',\n        title: '5 minutes',\n      }, {\n        cron: '*/10 * * * *',\n        title: '10 minutes',\n      }, {\n        cron: '@hourly',\n        title: '1 hour',\n      }, {\n        cron: '@daily',\n        title: '24 hours',\n      }],\n      itemTypeIndex: 0,\n      TEMPLATE_TYPE_ICONS,\n      TEMPLATE_TYPE_TITLES,\n      cmOptions: {\n        tabSize: 2,\n        mode: 'application/json',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false,\n      },\n      item: null,\n      keys: null,\n      inventory: null,\n      repositories: null,\n      environment: null,\n      views: null,\n      schedules: null,\n      buildTemplates: null,\n      cronFormat: '* * * * *',\n      cronRepositoryId: null,\n      cronVisible: false,\n\n      helpDialog: null,\n      helpKey: null,\n\n      advancedOptions: false,\n      args: [],\n    };\n  },\n\n  watch: {\n    needReset(val) {\n      if (val) {\n        if (this.item != null) {\n          this.item.template_id = this.templateId;\n        }\n      }\n    },\n\n    sourceItemId(val) {\n      this.item.template_id = val;\n    },\n\n    itemTypeIndex(val) {\n      this.item.type = Object.keys(TEMPLATE_TYPE_ICONS)[val];\n    },\n  },\n\n  computed: {\n    isLoaded() {\n      if (this.isNew && this.sourceItemId == null) {\n        return true;\n      }\n\n      return this.keys != null\n        && this.repositories != null\n        && this.inventory != null\n        && this.environment != null\n        && this.item != null\n        && this.schedules != null\n        && this.views != null;\n    },\n\n    loginPasswordKeys() {\n      if (this.keys == null) {\n        return null;\n      }\n      return this.keys.filter((key) => key.type === 'login_password');\n    },\n  },\n\n  methods: {\n    setArgs(args) {\n      this.args = args;\n    },\n\n    fieldLabel(f) {\n      return this.$t((this.fields[f] || { label: f }).label);\n    },\n\n    needField(f) {\n      return this.fields[f] != null;\n    },\n\n    isFieldRequired(f) {\n      return this.fields[f] != null && !this.fields[f].optional;\n    },\n\n    setSurveyVars(v) {\n      this.item.survey_vars = v;\n    },\n\n    showHelpDialog(key) {\n      this.helpKey = key;\n      this.helpDialog = true;\n    },\n\n    async afterLoadData() {\n      if (this.sourceItemId) {\n        this.item = (await axios({\n          keys: 'get',\n          url: `/api/project/${this.projectId}/templates/${this.sourceItemId}`,\n          responseType: 'json',\n        })).data;\n        this.item.id = null;\n      }\n\n      this.advancedOptions = this.item.arguments != null || this.item.allow_override_args_in_task;\n\n      this.keys = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/keys`,\n        responseType: 'json',\n      })).data;\n\n      this.repositories = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/repositories`,\n        responseType: 'json',\n      })).data;\n\n      this.inventory = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/inventory`,\n        responseType: 'json',\n      })).data;\n\n      this.environment = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/environment`,\n        responseType: 'json',\n      })).data;\n\n      const template = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates`,\n        responseType: 'json',\n      })).data;\n      const builds = [];\n      const deploys = [];\n      template.forEach((t) => {\n        switch (t.type) {\n          case 'build':\n            if (builds.length === 0) {\n              builds.push({ header: 'Build Templates' });\n            }\n            builds.push(t);\n            break;\n          case 'deploy':\n            if (deploys.length === 0) {\n              deploys.push({ header: 'Deploy Templates' });\n            }\n            deploys.push(t);\n            break;\n          default:\n            break;\n        }\n\n        this.args = JSON.parse(this.item.arguments || '[]');\n      });\n\n      this.buildTemplates = builds;\n      if (this.buildTemplates.length > 0 && deploys.length > 0) {\n        this.buildTemplates.push({ divider: true });\n      }\n      this.buildTemplates.push(...deploys);\n\n      this.schedules = this.isNew ? [] : (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.itemId}/schedules`,\n        responseType: 'json',\n      })).data;\n\n      this.views = (await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/views`,\n        responseType: 'json',\n      })).data;\n\n      if (this.schedules.length > 0) {\n        const schedule = this.schedules.find((s) => s.repository_id != null);\n        if (schedule != null) {\n          this.cronFormat = schedule.cron_format;\n          this.cronRepositoryId = schedule.repository_id;\n          this.cronVisible = this.cronRepositoryId != null;\n        }\n      }\n\n      this.itemTypeIndex = Object.keys(TEMPLATE_TYPE_ICONS).indexOf(this.item.type);\n    },\n\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/templates`;\n    },\n\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/templates/${this.itemId}`;\n    },\n\n    async beforeSave() {\n      if (this.cronFormat == null || this.cronFormat === '') {\n        return;\n      }\n\n      await axios({\n        method: 'post',\n        url: `/api/project/${this.projectId}/schedules/validate`,\n        responseType: 'json',\n        data: {\n          cron_format: this.cronFormat,\n        },\n      });\n\n      this.item.app = this.app;\n\n      this.item.arguments = JSON.stringify(this.args);\n    },\n\n    async afterSave(newItem) {\n      if (newItem || this.schedules.length === 0) {\n        if (this.cronFormat != null && this.cronFormat !== '' && this.cronVisible) {\n          // new schedule\n          await axios({\n            method: 'post',\n            url: `/api/project/${this.projectId}/schedules`,\n            responseType: 'json',\n            data: {\n              project_id: this.projectId,\n              template_id: newItem ? newItem.id : this.itemId,\n              cron_format: this.cronFormat,\n              repository_id: this.cronRepositoryId,\n              active: true,\n            },\n          });\n        }\n      } else if (this.schedules.length > 1) {\n        // do nothing\n      } else if (this.cronFormat == null || this.cronFormat === '' || !this.cronVisible) {\n        // drop schedule\n        await axios({\n          method: 'delete',\n          url: `/api/project/${this.projectId}/schedules/${this.schedules[0].id}`,\n          responseType: 'json',\n        });\n      } else {\n        // update schedule\n        await axios({\n          method: 'put',\n          url: `/api/project/${this.projectId}/schedules/${this.schedules[0].id}`,\n          responseType: 'json',\n          data: {\n            id: this.schedules[0].id,\n            project_id: this.projectId,\n            template_id: this.itemId,\n            cron_format: this.cronFormat,\n            repository_id: this.cronRepositoryId,\n          },\n        });\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}