{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\nconst parser = require('cron-parser');\nconst MONTHS = [{\n  id: 1,\n  title: 'Jan'\n}, {\n  id: 2,\n  title: 'Feb'\n}, {\n  id: 3,\n  title: 'March'\n}, {\n  id: 4,\n  title: 'April'\n}, {\n  id: 5,\n  title: 'May'\n}, {\n  id: 6,\n  title: 'June'\n}, {\n  id: 7,\n  title: 'July'\n}, {\n  id: 8,\n  title: 'August'\n}, {\n  id: 9,\n  title: 'September'\n}, {\n  id: 10,\n  title: 'October'\n}, {\n  id: 11,\n  title: 'November'\n}, {\n  id: 12,\n  title: 'December'\n}];\nconst TIMINGS = [{\n  id: 'yearly',\n  title: 'Yearly'\n}, {\n  id: 'monthly',\n  title: 'Monthly'\n}, {\n  id: 'weekly',\n  title: 'Weekly'\n}, {\n  id: 'daily',\n  title: 'Daily'\n}, {\n  id: 'hourly',\n  title: 'Hourly'\n}];\nconst WEEKDAYS = [{\n  id: 0,\n  title: 'Sunday'\n}, {\n  id: 1,\n  title: 'Monday'\n}, {\n  id: 2,\n  title: 'Tuesday'\n}, {\n  id: 3,\n  title: 'Wednesday'\n}, {\n  id: 4,\n  title: 'Thursday'\n}, {\n  id: 5,\n  title: 'Friday'\n}, {\n  id: 6,\n  title: 'Saturday'\n}];\nconst MINUTES = [{\n  id: 0,\n  title: ':00'\n}, {\n  id: 5,\n  title: ':05'\n}, {\n  id: 10,\n  title: ':10'\n}, {\n  id: 15,\n  title: ':15'\n}, {\n  id: 20,\n  title: ':20'\n}, {\n  id: 25,\n  title: ':25'\n}, {\n  id: 30,\n  title: ':30'\n}, {\n  id: 35,\n  title: ':35'\n}, {\n  id: 40,\n  title: ':40'\n}, {\n  id: 45,\n  title: ':45'\n}, {\n  id: 50,\n  title: ':50'\n}, {\n  id: 55,\n  title: ':55'\n}];\nexport default {\n  mixins: [ItemFormBase],\n  data() {\n    return {\n      templates: null,\n      timing: 'hourly',\n      TIMINGS,\n      MONTHS,\n      WEEKDAYS,\n      MINUTES,\n      minutes: [],\n      hours: [],\n      days: [],\n      months: [],\n      weekdays: [],\n      rawCron: false\n    };\n  },\n  async created() {\n    this.templates = (await axios({\n      method: 'get',\n      url: `/api/project/${this.projectId}/templates`,\n      responseType: 'json'\n    })).data;\n  },\n  methods: {\n    nextRunTime() {\n      return parser.parseExpression(this.item.cron_format).next();\n    },\n    refreshCheckboxes() {\n      const fields = JSON.parse(JSON.stringify(parser.parseExpression(this.item.cron_format).fields));\n      if (this.isHourly(this.item.cron_format)) {\n        this.minutes = fields.minute;\n        this.timing = 'hourly';\n      } else {\n        this.minutes = [];\n      }\n      if (this.isDaily(this.item.cron_format)) {\n        this.hours = fields.hour;\n        this.timing = 'daily';\n      } else {\n        this.hours = [];\n      }\n      if (this.isWeekly(this.item.cron_format)) {\n        this.weekdays = fields.dayOfWeek;\n        this.timing = 'weekly';\n      } else {\n        this.months = [];\n        this.weekdays = [];\n      }\n      if (this.isMonthly(this.item.cron_format)) {\n        this.days = fields.dayOfMonth;\n        this.timing = 'monthly';\n      } else {\n        this.months = [];\n        this.weekdays = [];\n      }\n      if (this.isYearly(this.item.cron_format)) {\n        this.months = fields.month;\n        this.timing = 'yearly';\n      }\n    },\n    afterLoadData() {\n      if (this.isNew) {\n        this.item.cron_format = '* * * * *';\n      }\n      this.refreshCheckboxes();\n    },\n    isWeekly(s) {\n      return /^\\S+\\s\\S+\\s\\S+\\s\\S+\\s[^*]\\S*$/.test(s);\n    },\n    isYearly(s) {\n      return /^\\S+\\s\\S+\\s\\S+\\s[^*]\\S*\\s\\S+$/.test(s);\n    },\n    isMonthly(s) {\n      return /^\\S+\\s\\S+\\s[^*]\\S*\\s\\S+\\s\\S+$/.test(s);\n    },\n    isDaily(s) {\n      return /^\\S+\\s[^*]\\S*\\s\\S+\\s\\S+\\s\\S+$/.test(s);\n    },\n    isHourly(s) {\n      return /^[^*]\\S*\\s\\S+\\s\\S+\\s\\S+\\s\\S+$/.test(s);\n    },\n    refreshCron() {\n      const fields = JSON.parse(JSON.stringify(parser.parseExpression('* * * * *').fields));\n      switch (this.timing) {\n        case 'hourly':\n          this.months = [];\n          this.weekdays = [];\n          this.days = [];\n          this.hours = [];\n          break;\n        case 'daily':\n          this.days = [];\n          this.months = [];\n          this.weekdays = [];\n          break;\n        case 'monthly':\n          this.months = [];\n          this.weekdays = [];\n          break;\n        case 'weekly':\n          this.months = [];\n          this.days = [];\n          break;\n        default:\n          break;\n      }\n      if (this.months.length > 0) {\n        fields.month = this.months;\n      }\n      if (this.weekdays.length > 0) {\n        fields.dayOfWeek = this.weekdays;\n      }\n      if (this.days.length > 0) {\n        fields.dayOfMonth = this.days;\n      }\n      if (this.hours.length > 0) {\n        fields.hour = this.hours;\n      }\n      if (this.minutes.length > 0) {\n        fields.minute = this.minutes;\n      }\n      this.item.cron_format = parser.fieldsToExpression(fields).stringify();\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/schedules`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/schedules/${this.itemId}`;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;AACA;AAEA;AAEA;EACAA;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;AAEA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;AAEA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;EACAD;EACAC;AACA;AAEA,iBACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,GACA;EAAAD;EAAAC;AAAA,EACA;AAEA;EACAC;EAEAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EAEA;IACA;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACAC;MACA;IACA;IAEAC;MACA,0BACAC,oEACA;MAEA;QACA;QACA;MACA;QACA;MACA;MAEA;QACA;QACA;MACA;QACA;MACA;MAEA;QACA;QACA;MACA;QACA;QACA;MACA;MAEA;QACA;QACA;MACA;QACA;QACA;MACA;MAEA;QACA;QACA;MACA;IACA;IAEAC;MACA;QACA;MACA;MAEA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MAEA;QACA;UACA;UACA;UACA;UACA;UACA;QACA;UACA;UACA;UACA;UACA;QACA;UACA;UACA;UACA;QACA;UACA;UACA;UACA;QACA;UACA;MACA;MAEA;QACAC;MACA;MAEA;QACAA;MACA;MAEA;QACAA;MACA;MAEA;QACAA;MACA;MAEA;QACAA;MACA;MAEA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;IACA;EAEA;AACA","names":["id","title","mixins","data","templates","timing","TIMINGS","MONTHS","WEEKDAYS","MINUTES","minutes","hours","days","months","weekdays","rawCron","method","url","responseType","methods","nextRunTime","refreshCheckboxes","JSON","afterLoadData","isWeekly","isYearly","isMonthly","isDaily","isHourly","refreshCron","fields","getItemsUrl","getSingleItemUrl"],"sourceRoot":"src/components","sources":["ScheduleForm.vue"],"sourcesContent":["<template>\n  <v-form\n    ref=\"form\"\n    lazy-validation\n    v-model=\"formValid\"\n    v-if=\"templates && item != null\"\n  >\n\n    <v-alert\n      :value=\"formError\"\n      color=\"error\"\n      class=\"pb-2\"\n    >{{ formError }}\n    </v-alert>\n\n    <v-text-field\n      v-model=\"item.name\"\n      :label=\"$t('Name')\"\n      :rules=\"[v => !!v || $t('name_required')]\"\n      required\n      :disabled=\"formSaving\"\n      class=\"mb-4\"\n    ></v-text-field>\n\n    <v-select\n      v-model=\"item.template_id\"\n      :label=\"$t('Template')\"\n      :items=\"templates\"\n      item-value=\"id\"\n      :item-text=\"(itm) => itm.name\"\n      :rules=\"[v => !!v || $t('template_required')]\"\n      required\n      :disabled=\"formSaving\"\n    />\n\n    <v-switch\n      v-model=\"rawCron\"\n      label=\"Show cron format\"\n    />\n\n    <v-text-field\n      v-if=\"rawCron\"\n      v-model=\"item.cron_format\"\n      :label=\"$t('Cron')\"\n      :rules=\"[v => !!v || $t('Cron required')]\"\n      required\n      :disabled=\"formSaving\"\n      @input=\"refreshCheckboxes()\"\n    ></v-text-field>\n\n    <div v-if=\"!rawCron\">\n      <v-select\n        v-model=\"timing\"\n        :label=\"$t('Timing')\"\n        :items=\"TIMINGS\"\n        item-value=\"id\"\n        item-text=\"title\"\n        :rules=\"[v => !!v || $t('template_required')]\"\n        required\n        :disabled=\"formSaving\"\n        @change=\"refreshCron()\"\n      />\n\n      <div v-if=\"['yearly'].includes(timing)\">\n        <div>Months</div>\n        <div class=\"d-flex flex-wrap\">\n          <v-checkbox\n            class=\"mr-2 mt-0 ScheduleCheckbox\"\n            v-for=\"m in MONTHS\" :key=\"m.id\"\n            :value=\"m.id\"\n            :label=\"m.title\"\n            v-model=\"months\"\n            color=\"white\"\n            :class=\"{'ScheduleCheckbox--active': months.includes(m.id)}\"\n            @change=\"refreshCron()\"\n          ></v-checkbox>\n        </div>\n      </div>\n\n      <div v-if=\"['weekly'].includes(timing)\">\n        <div class=\"mt-4\">Weekdays</div>\n        <div class=\"d-flex flex-wrap\">\n          <v-checkbox\n            class=\"mr-2 mt-0 ScheduleCheckbox\"\n            v-for=\"d in WEEKDAYS\" :key=\"d.id\"\n            :value=\"d.id\"\n            :label=\"d.title\"\n            v-model=\"weekdays\"\n            color=\"white\"\n            :class=\"{'ScheduleCheckbox--active': weekdays.includes(d.id)}\"\n            @change=\"refreshCron()\"\n          ></v-checkbox>\n        </div>\n      </div>\n\n      <div v-if=\"['yearly', 'monthly'].includes(timing)\">\n        <div class=\"mt-4\">Days</div>\n        <div class=\"d-flex flex-wrap\">\n          <v-checkbox\n            class=\"mr-2 mt-0 ScheduleCheckbox\"\n            v-for=\"d in 31\"\n            :key=\"d\"\n            :value=\"d\"\n            :label=\"`${d}`\"\n            v-model=\"days\"\n            color=\"white\"\n            :class=\"{'ScheduleCheckbox--active': days.includes(d)}\"\n            @change=\"refreshCron()\"\n          ></v-checkbox>\n        </div>\n      </div>\n\n      <div v-if=\"['yearly', 'monthly', 'weekly', 'daily'].includes(timing)\">\n        <div class=\"mt-4\">Hours</div>\n        <div class=\"d-flex flex-wrap\">\n          <v-checkbox\n            class=\"mr-2 mt-0 ScheduleCheckbox\"\n            v-for=\"h in 24\"\n            :key=\"h - 1\"\n            :value=\"h - 1\"\n            :label=\"`${h - 1}`\"\n            v-model=\"hours\"\n            color=\"white\"\n            :class=\"{'ScheduleCheckbox--active': hours.includes(h - 1)}\"\n            @change=\"refreshCron()\"\n          ></v-checkbox>\n        </div>\n      </div>\n\n      <div>\n        <div class=\"mt-4\">Minutes</div>\n        <div class=\"d-flex flex-wrap\">\n          <v-checkbox\n            class=\"mr-2 mt-0 ScheduleCheckbox\"\n            v-for=\"m in MINUTES\"\n            :key=\"m.id\"\n            :value=\"m.id\"\n            :label=\"m.title\"\n            v-model=\"minutes\"\n            color=\"white\"\n            :class=\"{'ScheduleCheckbox--active': minutes.includes(m.id)}\"\n            @change=\"refreshCron()\"\n          ></v-checkbox>\n        </div>\n      </div>\n    </div>\n\n    <v-checkbox\n      v-model=\"item.active\"\n    >\n      <template v-slot:label>\n        Enabled\n        <span\n          v-if=\"item.active\"\n          class=\"ml-3\"\n          style=\"color: limegreen; font-weight: bold;\"\n        >\n          Next run {{ nextRunTime() | formatDate }}.\n        </span>\n      </template>\n    </v-checkbox>\n\n  </v-form>\n</template>\n\n<style lang=\"scss\">\n.ScheduleCheckbox {\n\n  .v-input__slot {\n    padding: 4px 6px;\n    font-weight: bold;\n    border-radius: 6px;\n  }\n\n  .v-messages {\n    display: none;\n  }\n\n  &.theme--light {\n    .v-input__slot {\n      background: #e4e4e4;\n    }\n  }\n\n  &.theme--dark {\n    .v-input__slot {\n      background: gray;\n    }\n  }\n}\n\n.ScheduleCheckbox--active {\n  .v-input__slot {\n    background: #4caf50 !important;\n  }\n\n  .v-label {\n    color: white;\n  }\n}\n\n</style>\n\n<script>\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\n\nconst parser = require('cron-parser');\n\nconst MONTHS = [{\n  id: 1,\n  title: 'Jan',\n}, {\n  id: 2,\n  title: 'Feb',\n}, {\n  id: 3,\n  title: 'March',\n}, {\n  id: 4,\n  title: 'April',\n}, {\n  id: 5,\n  title: 'May',\n}, {\n  id: 6,\n  title: 'June',\n}, {\n  id: 7,\n  title: 'July',\n}, {\n  id: 8,\n  title: 'August',\n}, {\n  id: 9,\n  title: 'September',\n}, {\n  id: 10,\n  title: 'October',\n}, {\n  id: 11,\n  title: 'November',\n}, {\n  id: 12,\n  title: 'December',\n}];\n\nconst TIMINGS = [{\n  id: 'yearly',\n  title: 'Yearly',\n}, {\n  id: 'monthly',\n  title: 'Monthly',\n}, {\n  id: 'weekly',\n  title: 'Weekly',\n}, {\n  id: 'daily',\n  title: 'Daily',\n}, {\n  id: 'hourly',\n  title: 'Hourly',\n}];\n\nconst WEEKDAYS = [{\n  id: 0,\n  title: 'Sunday',\n}, {\n  id: 1,\n  title: 'Monday',\n}, {\n  id: 2,\n  title: 'Tuesday',\n}, {\n  id: 3,\n  title: 'Wednesday',\n}, {\n  id: 4,\n  title: 'Thursday',\n}, {\n  id: 5,\n  title: 'Friday',\n}, {\n  id: 6,\n  title: 'Saturday',\n}];\n\nconst MINUTES = [\n  { id: 0, title: ':00' },\n  { id: 5, title: ':05' },\n  { id: 10, title: ':10' },\n  { id: 15, title: ':15' },\n  { id: 20, title: ':20' },\n  { id: 25, title: ':25' },\n  { id: 30, title: ':30' },\n  { id: 35, title: ':35' },\n  { id: 40, title: ':40' },\n  { id: 45, title: ':45' },\n  { id: 50, title: ':50' },\n  { id: 55, title: ':55' },\n];\n\nexport default {\n  mixins: [ItemFormBase],\n\n  data() {\n    return {\n      templates: null,\n      timing: 'hourly',\n      TIMINGS,\n      MONTHS,\n      WEEKDAYS,\n      MINUTES,\n      minutes: [],\n      hours: [],\n      days: [],\n      months: [],\n      weekdays: [],\n      rawCron: false,\n    };\n  },\n\n  async created() {\n    this.templates = (await axios({\n      method: 'get',\n      url: `/api/project/${this.projectId}/templates`,\n      responseType: 'json',\n    })).data;\n  },\n\n  methods: {\n    nextRunTime() {\n      return parser.parseExpression(this.item.cron_format).next();\n    },\n\n    refreshCheckboxes() {\n      const fields = JSON.parse(\n        JSON.stringify(parser.parseExpression(this.item.cron_format).fields),\n      );\n\n      if (this.isHourly(this.item.cron_format)) {\n        this.minutes = fields.minute;\n        this.timing = 'hourly';\n      } else {\n        this.minutes = [];\n      }\n\n      if (this.isDaily(this.item.cron_format)) {\n        this.hours = fields.hour;\n        this.timing = 'daily';\n      } else {\n        this.hours = [];\n      }\n\n      if (this.isWeekly(this.item.cron_format)) {\n        this.weekdays = fields.dayOfWeek;\n        this.timing = 'weekly';\n      } else {\n        this.months = [];\n        this.weekdays = [];\n      }\n\n      if (this.isMonthly(this.item.cron_format)) {\n        this.days = fields.dayOfMonth;\n        this.timing = 'monthly';\n      } else {\n        this.months = [];\n        this.weekdays = [];\n      }\n\n      if (this.isYearly(this.item.cron_format)) {\n        this.months = fields.month;\n        this.timing = 'yearly';\n      }\n    },\n\n    afterLoadData() {\n      if (this.isNew) {\n        this.item.cron_format = '* * * * *';\n      }\n\n      this.refreshCheckboxes();\n    },\n\n    isWeekly(s) {\n      return /^\\S+\\s\\S+\\s\\S+\\s\\S+\\s[^*]\\S*$/.test(s);\n    },\n\n    isYearly(s) {\n      return /^\\S+\\s\\S+\\s\\S+\\s[^*]\\S*\\s\\S+$/.test(s);\n    },\n\n    isMonthly(s) {\n      return /^\\S+\\s\\S+\\s[^*]\\S*\\s\\S+\\s\\S+$/.test(s);\n    },\n\n    isDaily(s) {\n      return /^\\S+\\s[^*]\\S*\\s\\S+\\s\\S+\\s\\S+$/.test(s);\n    },\n\n    isHourly(s) {\n      return /^[^*]\\S*\\s\\S+\\s\\S+\\s\\S+\\s\\S+$/.test(s);\n    },\n\n    refreshCron() {\n      const fields = JSON.parse(JSON.stringify(parser.parseExpression('* * * * *').fields));\n\n      switch (this.timing) {\n        case 'hourly':\n          this.months = [];\n          this.weekdays = [];\n          this.days = [];\n          this.hours = [];\n          break;\n        case 'daily':\n          this.days = [];\n          this.months = [];\n          this.weekdays = [];\n          break;\n        case 'monthly':\n          this.months = [];\n          this.weekdays = [];\n          break;\n        case 'weekly':\n          this.months = [];\n          this.days = [];\n          break;\n        default:\n          break;\n      }\n\n      if (this.months.length > 0) {\n        fields.month = this.months;\n      }\n\n      if (this.weekdays.length > 0) {\n        fields.dayOfWeek = this.weekdays;\n      }\n\n      if (this.days.length > 0) {\n        fields.dayOfMonth = this.days;\n      }\n\n      if (this.hours.length > 0) {\n        fields.hour = this.hours;\n      }\n\n      if (this.minutes.length > 0) {\n        fields.minute = this.minutes;\n      }\n\n      this.item.cron_format = parser.fieldsToExpression(fields).stringify();\n    },\n\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/schedules`;\n    },\n\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/schedules/${this.itemId}`;\n    },\n\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}