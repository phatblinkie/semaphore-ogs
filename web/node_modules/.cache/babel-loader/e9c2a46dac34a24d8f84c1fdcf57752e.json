{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Listenable from '@/lib/Listenable';\nclass IndeterminateTimer extends Listenable {\n  constructor() {\n    super();\n    this.direction = 1;\n    this.value = 0;\n    this.rotate = 0;\n  }\n  start() {\n    const STEP = 1;\n    const self = this;\n    self.valueTimer = setInterval(() => {\n      if (self.direction === 1 && self.value >= 100) {\n        self.direction = -1;\n      } else if (self.direction === -1 && self.value <= 0) {\n        self.direction = 1;\n      }\n      if (self.direction === 1) {\n        self.rotate += STEP;\n        self.value += STEP;\n      } else {\n        self.rotate += STEP * 5;\n        self.value += -STEP;\n      }\n      if (self.rotate > 360) {\n        self.rotate %= 360;\n      }\n      self.callListeners({\n        value: self.value,\n        rotate: self.rotate\n      });\n    }, 50);\n  }\n  stop() {\n    clearInterval(this.valueTimer);\n  }\n  addListener(callback) {\n    if (!this.hasListeners()) {\n      this.start();\n    }\n    return super.addListener(callback);\n  }\n  removeListener(id) {\n    super.removeListener(id);\n    if (!this.hasListeners()) {\n      this.stop();\n    }\n  }\n}\nconst indeterminateTimer = new IndeterminateTimer();\nexport default {\n  data() {\n    return {\n      value: null,\n      rotate: null,\n      listenerId: null\n    };\n  },\n  mounted() {\n    this.value = indeterminateTimer.value;\n    this.rotate = indeterminateTimer.rotate;\n    this.listenerId = indeterminateTimer.addListener(({\n      value,\n      rotate\n    }) => {\n      this.value = value;\n      this.rotate = rotate;\n    });\n  },\n  beforeDestroy() {\n    indeterminateTimer.removeListener(this.listenerId);\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;AAEA;EACAA;IACA;IACA;IACA;IACA;EACA;EAEAC;IACA;IACA;IAEAC;MACA;QACAA;MACA;QACAA;MACA;MACA;QACAA;QACAA;MACA;QACAA;QACAA;MACA;MAEA;QACAA;MACA;MAEAA;QACAC;QACAC;MACA;IACA;EACA;EAEAC;IACAC;EACA;EAEAC;IACA;MACA;IACA;IACA;EACA;EAEAC;IACA;IACA;MACA;IACA;EACA;AACA;AAEA;AAEA;EACAC;IACA;MACAN;MACAC;MACAM;IACA;EACA;EAEAC;IACA;IACA;IACA;MAAAR;MAAAC;IAAA;MACA;MACA;IACA;EACA;EAEAQ;IACAC;EACA;AACA","names":["constructor","start","self","value","rotate","stop","clearInterval","addListener","removeListener","data","listenerId","mounted","beforeDestroy","indeterminateTimer"],"sourceRoot":"src/components","sources":["IndeterminateProgressCircular.vue"],"sourcesContent":["<template>\n  <v-progress-circular\n    color=\"white\"\n    class=\"indeterminate-progress-circular mr-2\"\n    size=\"20\"\n    width=\"10\"\n    :rotate=\"rotate\"\n    :value=\"value\"\n  >\n  </v-progress-circular>\n</template>\n<style lang=\"scss\">\n  .indeterminate-progress-circular {\n    .v-progress-circular__overlay {\n      transition: 0s !important;\n    }\n  }\n</style>\n<script>\nimport Listenable from '@/lib/Listenable';\n\nclass IndeterminateTimer extends Listenable {\n  constructor() {\n    super();\n    this.direction = 1;\n    this.value = 0;\n    this.rotate = 0;\n  }\n\n  start() {\n    const STEP = 1;\n    const self = this;\n\n    self.valueTimer = setInterval(() => {\n      if (self.direction === 1 && self.value >= 100) {\n        self.direction = -1;\n      } else if (self.direction === -1 && self.value <= 0) {\n        self.direction = 1;\n      }\n      if (self.direction === 1) {\n        self.rotate += STEP;\n        self.value += STEP;\n      } else {\n        self.rotate += STEP * 5;\n        self.value += -STEP;\n      }\n\n      if (self.rotate > 360) {\n        self.rotate %= 360;\n      }\n\n      self.callListeners({\n        value: self.value,\n        rotate: self.rotate,\n      });\n    }, 50);\n  }\n\n  stop() {\n    clearInterval(this.valueTimer);\n  }\n\n  addListener(callback) {\n    if (!this.hasListeners()) {\n      this.start();\n    }\n    return super.addListener(callback);\n  }\n\n  removeListener(id) {\n    super.removeListener(id);\n    if (!this.hasListeners()) {\n      this.stop();\n    }\n  }\n}\n\nconst indeterminateTimer = new IndeterminateTimer();\n\nexport default {\n  data() {\n    return {\n      value: null,\n      rotate: null,\n      listenerId: null,\n    };\n  },\n\n  mounted() {\n    this.value = indeterminateTimer.value;\n    this.rotate = indeterminateTimer.rotate;\n    this.listenerId = indeterminateTimer.addListener(({ value, rotate }) => {\n      this.value = value;\n      this.rotate = rotate;\n    });\n  },\n\n  beforeDestroy() {\n    indeterminateTimer.removeListener(this.listenerId);\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}