{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport EventBus from '@/event-bus';\nimport { getErrorMessage } from '@/lib/error';\nimport YesNoDialog from '@/components/YesNoDialog.vue';\nimport TaskList from '@/components/TaskList.vue';\nimport { TEMPLATE_TYPE_ACTION_TITLES, TEMPLATE_TYPE_ICONS, TEMPLATE_TYPE_TITLES, USER_PERMISSIONS } from '@/lib/constants';\nimport ObjectRefsDialog from '@/components/ObjectRefsDialog.vue';\nimport NewTaskDialog from '@/components/NewTaskDialog.vue';\nimport EditTemplateDialogue from '@/components/EditTemplateDialog.vue';\nimport PermissionsCheck from '@/components/PermissionsCheck';\nexport default {\n  components: {\n    YesNoDialog,\n    TaskList,\n    ObjectRefsDialog,\n    NewTaskDialog,\n    EditTemplateDialogue\n  },\n  props: {\n    projectId: Number,\n    userPermissions: Number\n  },\n  mixins: [PermissionsCheck],\n  data() {\n    return {\n      item: null,\n      inventory: null,\n      environment: null,\n      repositories: null,\n      deleteDialog: null,\n      editDialog: null,\n      copyDialog: null,\n      TEMPLATE_TYPE_ICONS,\n      TEMPLATE_TYPE_TITLES,\n      TEMPLATE_TYPE_ACTION_TITLES,\n      itemRefs: null,\n      itemRefsDialog: null,\n      newTaskDialog: null,\n      USER_PERMISSIONS\n    };\n  },\n  computed: {\n    canUpdate() {\n      return this.can(USER_PERMISSIONS.manageProjectResources);\n    },\n    viewId() {\n      if (/^-?\\d+$/.test(this.$route.params.viewId)) {\n        return parseInt(this.$route.params.viewId, 10);\n      }\n      return this.$route.params.viewId;\n    },\n    itemId() {\n      if (/^-?\\d+$/.test(this.$route.params.templateId)) {\n        return parseInt(this.$route.params.templateId, 10);\n      }\n      return this.$route.params.templateId;\n    },\n    isNew() {\n      return this.itemId === 'new';\n    },\n    isLoaded() {\n      return this.item && this.inventory && this.environment && this.repositories;\n    }\n  },\n  watch: {\n    async itemId() {\n      await this.loadData();\n    }\n  },\n  async created() {\n    if (this.isNew) {\n      await this.$router.replace({\n        path: `/project/${this.projectId}/templates/new/edit`\n      });\n    } else {\n      await this.loadData();\n    }\n  },\n  methods: {\n    showDrawer() {\n      EventBus.$emit('i-show-drawer');\n    },\n    async askDelete() {\n      this.itemRefs = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.itemId}/refs`,\n        responseType: 'json'\n      })).data;\n      if (this.itemRefs.templates.length > 0) {\n        this.itemRefsDialog = true;\n        return;\n      }\n      this.deleteDialog = true;\n    },\n    async remove() {\n      try {\n        await axios({\n          method: 'delete',\n          url: `/api/project/${this.projectId}/templates/${this.itemId}`,\n          responseType: 'json'\n        });\n        EventBus.$emit('i-snackbar', {\n          color: 'success',\n          text: `Template \"${this.item.name}\" deleted`\n        });\n        await this.$router.push({\n          path: `/project/${this.projectId}/templates`\n        });\n      } catch (err) {\n        EventBus.$emit('i-snackbar', {\n          color: 'error',\n          text: getErrorMessage(err)\n        });\n      } finally {\n        this.deleteDialog = false;\n      }\n    },\n    async onTemplateCopied(e) {\n      await this.$router.push({\n        path: `/project/${this.projectId}/templates/${e.item.id}`\n      });\n    },\n    async loadData() {\n      this.item = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.itemId}`,\n        responseType: 'json'\n      })).data;\n      this.inventory = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/inventory`,\n        responseType: 'json'\n      })).data;\n      this.environment = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/environment`,\n        responseType: 'json'\n      })).data;\n      this.repositories = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/repositories`,\n        responseType: 'json'\n      })).data;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+LA;AACA;AACA;AACA;AACA;AACA,SACAA,6BACAC,qBACAC,sBACAC,wBACA;AACA;AACA;AACA;AACA;AAEA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;EAEAC;IACAC;IACAC;EACA;EAEAC;EAEAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACApB;MACAC;MACAF;MACAsB;MACAC;MACAC;MACArB;IACA;EACA;EAEAsB;IACAC;MACA;IACA;IAEAC;MACA;QACA;MACA;MACA;IACA;IAEAC;MACA;QACA;MACA;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA,oBACA,kBACA,oBACA;IACA;EACA;EAEAC;IACA;MACA;IACA;EACA;EAEA;IACA;MACA;QACAC;MACA;IACA;MACA;IACA;EACA;EAEAC;IACAC;MACAC;IACA;IAEA;MACA;QACAC;QACAC;QACAC;MACA;MAEA;QACA;QACA;MACA;MAEA;IACA;IAEA;MACA;QACA;UACAF;UACAC;UACAC;QACA;QAEAH;UACAI;UACAC;QACA;QAEA;UACAR;QACA;MACA;QACAG;UACAI;UACAC;QACA;MACA;QACA;MACA;IACA;IAEA;MACA;QACAR;MACA;IACA;IAEA;MACA;QACAI;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;IACA;EACA;AACA","names":["TEMPLATE_TYPE_ACTION_TITLES","TEMPLATE_TYPE_ICONS","TEMPLATE_TYPE_TITLES","USER_PERMISSIONS","components","YesNoDialog","TaskList","ObjectRefsDialog","NewTaskDialog","EditTemplateDialogue","props","projectId","userPermissions","mixins","data","item","inventory","environment","repositories","deleteDialog","editDialog","copyDialog","itemRefs","itemRefsDialog","newTaskDialog","computed","canUpdate","viewId","itemId","isNew","isLoaded","watch","path","methods","showDrawer","EventBus","method","url","responseType","color","text"],"sourceRoot":"src/views/project","sources":["TemplateView.vue"],"sourcesContent":["<template xmlns:v-slot=\"http://www.w3.org/1999/XSL/Transform\">\n  <div v-if=\"!isLoaded\">\n    <v-progress-linear\n      indeterminate\n      color=\"primary darken-2\"\n    ></v-progress-linear>\n  </div>\n  <div v-else>\n\n    <NewTaskDialog\n      v-model=\"newTaskDialog\"\n      :project-id=\"projectId\"\n      :template-id=\"itemId\"\n      :template-alias=\"item.name\"\n      :template-type=\"item.type\"\n      :template-app=\"item.app\"\n    />\n\n    <EditTemplateDialogue\n        v-model=\"editDialog\"\n        :project-id=\"projectId\"\n        :item-app=\"item.app\"\n        :item-id=\"itemId\"\n        @save=\"loadData()\"\n    ></EditTemplateDialogue>\n\n    <EditTemplateDialogue\n        v-model=\"copyDialog\"\n        :project-id=\"projectId\"\n        :item-app=\"item.app\"\n        item-id=\"new\"\n        :source-item-id=\"itemId\"\n        @save=\"onTemplateCopied\"\n    ></EditTemplateDialogue>\n\n    <ObjectRefsDialog\n      object-title=\"template\"\n      :object-refs=\"itemRefs\"\n      :project-id=\"projectId\"\n      v-model=\"itemRefsDialog\"\n    />\n\n    <YesNoDialog\n      :title=\"$t('deleteTemplate')\"\n      :text=\"$t('askDeleteTemp')\"\n      v-model=\"deleteDialog\"\n      @yes=\"remove()\"\n    />\n\n    <v-toolbar flat>\n      <v-app-bar-nav-icon @click=\"showDrawer()\"></v-app-bar-nav-icon>\n      <v-toolbar-title class=\"breadcrumbs\">\n        <router-link\n          class=\"breadcrumbs__item breadcrumbs__item--link\"\n          :to=\"viewId\n              ? `/project/${projectId}/views/${viewId}/templates/`\n              : `/project/${projectId}/templates/`\"\n        >\n          {{ $t('taskTemplates2') }}\n        </router-link>\n        <v-icon>mdi-chevron-right</v-icon>\n        <span class=\"breadcrumbs__item\">{{ item.name }}</span>\n      </v-toolbar-title>\n\n      <v-spacer></v-spacer>\n\n      <v-btn color=\"primary\" depressed class=\"mr-3\" @click=\"newTaskDialog = true\">\n        {{ $t(TEMPLATE_TYPE_ACTION_TITLES[item.type]) }}\n      </v-btn>\n\n      <v-btn\n        icon\n        color=\"error\"\n        @click=\"askDelete()\"\n        v-if=\"canUpdate\"\n      >\n        <v-icon>mdi-delete</v-icon>\n      </v-btn>\n\n      <v-btn\n        icon\n        @click=\"copyDialog = true\"\n        v-if=\"canUpdate\"\n      >\n        <v-icon>mdi-content-copy</v-icon>\n      </v-btn>\n\n      <v-btn\n        icon\n        @click=\"editDialog = true\"\n        v-if=\"canUpdate\"\n      >\n        <v-icon>mdi-pencil</v-icon>\n      </v-btn>\n    </v-toolbar>\n\n    <v-container>\n      <v-alert\n        text\n        type=\"info\"\n        class=\"mb-0 ml-4 mr-4 mb-2\"\n        v-if=\"item.description\"\n      >{{ item.description }}\n      </v-alert>\n\n      <v-row>\n        <v-col>\n          <v-list subheader dense>\n            <v-list-item>\n              <v-list-item-icon>\n                <v-icon>mdi-book-play</v-icon>\n              </v-list-item-icon>\n\n              <v-list-item-content>\n                <v-list-item-title>{{ $t('playbook') }}</v-list-item-title>\n                <v-list-item-subtitle>{{ item.playbook }}</v-list-item-subtitle>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-col>\n        <v-col>\n          <v-list subheader dense>\n            <v-list-item>\n              <v-list-item-icon>\n                <v-icon>{{ TEMPLATE_TYPE_ICONS[item.type] }}</v-icon>\n              </v-list-item-icon>\n\n              <v-list-item-content>\n                <v-list-item-title>{{ $t('type') }}</v-list-item-title>\n                <v-list-item-subtitle>{{ $t(TEMPLATE_TYPE_TITLES[item.type]) }}\n                </v-list-item-subtitle>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-col>\n        <v-col>\n          <v-list subheader dense>\n            <v-list-item>\n              <v-list-item-icon>\n                <v-icon>mdi-monitor</v-icon>\n              </v-list-item-icon>\n\n              <v-list-item-content>\n                <v-list-item-title>{{ $t('inventory') }}</v-list-item-title>\n                <v-list-item-subtitle>\n                  {{ (inventory.find((x) => x.id === item.inventory_id) || {name: '—'}).name }}\n                </v-list-item-subtitle>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-col>\n        <v-col>\n          <v-list subheader dense>\n            <v-list-item>\n              <v-list-item-icon>\n                <v-icon>mdi-code-braces</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>{{ $t('environment') }}</v-list-item-title>\n                <v-list-item-subtitle>\n                  {{ environment.find((x) => x.id === item.environment_id).name }}\n                </v-list-item-subtitle>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-col>\n        <v-col>\n          <v-list subheader dense>\n            <v-list-item>\n              <v-list-item-icon>\n                <v-icon>mdi-git</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>{{ $t('repository2') }}</v-list-item-title>\n                <v-list-item-subtitle>\n                  {{ repositories.find((x) => x.id === item.repository_id).name }}\n                </v-list-item-subtitle>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-col>\n      </v-row>\n    </v-container>\n\n    <TaskList :template=\"item\"/>\n  </div>\n</template>\n<style lang=\"scss\">\n\n</style>\n<script>\nimport axios from 'axios';\nimport EventBus from '@/event-bus';\nimport { getErrorMessage } from '@/lib/error';\nimport YesNoDialog from '@/components/YesNoDialog.vue';\nimport TaskList from '@/components/TaskList.vue';\nimport {\n  TEMPLATE_TYPE_ACTION_TITLES,\n  TEMPLATE_TYPE_ICONS,\n  TEMPLATE_TYPE_TITLES,\n  USER_PERMISSIONS,\n} from '@/lib/constants';\nimport ObjectRefsDialog from '@/components/ObjectRefsDialog.vue';\nimport NewTaskDialog from '@/components/NewTaskDialog.vue';\nimport EditTemplateDialogue from '@/components/EditTemplateDialog.vue';\nimport PermissionsCheck from '@/components/PermissionsCheck';\n\nexport default {\n  components: {\n    YesNoDialog,\n    TaskList,\n    ObjectRefsDialog,\n    NewTaskDialog,\n    EditTemplateDialogue,\n  },\n\n  props: {\n    projectId: Number,\n    userPermissions: Number,\n  },\n\n  mixins: [PermissionsCheck],\n\n  data() {\n    return {\n      item: null,\n      inventory: null,\n      environment: null,\n      repositories: null,\n      deleteDialog: null,\n      editDialog: null,\n      copyDialog: null,\n      TEMPLATE_TYPE_ICONS,\n      TEMPLATE_TYPE_TITLES,\n      TEMPLATE_TYPE_ACTION_TITLES,\n      itemRefs: null,\n      itemRefsDialog: null,\n      newTaskDialog: null,\n      USER_PERMISSIONS,\n    };\n  },\n\n  computed: {\n    canUpdate() {\n      return this.can(USER_PERMISSIONS.manageProjectResources);\n    },\n\n    viewId() {\n      if (/^-?\\d+$/.test(this.$route.params.viewId)) {\n        return parseInt(this.$route.params.viewId, 10);\n      }\n      return this.$route.params.viewId;\n    },\n\n    itemId() {\n      if (/^-?\\d+$/.test(this.$route.params.templateId)) {\n        return parseInt(this.$route.params.templateId, 10);\n      }\n      return this.$route.params.templateId;\n    },\n    isNew() {\n      return this.itemId === 'new';\n    },\n    isLoaded() {\n      return this.item\n        && this.inventory\n        && this.environment\n        && this.repositories;\n    },\n  },\n\n  watch: {\n    async itemId() {\n      await this.loadData();\n    },\n  },\n\n  async created() {\n    if (this.isNew) {\n      await this.$router.replace({\n        path: `/project/${this.projectId}/templates/new/edit`,\n      });\n    } else {\n      await this.loadData();\n    }\n  },\n\n  methods: {\n    showDrawer() {\n      EventBus.$emit('i-show-drawer');\n    },\n\n    async askDelete() {\n      this.itemRefs = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.itemId}/refs`,\n        responseType: 'json',\n      })).data;\n\n      if (this.itemRefs.templates.length > 0) {\n        this.itemRefsDialog = true;\n        return;\n      }\n\n      this.deleteDialog = true;\n    },\n\n    async remove() {\n      try {\n        await axios({\n          method: 'delete',\n          url: `/api/project/${this.projectId}/templates/${this.itemId}`,\n          responseType: 'json',\n        });\n\n        EventBus.$emit('i-snackbar', {\n          color: 'success',\n          text: `Template \"${this.item.name}\" deleted`,\n        });\n\n        await this.$router.push({\n          path: `/project/${this.projectId}/templates`,\n        });\n      } catch (err) {\n        EventBus.$emit('i-snackbar', {\n          color: 'error',\n          text: getErrorMessage(err),\n        });\n      } finally {\n        this.deleteDialog = false;\n      }\n    },\n\n    async onTemplateCopied(e) {\n      await this.$router.push({\n        path: `/project/${this.projectId}/templates/${e.item.id}`,\n      });\n    },\n\n    async loadData() {\n      this.item = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/templates/${this.itemId}`,\n        responseType: 'json',\n      })).data;\n\n      this.inventory = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/inventory`,\n        responseType: 'json',\n      })).data;\n\n      this.environment = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/environment`,\n        responseType: 'json',\n      })).data;\n\n      this.repositories = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/repositories`,\n        responseType: 'json',\n      })).data;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}