{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport IntegrationExtractorChildValueFormBase from './IntegrationExtractorChildValueFormBase';\nimport { MATCHER_TYPE_ICONS, MATCHER_TYPE_TITLES } from '../lib/constants';\nexport default {\n  mixins: [ItemFormBase, IntegrationExtractorChildValueFormBase],\n  data() {\n    return {\n      MATCHER_TYPE_ICONS,\n      MATCHER_TYPE_TITLES,\n      matchTypes: [{\n        id: 'body',\n        text: 'Body'\n      }, {\n        id: 'header',\n        text: 'Header'\n      }],\n      bodyDataFormats: [{\n        id: 'json',\n        text: 'JSON'\n      }, {\n        id: 'string',\n        text: 'String'\n      }],\n      methods: [{\n        id: 'equals',\n        text: '=='\n      }, {\n        id: 'unequals',\n        text: '!='\n      }, {\n        id: 'contains',\n        text: 'Contains'\n      }]\n    };\n  },\n  computed: {\n    projectId() {\n      if (/^-?\\d+$/.test(this.$route.params.projectId)) {\n        return parseInt(this.$route.params.projectId, 10);\n      }\n      return this.$route.params.projectId;\n    },\n    integrationId() {\n      if (/^-?\\d+$/.test(this.$route.params.integrationId)) {\n        return parseInt(this.$route.params.integrationId, 10);\n      }\n      return this.$route.params.integrationId;\n    }\n  },\n  methods: {\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/integrations/${this.integrationId}/matchers`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/integrations/${this.integrationId}/matchers/${this.itemId}`;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;QACAD;QACAC;MACA;MACAC;QACAF;QACAC;MACA;QACAD;QACAC;MACA;MACAE;QACAH;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;IACA;EACA;EACAG;IACAC;MACA;QACA;MACA;MACA;IACA;IACAC;MACA;QACA;MACA;MACA;IACA;EACA;EACAH;IACAI;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["mixins","data","MATCHER_TYPE_ICONS","MATCHER_TYPE_TITLES","matchTypes","id","text","bodyDataFormats","methods","computed","projectId","integrationId","getItemsUrl","getSingleItemUrl"],"sourceRoot":"src/components","sources":["IntegrationMatcherForm.vue"],"sourcesContent":["<template>\n<v-form\n  ref=\"form\"\n  lazy-validation\n  v-model=\"formValid\"\n  >\n  <v-alert\n    :value=\"formError\"\n    color=\"error\"\n    class=\"pb-2\"\n  >{{ formError }}</v-alert>\n  <v-text-field\n    v-model=\"item.name\"\n    label=\"Name\"\n    :rules=\"[v => !!v || 'Name is required']\"\n    required\n    :disabled=\"formSaving\"\n  ></v-text-field>\n  <v-row>\n    <v-col cols=\"12\" md=\"12\" class=\"pb-0\">\n      <div class=\"ml-4 mr-4 mt-6\">\n        <v-select\n          v-model=\"item.match_type\"\n          label=\"Match on *\"\n          :items=\"matchTypes\"\n          item-value=\"id\"\n          item-text=\"text\"\n          :rules=\"[v => !!v || 'Match source is required']\"\n          outlined\n          dense\n          required\n          :disabled=\"formSaving\"\n        ></v-select>\n        <v-select\n          v-model=\"item.body_data_type\"\n          v-if=\"item.match_type == 'body'\"\n          label=\"Body Data Format *\"\n          :items=\"bodyDataFormats\"\n          item-value=\"id\"\n          item-text=\"text\"\n          :rules=\"[v => !!v || 'Body Data Format is required']\"\n          outlined\n          dense\n          required\n          :disabled=\"formSaving\"\n        ></v-select>\n        <v-text-field\n          v-model=\"item.key\"\n          label=\"Key *\"\n          :rules=\"[v => !!v || 'Key is required']\"\n          outlined\n          dense\n          required\n          :disabled=\"formSaving\"\n        ></v-text-field>\n        <v-select\n          v-model=\"item.method\"\n          label=\"Comparison Method *\"\n          :items=\"methods\"\n          item-value=\"id\"\n          item-text=\"text\"\n          :rules=\"[v => !!v || 'Comparison Method is required']\"\n          outlined\n          dense\n          required\n          :disabled=\"formSaving\"\n        ></v-select>\n        <v-text-field\n          v-model=\"item.value\"\n          label=\"Value *\"\n          :rules=\"[v => !!v || 'Value is required']\"\n          outlined\n          dense\n          required\n          :disabled=\"formSaving\"\n        ></v-text-field>\n      </div>\n    </v-col>\n  </v-row>\n</v-form>\n</template>\n<script>\nimport ItemFormBase from '@/components/ItemFormBase';\nimport IntegrationExtractorChildValueFormBase from './IntegrationExtractorChildValueFormBase';\nimport { MATCHER_TYPE_ICONS, MATCHER_TYPE_TITLES } from '../lib/constants';\n\nexport default {\n  mixins: [ItemFormBase, IntegrationExtractorChildValueFormBase],\n  data() {\n    return {\n      MATCHER_TYPE_ICONS,\n      MATCHER_TYPE_TITLES,\n      matchTypes: [{\n        id: 'body',\n        text: 'Body',\n      }, {\n        id: 'header',\n        text: 'Header',\n      }],\n      bodyDataFormats: [{\n        id: 'json',\n        text: 'JSON',\n      }, {\n        id: 'string',\n        text: 'String',\n      }],\n      methods: [{\n        id: 'equals',\n        text: '==',\n      }, {\n        id: 'unequals',\n        text: '!=',\n      }, {\n        id: 'contains',\n        text: 'Contains',\n      }],\n    };\n  },\n  computed: {\n    projectId() {\n      if (/^-?\\d+$/.test(this.$route.params.projectId)) {\n        return parseInt(this.$route.params.projectId, 10);\n      }\n      return this.$route.params.projectId;\n    },\n    integrationId() {\n      if (/^-?\\d+$/.test(this.$route.params.integrationId)) {\n        return parseInt(this.$route.params.integrationId, 10);\n      }\n      return this.$route.params.integrationId;\n    },\n  },\n  methods: {\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/integrations/${this.integrationId}/matchers`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/integrations/${this.integrationId}/matchers/${this.itemId}`;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}