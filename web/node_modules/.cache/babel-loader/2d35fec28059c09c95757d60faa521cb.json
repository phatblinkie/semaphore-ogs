{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ItemListPageBase from '@/components/ItemListPageBase';\nimport RepositoryForm from '@/components/RepositoryForm.vue';\nimport axios from 'axios';\nexport default {\n  mixins: [ItemListPageBase],\n  components: {\n    RepositoryForm\n  },\n  data() {\n    return {\n      keys: null\n    };\n  },\n  async created() {\n    this.keys = (await axios({\n      method: 'get',\n      url: `/api/project/${this.projectId}/keys`,\n      responseType: 'json'\n    })).data;\n  },\n  methods: {\n    getHeaders() {\n      return [{\n        text: this.$i18n.t('name'),\n        value: 'name',\n        width: '25%'\n      }, {\n        text: this.$i18n.t('gitUrl'),\n        value: 'git_url',\n        width: '50%'\n      }, {\n        text: this.$i18n.t('sshKey'),\n        value: 'ssh_key_id',\n        width: '25%'\n      }, {\n        text: this.$i18n.t('actions'),\n        value: 'actions',\n        sortable: false\n      }];\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/repositories`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/repositories/${this.itemId}`;\n    },\n    getEventName() {\n      return 'i-repositories';\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;AACA;AACA;AAEA;EACAA;EACAC;IAAAC;EAAA;EACAC;IACA;MACAC;IACA;EACA;EAEA;IACA;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACAC;MACA;QACAC;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAE;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["mixins","components","RepositoryForm","data","keys","method","url","responseType","methods","getHeaders","text","value","width","sortable","getItemsUrl","getSingleItemUrl","getEventName"],"sourceRoot":"src/views/project","sources":["Repositories.vue"],"sourcesContent":["<template xmlns:v-slot=\"http://www.w3.org/1999/XSL/Transform\">\n  <div v-if=\"items != null && keys != null\">\n    <EditDialog\n      v-model=\"editDialog\"\n      :save-button-text=\"itemId === 'new' ? $t('create') : $t('save')\"\n      :title=\"`${itemId === 'new' ? $t('nnew') : $t('edit')} Repository`\"\n      @save=\"loadItems()\"\n      :max-width=\"450\"\n    >\n      <template v-slot:form=\"{ onSave, onError, needSave, needReset }\">\n        <RepositoryForm\n          :project-id=\"projectId\"\n          :item-id=\"itemId\"\n          @save=\"onSave\"\n          @error=\"onError\"\n          :need-save=\"needSave\"\n          :need-reset=\"needReset\"\n        />\n      </template>\n    </EditDialog>\n\n    <ObjectRefsDialog\n      object-title=\"repository\"\n      :object-refs=\"itemRefs\"\n      :project-id=\"projectId\"\n      v-model=\"itemRefsDialog\"\n    />\n\n    <YesNoDialog\n      :title=\"$t('deleteRepository')\"\n      :text=\"$t('askDeleteRepo')\"\n      v-model=\"deleteItemDialog\"\n      @yes=\"deleteItem(itemId)\"\n    />\n\n    <v-toolbar flat >\n      <v-app-bar-nav-icon @click=\"showDrawer()\"></v-app-bar-nav-icon>\n      <v-toolbar-title>{{ $t('repositories') }}</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-btn\n        color=\"primary\"\n        @click=\"editItem('new')\"\n        v-if=\"can(USER_PERMISSIONS.manageProjectResources)\"\n      >{{ $t('newRepository') }}</v-btn>\n    </v-toolbar>\n\n    <v-data-table\n      :headers=\"headers\"\n      :items=\"items\"\n      hide-default-footer\n      class=\"mt-4\"\n      :items-per-page=\"Number.MAX_VALUE\"\n    >\n      <template v-slot:item.git_url=\"{ item }\">\n        {{ item.git_url }}\n        <code v-if=\"!item.git_url.startsWith('/')\">{{ item.git_branch }}</code>\n      </template>\n\n      <template v-slot:item.ssh_key_id=\"{ item }\">\n        {{ keys.find((k) => k.id === item.ssh_key_id).name }}\n      </template>\n\n      <template v-slot:item.actions=\"{ item }\">\n        <div style=\"white-space: nowrap\">\n          <v-btn\n            icon\n            class=\"mr-1\"\n            @click=\"askDeleteItem(item.id)\"\n          >\n            <v-icon>mdi-delete</v-icon>\n          </v-btn>\n\n          <v-btn\n            icon\n            class=\"mr-1\"\n            @click=\"editItem(item.id)\"\n          >\n            <v-icon>mdi-pencil</v-icon>\n          </v-btn>\n        </div>\n      </template>\n    </v-data-table>\n  </div>\n\n</template>\n<script>\nimport ItemListPageBase from '@/components/ItemListPageBase';\nimport RepositoryForm from '@/components/RepositoryForm.vue';\nimport axios from 'axios';\n\nexport default {\n  mixins: [ItemListPageBase],\n  components: { RepositoryForm },\n  data() {\n    return {\n      keys: null,\n    };\n  },\n\n  async created() {\n    this.keys = (await axios({\n      method: 'get',\n      url: `/api/project/${this.projectId}/keys`,\n      responseType: 'json',\n    })).data;\n  },\n\n  methods: {\n    getHeaders() {\n      return [{\n        text: this.$i18n.t('name'),\n        value: 'name',\n        width: '25%',\n      },\n      {\n        text: this.$i18n.t('gitUrl'),\n        value: 'git_url',\n        width: '50%',\n      },\n      {\n        text: this.$i18n.t('sshKey'),\n        value: 'ssh_key_id',\n        width: '25%',\n      },\n      {\n        text: this.$i18n.t('actions'),\n        value: 'actions',\n        sortable: false,\n      }];\n    },\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/repositories`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/repositories/${this.itemId}`;\n    },\n    getEventName() {\n      return 'i-repositories';\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}