{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios';\nimport EventBus from '@/event-bus';\nimport TaskForm from '@/components/TaskForm.vue';\nimport TaskStatus from '@/components/TaskStatus.vue';\nimport TaskLink from '@/components/TaskLink.vue';\nimport EditDialog from '@/components/EditDialog.vue';\nimport { TEMPLATE_TYPE_ACTION_TITLES, TEMPLATE_TYPE_ICONS } from '@/lib/constants';\nimport TerraformTaskForm from '@/components/TerraformTaskForm.vue';\nexport default {\n  components: {\n    TerraformTaskForm,\n    EditDialog,\n    TaskStatus,\n    TaskForm,\n    TaskLink\n  },\n  props: {\n    template: Object,\n    limit: Number,\n    hideFooter: Boolean\n  },\n  data() {\n    return {\n      headers: [{\n        text: this.$i18n.t('taskId'),\n        value: 'id',\n        sortable: false\n      }, {\n        text: this.$i18n.t('version'),\n        value: 'version',\n        sortable: false\n      }, {\n        text: this.$i18n.t('status'),\n        value: 'status',\n        sortable: false\n      }, {\n        text: this.$i18n.t('user'),\n        value: 'user_name',\n        sortable: false\n      }, {\n        text: this.$i18n.t('start'),\n        value: 'start',\n        sortable: false\n      }, {\n        text: this.$i18n.t('duration'),\n        value: 'end',\n        sortable: false\n      }, {\n        text: this.$i18n.t('actions'),\n        value: 'actions',\n        sortable: false,\n        width: '0%'\n      }],\n      tasks: null,\n      taskId: null,\n      newTaskDialog: null,\n      sourceTask: null,\n      TEMPLATE_TYPE_ICONS\n    };\n  },\n  watch: {\n    async template() {\n      await this.loadData();\n    }\n  },\n  async created() {\n    await this.loadData();\n  },\n  methods: {\n    async loadData() {\n      this.tasks = null;\n      this.tasks = (await axios({\n        method: 'get',\n        url: `/api/project/${this.template.project_id}/templates/${this.template.id}/tasks/last?limit=${this.limit || 200}`,\n        responseType: 'json'\n      })).data;\n    },\n    getActionButtonTitle() {\n      return this.$i18n.t(TEMPLATE_TYPE_ACTION_TITLES[this.template.type]);\n    },\n    onTaskCreated(e) {\n      EventBus.$emit('i-show-task', {\n        taskId: e.item.id\n      });\n    },\n    createTask(task) {\n      this.sourceTask = task;\n      this.newTaskDialog = true;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;EACAA;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACAC;IACAC;IACAC;EACA;EACAC;IACA;MACAC,UACA;QACAC;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;QACAC;MACA,EACA;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;MACA;IACA;EACA;EACA;IACA;EACA;EACAC;IACA;MACA;MACA;QACAC;QACAC;QACAC;MACA;IACA;IACAC;MACA;IACA;IAEAC;MACAC;QACAX;MACA;IACA;IAEAY;MACA;MACA;IACA;EACA;AACA","names":["components","TerraformTaskForm","EditDialog","TaskStatus","TaskForm","TaskLink","props","template","limit","hideFooter","data","headers","text","value","sortable","width","tasks","taskId","newTaskDialog","sourceTask","TEMPLATE_TYPE_ICONS","watch","methods","method","url","responseType","getActionButtonTitle","onTaskCreated","EventBus","createTask"],"sourceRoot":"src/components","sources":["TaskList.vue"],"sourcesContent":["<template xmlns:v-slot=\"http://www.w3.org/1999/XSL/Transform\">\n  <div v-if=\"tasks != null\">\n    <EditDialog\n        v-model=\"newTaskDialog\"\n        :save-button-text=\"$t('re', {getActionButtonTitle: getActionButtonTitle()})\"\n        @save=\"onTaskCreated\"\n    >\n      <template v-slot:title={}>\n        <v-icon class=\"mr-4\">{{ TEMPLATE_TYPE_ICONS[template.type] }}</v-icon>\n        <span class=\"breadcrumbs__item\">{{ template.name }}</span>\n        <v-icon>mdi-chevron-right</v-icon>\n        <span class=\"breadcrumbs__item\">{{ $t('newTask') }}</span>\n      </template>\n\n      <template v-slot:form=\"{ onSave, onError, needSave, needReset }\">\n        <TerraformTaskForm\n            v-if=\"['terraform', 'tofu'].includes(template.app)\"\n            :project-id=\"template.project_id\"\n            item-id=\"new\"\n            :template-id=\"template.id\"\n            @save=\"onSave\"\n            @error=\"onError\"\n            :need-save=\"needSave\"\n            :need-reset=\"needReset\"\n            :source-task=\"sourceTask\"\n        />\n        <TaskForm\n          v-else\n          :project-id=\"template.project_id\"\n          item-id=\"new\"\n          :template-id=\"template.id\"\n          @save=\"onSave\"\n          @error=\"onError\"\n          :need-save=\"needSave\"\n          :need-reset=\"needReset\"\n          :source-task=\"sourceTask\"\n        />\n      </template>\n    </EditDialog>\n\n    <v-data-table\n        :headers=\"headers\"\n        :items=\"tasks\"\n        :hide-default-footer=\"hideFooter\"\n        :footer-props=\"{ itemsPerPageOptions: [20] }\"\n        class=\"mt-0\"\n    >\n      <template v-slot:item.id=\"{ item }\">\n        <TaskLink\n            :task-id=\"item.id\"\n            :tooltip=\"item.message\"\n            :label=\"'#' + item.id\"\n        />\n      </template>\n\n      <template v-slot:item.version=\"{ item }\">\n        <div v-if=\"item.tpl_type !== ''\">\n          <TaskLink\n              :disabled=\"item.tpl_type === 'build'\"\n              :task-id=\"item.build_task_id\"\n              :tooltip=\"item.tpl_type === 'build' ? item.message : (item.build_task || {}).message\"\n              :label=\"item.tpl_type === 'build' ? item.version : (item.build_task || {}).version\"\n              :status=\"item.status\"\n          />\n        </div>\n        <div v-else>&mdash;</div>\n      </template>\n\n      <template v-slot:item.status=\"{ item }\">\n        <TaskStatus :status=\"item.status\"/>\n      </template>\n\n      <template v-slot:item.start=\"{ item }\">\n        {{ item.start | formatDate }}\n      </template>\n\n      <template v-slot:item.end=\"{ item }\">\n        {{ [item.start, item.end] | formatMilliseconds }}\n      </template>\n\n      <template v-slot:item.actions=\"{ item }\">\n        <v-btn text class=\"pl-1 pr-2\" @click=\"createTask(item)\">\n          <v-icon class=\"pr-1\">mdi-replay</v-icon>\n          Re{{ getActionButtonTitle() }}\n        </v-btn>\n      </template>\n    </v-data-table>\n  </div>\n</template>\n<script>\nimport axios from 'axios';\nimport EventBus from '@/event-bus';\nimport TaskForm from '@/components/TaskForm.vue';\nimport TaskStatus from '@/components/TaskStatus.vue';\nimport TaskLink from '@/components/TaskLink.vue';\nimport EditDialog from '@/components/EditDialog.vue';\nimport { TEMPLATE_TYPE_ACTION_TITLES, TEMPLATE_TYPE_ICONS } from '@/lib/constants';\nimport TerraformTaskForm from '@/components/TerraformTaskForm.vue';\n\nexport default {\n  components: {\n    TerraformTaskForm,\n    EditDialog,\n    TaskStatus,\n    TaskForm,\n    TaskLink,\n  },\n  props: {\n    template: Object,\n    limit: Number,\n    hideFooter: Boolean,\n  },\n  data() {\n    return {\n      headers: [\n        {\n          text: this.$i18n.t('taskId'),\n          value: 'id',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('version'),\n          value: 'version',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('status'),\n          value: 'status',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('user'),\n          value: 'user_name',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('start'),\n          value: 'start',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('duration'),\n          value: 'end',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('actions'),\n          value: 'actions',\n          sortable: false,\n          width: '0%',\n        },\n      ],\n      tasks: null,\n      taskId: null,\n      newTaskDialog: null,\n      sourceTask: null,\n      TEMPLATE_TYPE_ICONS,\n    };\n  },\n  watch: {\n    async template() {\n      await this.loadData();\n    },\n  },\n  async created() {\n    await this.loadData();\n  },\n  methods: {\n    async loadData() {\n      this.tasks = null;\n      this.tasks = (await axios({\n        method: 'get',\n        url: `/api/project/${this.template.project_id}/templates/${this.template.id}/tasks/last?limit=${this.limit || 200}`,\n        responseType: 'json',\n      })).data;\n    },\n    getActionButtonTitle() {\n      return this.$i18n.t(TEMPLATE_TYPE_ACTION_TITLES[this.template.type]);\n    },\n\n    onTaskCreated(e) {\n      EventBus.$emit('i-show-task', {\n        taskId: e.item.id,\n      });\n    },\n\n    createTask(task) {\n      this.sourceTask = task;\n      this.newTaskDialog = true;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}