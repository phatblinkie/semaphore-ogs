{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\nimport { codemirror } from 'vue-codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/vue/vue.js';\nimport 'codemirror/addon/display/placeholder.js';\nexport default {\n  mixins: [ItemFormBase],\n  components: {\n    codemirror\n  },\n  data() {\n    return {\n      cmOptions: {\n        tabSize: 2,\n        mode: 'text/x-ini',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false\n      },\n      inventoryTypes: [{\n        id: 'static',\n        name: 'Static'\n      }, {\n        id: 'static-yaml',\n        name: 'Static YAML'\n      }, {\n        id: 'file',\n        name: 'File'\n      }],\n      keys: null,\n      repositories: null\n    };\n  },\n  computed: {\n    loginPasswordKeys() {\n      if (this.keys == null) {\n        return null;\n      }\n      return this.keys.filter(key => key.type === 'login_password');\n    }\n  },\n  async created() {\n    [this.keys, this.repositories] = (await Promise.all([await axios({\n      keys: 'get',\n      url: `/api/project/${this.projectId}/keys`,\n      responseType: 'json'\n    }), await axios({\n      keys: 'get',\n      url: `/api/project/${this.projectId}/repositories`,\n      responseType: 'json'\n    })])).map(x => x.data);\n  },\n  methods: {\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/inventory`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/inventory/${this.itemId}`;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;EACAA;EAEAC;IACAC;EACA;EAEAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAC;QACAC;MACA;QACAD;QACAC;MACA;QACAD;QACAC;MACA;MACAC;MACAC;IACA;EACA;EAEAC;IACAC;MACA;QACA;MACA;MACA;IACA;EACA;EAEA;IACA,qDACA;MACAH;MACAI;MACAC;IACA,IACA;MACAL;MACAI;MACAC;IACA,GACA;EACA;EAEAC;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["mixins","components","codemirror","data","cmOptions","tabSize","mode","lineNumbers","line","lint","indentWithTabs","inventoryTypes","id","name","keys","repositories","computed","loginPasswordKeys","url","responseType","methods","getItemsUrl","getSingleItemUrl"],"sourceRoot":"src/components","sources":["InventoryForm.vue"],"sourcesContent":["<template>\n  <v-form\n    ref=\"form\"\n    lazy-validation\n    v-model=\"formValid\"\n    v-if=\"item != null && keys != null\"\n  >\n    <v-alert\n      :value=\"formError\"\n      color=\"error\"\n      class=\"pb-2\"\n    >{{ formError }}</v-alert>\n\n    <v-text-field\n      v-model=\"item.name\"\n      :label=\"$t('name')\"\n      :rules=\"[v => !!v || $t('name_required')]\"\n      required\n      :disabled=\"formSaving\"\n    ></v-text-field>\n\n    <v-select\n      v-model=\"item.ssh_key_id\"\n      :label=\"$t('userCredentials')\"\n      :items=\"keys\"\n      item-value=\"id\"\n      item-text=\"name\"\n      :rules=\"[v => !!v || $t('user_credentials_required')]\"\n      required\n      :disabled=\"formSaving\"\n    ></v-select>\n\n    <v-select\n        v-model=\"item.become_key_id\"\n        :label=\"$t('sudoCredentialsOptional')\"\n        clearable\n        :items=\"loginPasswordKeys\"\n        item-value=\"id\"\n        item-text=\"name\"\n        :disabled=\"formSaving\"\n    ></v-select>\n\n    <v-select\n      v-model=\"item.type\"\n      :label=\"$t('type')\"\n      :rules=\"[v => !!v || $t('type_required')]\"\n      :items=\"inventoryTypes\"\n      item-value=\"id\"\n      item-text=\"name\"\n      required\n      :disabled=\"formSaving\"\n    ></v-select>\n\n    <v-text-field\n      v-model.trim=\"item.inventory\"\n      :label=\"$t('pathToInventoryFile')\"\n      :rules=\"[v => !!v || $t('path_required')]\"\n      required\n      :disabled=\"formSaving\"\n      v-if=\"item.type === 'file'\"\n    ></v-text-field>\n\n    <v-select\n      v-model=\"item.repository_id\"\n      :label=\"$t('repository') + ' (Optional)'\"\n      clearable\n      :items=\"repositories\"\n      item-value=\"id\"\n      item-text=\"name\"\n      :disabled=\"formSaving\"\n      v-if=\"item.type === 'file'\"\n    ></v-select>\n\n    <codemirror\n        :style=\"{ border: '1px solid lightgray' }\"\n        v-model.trim=\"item.inventory\"\n        :options=\"cmOptions\"\n        v-if=\"item.type === 'static' || item.type === 'static-yaml'\"\n        :placeholder=\"$t('enterInventory')\"\n    />\n\n    <v-alert\n        dense\n        text\n        class=\"mt-4\"\n        type=\"info\"\n        v-if=\"item.type === 'static'\"\n    >\n      {{ $t('staticInventoryExample') }}\n      <pre style=\"font-size: 14px;\">[website]\n172.18.8.40\n172.18.8.41</pre>\n    </v-alert>\n\n    <v-alert\n        dense\n        text\n        class=\"mt-4\"\n        type=\"info\"\n        v-if=\"item.type === 'static-yaml'\"\n    >\n      {{ $t('staticYamlInventoryExample') }}\n      <pre style=\"font-size: 14px;\">all:\n  children:\n    website:\n      hosts:\n        172.18.8.40:\n        172.18.8.41:</pre>\n    </v-alert>\n  </v-form>\n</template>\n<style>\n.CodeMirror {\n  height: 160px !important;\n}\n</style>\n<script>\n/* eslint-disable import/no-extraneous-dependencies,import/extensions */\n\nimport ItemFormBase from '@/components/ItemFormBase';\nimport axios from 'axios';\n\nimport { codemirror } from 'vue-codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/vue/vue.js';\nimport 'codemirror/addon/display/placeholder.js';\n\nexport default {\n  mixins: [ItemFormBase],\n\n  components: {\n    codemirror,\n  },\n\n  data() {\n    return {\n      cmOptions: {\n        tabSize: 2,\n        mode: 'text/x-ini',\n        lineNumbers: true,\n        line: true,\n        lint: true,\n        indentWithTabs: false,\n      },\n      inventoryTypes: [{\n        id: 'static',\n        name: 'Static',\n      }, {\n        id: 'static-yaml',\n        name: 'Static YAML',\n      }, {\n        id: 'file',\n        name: 'File',\n      }],\n      keys: null,\n      repositories: null,\n    };\n  },\n\n  computed: {\n    loginPasswordKeys() {\n      if (this.keys == null) {\n        return null;\n      }\n      return this.keys.filter((key) => key.type === 'login_password');\n    },\n  },\n\n  async created() {\n    [this.keys, this.repositories] = (await Promise.all([\n      await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/keys`,\n        responseType: 'json',\n      }),\n      await axios({\n        keys: 'get',\n        url: `/api/project/${this.projectId}/repositories`,\n        responseType: 'json',\n      }),\n    ])).map((x) => x.data);\n  },\n\n  methods: {\n    getItemsUrl() {\n      return `/api/project/${this.projectId}/inventory`;\n    },\n    getSingleItemUrl() {\n      return `/api/project/${this.projectId}/inventory/${this.itemId}`;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}