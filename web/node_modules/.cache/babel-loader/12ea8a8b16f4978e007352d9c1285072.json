{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ItemListPageBase from '@/components/ItemListPageBase';\nimport TaskLink from '@/components/TaskLink.vue';\nimport axios from 'axios';\nimport EditViewsForm from '@/components/EditViewsForm.vue';\nimport TableSettingsSheet from '@/components/TableSettingsSheet.vue';\nimport TaskList from '@/components/TaskList.vue';\nimport EventBus from '@/event-bus';\nimport TaskStatus from '@/components/TaskStatus.vue';\nimport socket from '@/socket';\nimport NewTaskDialog from '@/components/NewTaskDialog.vue';\nimport { TEMPLATE_TYPE_ACTION_TITLES, TEMPLATE_TYPE_ICONS } from '@/lib/constants';\nimport EditTemplateDialog from '@/components/EditTemplateDialog.vue';\nimport AppsMixin from '@/components/AppsMixin';\nexport default {\n  components: {\n    EditTemplateDialog,\n    TableSettingsSheet,\n    TaskStatus,\n    TaskLink,\n    TaskList,\n    EditViewsForm,\n    NewTaskDialog\n  },\n  mixins: [ItemListPageBase, AppsMixin],\n  async created() {\n    socket.addListener(data => this.onWebsocketDataReceived(data));\n    await this.loadData();\n  },\n  data() {\n    return {\n      TEMPLATE_TYPE_ICONS,\n      TEMPLATE_TYPE_ACTION_TITLES,\n      inventory: null,\n      environment: null,\n      repositories: null,\n      newTaskDialog: null,\n      settingsSheet: null,\n      filteredHeaders: [],\n      openedItems: [],\n      views: null,\n      editViewsDialog: null,\n      viewItemsLoading: null,\n      viewTab: null,\n      apps: null,\n      itemApp: ''\n    };\n  },\n  computed: {\n    viewId() {\n      if (/^-?\\d+$/.test(this.$route.params.viewId)) {\n        return parseInt(this.$route.params.viewId, 10);\n      }\n      return this.$route.params.viewId;\n    },\n    templateType() {\n      if (this.itemId == null || this.itemId === 'new') {\n        return '';\n      }\n      return this.items.find(x => x.id === this.itemId).type;\n    },\n    templateAlias() {\n      if (this.itemId == null || this.itemId === 'new') {\n        return '';\n      }\n      return this.items.find(x => x.id === this.itemId).name;\n    },\n    templateApp() {\n      if (this.itemId == null || this.itemId === 'new') {\n        return '';\n      }\n      return this.items.find(x => x.id === this.itemId).app;\n    },\n    isLoaded() {\n      return this.items && this.inventory && this.environment && this.repositories && this.views && this.isAppsLoaded;\n    }\n  },\n  watch: {\n    async viewId() {\n      try {\n        this.viewItemsLoading = true;\n        await this.loadItems();\n        if (this.viewId) {\n          localStorage.setItem(`project${this.projectId}__lastVisitedViewId`, this.viewId);\n        } else {\n          localStorage.removeItem(`project${this.projectId}__lastVisitedViewId`);\n        }\n      } finally {\n        this.viewItemsLoading = false;\n      }\n    }\n  },\n  methods: {\n    async beforeLoadItems() {\n      await this.loadViews();\n    },\n    allowActions() {\n      return true;\n    },\n    getViewUrl(viewId) {\n      if (viewId == null) {\n        return `/project/${this.projectId}/templates`;\n      }\n      return `/project/${this.projectId}/views/${viewId}/templates`;\n    },\n    async loadViews() {\n      this.views = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/views`,\n        responseType: 'json'\n      })).data;\n      this.views.sort((v1, v2) => v1.position - v2.position);\n      if (this.viewId != null && !this.views.some(v => v.id === this.viewId)) {\n        await this.$router.push({\n          path: `/project/${this.projectId}/templates`\n        });\n      }\n    },\n    async closeEditViewDialog() {\n      this.editViewsDialog = false;\n      await this.loadViews();\n    },\n    async onWebsocketDataReceived(data) {\n      if (data.project_id !== this.projectId || data.type !== 'update') {\n        return;\n      }\n      const template = (this.items || []).find(item => item.id === data.template_id);\n      if (template == null) {\n        return;\n      }\n      if (data.task_id !== template.last_task_id) {\n        Object.assign(template.last_task, (await axios({\n          method: 'get',\n          url: `/api/project/${this.projectId}/tasks/${data.task_id}`,\n          responseType: 'json'\n        })).data);\n        template.last_task_id = data.task_id;\n      }\n      Object.assign(template.last_task, {\n        ...data,\n        type: undefined\n      });\n    },\n    showTaskLog(taskId) {\n      EventBus.$emit('i-show-task', {\n        taskId\n      });\n    },\n    createTask(itemId) {\n      this.itemId = itemId;\n      this.newTaskDialog = true;\n    },\n    getHeaders() {\n      return [{\n        text: this.$i18n.t('name'),\n        value: 'name'\n      }, {\n        text: this.$i18n.t('version'),\n        value: 'version',\n        sortable: false\n      }, {\n        text: this.$i18n.t('status'),\n        value: 'status',\n        sortable: false\n      }, {\n        text: this.$i18n.t('lastTask'),\n        value: 'last_task',\n        sortable: false\n      }, {\n        text: this.$i18n.t('playbook'),\n        value: 'playbook',\n        sortable: false\n      }, {\n        text: this.$i18n.t('inventory'),\n        value: 'inventory_id',\n        sortable: false\n      }, {\n        text: this.$i18n.t('environment'),\n        value: 'environment_id',\n        sortable: false\n      }, {\n        text: this.$i18n.t('repository2'),\n        value: 'repository_id',\n        sortable: false\n      }, {\n        text: this.$i18n.t('actions'),\n        value: 'actions',\n        sortable: false,\n        width: '0%'\n      }];\n    },\n    getItemsUrl() {\n      return this.viewId == null ? `/api/project/${this.projectId}/templates` : `/api/project/${this.projectId}/views/${this.viewId}/templates`;\n    },\n    async loadData() {\n      this.inventory = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/inventory`,\n        responseType: 'json'\n      })).data;\n      this.environment = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/environment`,\n        responseType: 'json'\n      })).data;\n      this.repositories = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/repositories`,\n        responseType: 'json'\n      })).data;\n    },\n    onTableSettingsChange({\n      headers\n    }) {\n      this.filteredHeaders = headers;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACAA,6BACAC,2BACA;AACA;AACA;AAEA;EACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;EACAC;EACA;IACAC;IAEA;EACA;EACAC;IACA;MACAX;MACAD;MACAa;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;QACA;MACA;MACA;IACA;IAEAC;MACA;QACA;MACA;MACA;IACA;IAEAC;MACA;QACA;MACA;MACA;IACA;IAEAC;MACA;QACA;MACA;MACA;IACA;IAEAC;MACA,qBACA,kBACA,oBACA,qBACA,cACA;IACA;EACA;EACAC;IACA;MACA;QACA;QACA;QACA;UACAC;QACA;UACAA;QACA;MACA;QACA;MACA;IACA;EACA;EACAC;IACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;QACA;MACA;MACA;IACA;IAEA;MACA;QACAC;QACAC;QACAC;MACA;MACA;MAEA;QACA;UAAAC;QAAA;MACA;IACA;IAEA;MACA;MACA;IACA;IAEA;MACA;QACA;MACA;MAEA;MAEA;QACA;MACA;MAEA;QACAC;UACAJ;UACAC;UACAC;QACA;QACAG;MACA;MAEAD;QACA;QACAE;MACA;IACA;IAEAC;MACAC;QACAC;MACA;IACA;IAEAC;MACA;MACA;IACA;IAEAC;MACA,QACA;QACAC;QACAC;MACA,GACA;QACAD;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;MACA,GACA;QACAF;QACAC;QACAC;QACAC;MACA,EACA;IACA;IAEAC;MACA,6BACA,6CACA;IACA;IAEA;MACA;QACAhB;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;MAEA;QACAF;QACAC;QACAC;MACA;IACA;IAEAe;MAAAC;IAAA;MACA;IACA;EACA;AACA","names":["TEMPLATE_TYPE_ACTION_TITLES","TEMPLATE_TYPE_ICONS","components","EditTemplateDialog","TableSettingsSheet","TaskStatus","TaskLink","TaskList","EditViewsForm","NewTaskDialog","mixins","socket","data","inventory","environment","repositories","newTaskDialog","settingsSheet","filteredHeaders","openedItems","views","editViewsDialog","viewItemsLoading","viewTab","apps","itemApp","computed","viewId","templateType","templateAlias","templateApp","isLoaded","watch","localStorage","methods","allowActions","getViewUrl","method","url","responseType","path","Object","template","type","showTaskLog","EventBus","taskId","createTask","getHeaders","text","value","sortable","width","getItemsUrl","onTableSettingsChange","headers"],"sourceRoot":"src/views/project","sources":["Templates.vue"],"sourcesContent":["<template xmlns:v-slot=\"http://www.w3.org/1999/XSL/Transform\">\n  <div v-if=\"!isLoaded\">\n    <v-progress-linear\n      indeterminate\n      color=\"primary darken-2\"\n    ></v-progress-linear>\n  </div>\n  <div v-else>\n    <v-dialog\n      v-model=\"editViewsDialog\"\n      :max-width=\"400\"\n      persistent\n      :transition=\"false\"\n    >\n      <v-card>\n        <v-card-title>\n          {{ $t('editViews') }}\n          <v-spacer></v-spacer>\n          <v-btn icon @click=\"closeEditViewDialog()\">\n            <v-icon>mdi-close</v-icon>\n          </v-btn>\n        </v-card-title>\n        <v-card-text>\n          <EditViewsForm :project-id=\"projectId\"/>\n        </v-card-text>\n      </v-card>\n    </v-dialog>\n\n    <EditTemplateDialog\n        v-model=\"editDialog\"\n        :project-id=\"projectId\"\n        :item-app=\"itemApp\"\n        item-id=\"new\"\n        @save=\"loadItems()\"\n    ></EditTemplateDialog>\n\n    <NewTaskDialog\n      v-model=\"newTaskDialog\"\n      @save=\"itemId = null\"\n      @close=\"itemId = null\"\n      :project-id=\"projectId\"\n      :template-id=\"itemId\"\n      :template-alias=\"templateAlias\"\n      :template-type=\"templateType\"\n      :template-app=\"templateApp\"\n    />\n\n    <v-toolbar flat>\n      <v-app-bar-nav-icon @click=\"showDrawer()\"></v-app-bar-nav-icon>\n      <v-toolbar-title>\n        {{ $t('taskTemplates2') }}\n      </v-toolbar-title>\n      <v-spacer></v-spacer>\n\n      <v-menu\n        offset-y\n      >\n        <template v-slot:activator=\"{ on, attrs }\">\n          <v-btn\n            v-bind=\"attrs\"\n            v-on=\"on\"\n            color=\"primary\"\n            class=\"mr-1 pr-2\"\n            v-if=\"can(USER_PERMISSIONS.manageProjectResources)\"\n            :disabled=\"!isAdmin && appsMixin.activeAppIds.length === 0\"\n          >\n            {{ $t('newTemplate') }}\n            <v-icon>mdi-chevron-down</v-icon>\n          </v-btn>\n        </template>\n        <v-list>\n          <v-list-item\n            v-for=\"appID in appsMixin.activeAppIds\"\n            :key=\"appID\"\n            link\n            @click=\"editItem('new'); itemApp = appID;\"\n          >\n            <v-list-item-icon>\n              <v-icon\n                :color=\"getAppColor(appID)\"\n              >\n                {{ getAppIcon(appID) }}\n              </v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>{{ getAppTitle(appID) }}</v-list-item-title>\n          </v-list-item>\n\n          <v-divider v-if=\"isAdmin && appsMixin.activeAppIds.length > 0\"/>\n\n          <v-list-item\n              v-if=\"isAdmin\"\n              key=\"other\"\n              link\n              href=\"/apps\"\n          >\n            <v-list-item-icon>\n              <v-icon>mdi-cogs</v-icon>\n            </v-list-item-icon>\n            <v-list-item-title>Applications</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-menu>\n\n      <v-btn icon @click=\"settingsSheet = true\">\n        <v-icon>mdi-cog</v-icon>\n      </v-btn>\n    </v-toolbar>\n\n    <v-tabs show-arrows class=\"pl-4\" v-model=\"viewTab\">\n      <v-tab :to=\"getViewUrl(null)\" :disabled=\"viewItemsLoading\">{{ $t('all') }}</v-tab>\n\n      <v-tab\n        v-for=\"(view) in views\"\n        :key=\"view.id\"\n        :to=\"getViewUrl(view.id)\"\n        :disabled=\"viewItemsLoading\"\n      >{{ view.title }}\n      </v-tab>\n\n      <v-btn\n        icon\n        class=\"mt-2 ml-4\"\n        @click=\"editViewsDialog = true\"\n        v-if=\"can(USER_PERMISSIONS.manageProjectResources)\"\n      >\n        <v-icon>mdi-pencil</v-icon>\n      </v-btn>\n    </v-tabs>\n\n    <v-data-table\n      hide-default-footer\n      class=\"mt-4 templates-table\"\n      single-expand\n      show-expand\n      :headers=\"filteredHeaders\"\n      :items=\"items\"\n      :items-per-page=\"Number.MAX_VALUE\"\n      :expanded.sync=\"openedItems\"\n      :style=\"{\n          opacity: viewItemsLoading ? 0.3 : 1,\n        }\"\n    >\n      <template v-slot:item.name=\"{ item }\">\n        <v-icon\n          class=\"mr-3\"\n          small\n        >\n          {{ getAppIcon(item.app) }}\n        </v-icon>\n\n        <v-icon class=\"mr-3\" small>\n          {{ TEMPLATE_TYPE_ICONS[item.type] }}\n        </v-icon>\n\n        <router-link\n          :to=\"viewId\n              ? `/project/${projectId}/views/${viewId}/templates/${item.id}`\n              : `/project/${projectId}/templates/${item.id}`\"\n        >{{ item.name }}\n        </router-link>\n      </template>\n\n      <template v-slot:item.version=\"{ item }\">\n        <TaskLink\n          v-if=\"item.last_task && item.last_task.tpl_type !== ''\"\n          :disabled=\"true\"\n          :status=\"item.last_task.status\"\n\n          :task-id=\"item.last_task.tpl_type === 'build'\n              ? item.last_task.id\n              : (item.last_task.build_task || {}).id\"\n\n          :label=\"item.last_task.tpl_type === 'build'\n              ? item.last_task.version\n              : (item.last_task.build_task || {}).version\"\n\n          :tooltip=\"item.last_task.tpl_type === 'build'\n              ? item.last_task.message\n              : (item.last_task.build_task || {}).message\"\n        />\n        <div v-else>&mdash;</div>\n      </template>\n\n      <template v-slot:item.status=\"{ item }\">\n        <div class=\"mt-2 mb-2 d-flex\" v-if=\"item.last_task != null\">\n          <TaskStatus :status=\"item.last_task.status\"/>\n        </div>\n        <div v-else class=\"mt-3 mb-2 d-flex\" style=\"color: gray;\">{{ $t('notLaunched') }}</div>\n      </template>\n\n      <template v-slot:item.last_task=\"{ item }\">\n        <div class=\"mt-2 mb-2\" v-if=\"item.last_task != null\" style=\"line-height: 1\">\n          <TaskLink\n            :task-id=\"item.last_task.id\"\n            :label=\"'#' + item.last_task.id\"\n            :tooltip=\"item.last_task.message\"\n          />\n          <div style=\"color: gray; font-size: 14px;\">\n            {{ $t('by', {user_name: item.last_task.user_name }) }}\n          </div>\n        </div>\n      </template>\n\n      <template v-slot:item.inventory_id=\"{ item }\">\n        {{ (inventory.find((x) => x.id === item.inventory_id) || {name: '—'}).name }}\n      </template>\n\n      <template v-slot:item.environment_id=\"{ item }\">\n        {{ (environment.find((x) => x.id === item.environment_id) || {name: '—'}).name }}\n      </template>\n\n      <template v-slot:item.repository_id=\"{ item }\">\n        {{ repositories.find((x) => x.id === item.repository_id).name }}\n      </template>\n\n      <template v-slot:item.actions=\"{ item }\">\n        <v-btn text class=\"pl-1 pr-2\" @click=\"createTask(item.id)\">\n          <v-icon class=\"pr-1\">mdi-play</v-icon>\n          {{ TEMPLATE_TYPE_ACTION_TITLES[item.type] }}\n        </v-btn>\n      </template>\n\n      <template v-slot:expanded-item=\"{ headers, item }\">\n        <td\n          :colspan=\"headers.length\"\n          v-if=\"openedItems.some((template) => template.id === item.id)\"\n        >\n          <TaskList\n            style=\"border: 1px solid lightgray; border-radius: 6px; margin: 10px 0;\"\n            :template=\"item\"\n            :limit=\"5\"\n            :hide-footer=\"true\"\n          />\n        </td>\n      </template>\n    </v-data-table>\n\n    <TableSettingsSheet\n      v-model=\"settingsSheet\"\n      table-name=\"project__template\"\n      :headers=\"headers\"\n      @change=\"onTableSettingsChange\"\n    />\n  </div>\n</template>\n<style lang=\"scss\">\n@import '~vuetify/src/styles/settings/variables';\n\n.templates-table .text-start:first-child {\n  padding-right: 0 !important;\n}\n\n@media #{map-get($display-breakpoints, 'sm-and-down')} {\n  .templates-table .v-data-table__mobile-row:first-child {\n    display: none !important;\n  }\n}\n</style>\n<script>\nimport ItemListPageBase from '@/components/ItemListPageBase';\nimport TaskLink from '@/components/TaskLink.vue';\nimport axios from 'axios';\nimport EditViewsForm from '@/components/EditViewsForm.vue';\nimport TableSettingsSheet from '@/components/TableSettingsSheet.vue';\nimport TaskList from '@/components/TaskList.vue';\nimport EventBus from '@/event-bus';\nimport TaskStatus from '@/components/TaskStatus.vue';\nimport socket from '@/socket';\nimport NewTaskDialog from '@/components/NewTaskDialog.vue';\n\nimport {\n  TEMPLATE_TYPE_ACTION_TITLES,\n  TEMPLATE_TYPE_ICONS,\n} from '@/lib/constants';\nimport EditTemplateDialog from '@/components/EditTemplateDialog.vue';\nimport AppsMixin from '@/components/AppsMixin';\n\nexport default {\n  components: {\n    EditTemplateDialog,\n    TableSettingsSheet,\n    TaskStatus,\n    TaskLink,\n    TaskList,\n    EditViewsForm,\n    NewTaskDialog,\n  },\n  mixins: [ItemListPageBase, AppsMixin],\n  async created() {\n    socket.addListener((data) => this.onWebsocketDataReceived(data));\n\n    await this.loadData();\n  },\n  data() {\n    return {\n      TEMPLATE_TYPE_ICONS,\n      TEMPLATE_TYPE_ACTION_TITLES,\n      inventory: null,\n      environment: null,\n      repositories: null,\n      newTaskDialog: null,\n      settingsSheet: null,\n      filteredHeaders: [],\n      openedItems: [],\n      views: null,\n      editViewsDialog: null,\n      viewItemsLoading: null,\n      viewTab: null,\n      apps: null,\n      itemApp: '',\n    };\n  },\n  computed: {\n    viewId() {\n      if (/^-?\\d+$/.test(this.$route.params.viewId)) {\n        return parseInt(this.$route.params.viewId, 10);\n      }\n      return this.$route.params.viewId;\n    },\n\n    templateType() {\n      if (this.itemId == null || this.itemId === 'new') {\n        return '';\n      }\n      return this.items.find((x) => x.id === this.itemId).type;\n    },\n\n    templateAlias() {\n      if (this.itemId == null || this.itemId === 'new') {\n        return '';\n      }\n      return this.items.find((x) => x.id === this.itemId).name;\n    },\n\n    templateApp() {\n      if (this.itemId == null || this.itemId === 'new') {\n        return '';\n      }\n      return this.items.find((x) => x.id === this.itemId).app;\n    },\n\n    isLoaded() {\n      return this.items\n        && this.inventory\n        && this.environment\n        && this.repositories\n        && this.views\n        && this.isAppsLoaded;\n    },\n  },\n  watch: {\n    async viewId() {\n      try {\n        this.viewItemsLoading = true;\n        await this.loadItems();\n        if (this.viewId) {\n          localStorage.setItem(`project${this.projectId}__lastVisitedViewId`, this.viewId);\n        } else {\n          localStorage.removeItem(`project${this.projectId}__lastVisitedViewId`);\n        }\n      } finally {\n        this.viewItemsLoading = false;\n      }\n    },\n  },\n  methods: {\n    async beforeLoadItems() {\n      await this.loadViews();\n    },\n\n    allowActions() {\n      return true;\n    },\n\n    getViewUrl(viewId) {\n      if (viewId == null) {\n        return `/project/${this.projectId}/templates`;\n      }\n      return `/project/${this.projectId}/views/${viewId}/templates`;\n    },\n\n    async loadViews() {\n      this.views = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/views`,\n        responseType: 'json',\n      })).data;\n      this.views.sort((v1, v2) => v1.position - v2.position);\n\n      if (this.viewId != null && !this.views.some((v) => v.id === this.viewId)) {\n        await this.$router.push({ path: `/project/${this.projectId}/templates` });\n      }\n    },\n\n    async closeEditViewDialog() {\n      this.editViewsDialog = false;\n      await this.loadViews();\n    },\n\n    async onWebsocketDataReceived(data) {\n      if (data.project_id !== this.projectId || data.type !== 'update') {\n        return;\n      }\n\n      const template = (this.items || []).find((item) => item.id === data.template_id);\n\n      if (template == null) {\n        return;\n      }\n\n      if (data.task_id !== template.last_task_id) {\n        Object.assign(template.last_task, (await axios({\n          method: 'get',\n          url: `/api/project/${this.projectId}/tasks/${data.task_id}`,\n          responseType: 'json',\n        })).data);\n        template.last_task_id = data.task_id;\n      }\n\n      Object.assign(template.last_task, {\n        ...data,\n        type: undefined,\n      });\n    },\n\n    showTaskLog(taskId) {\n      EventBus.$emit('i-show-task', {\n        taskId,\n      });\n    },\n\n    createTask(itemId) {\n      this.itemId = itemId;\n      this.newTaskDialog = true;\n    },\n\n    getHeaders() {\n      return [\n        {\n          text: this.$i18n.t('name'),\n          value: 'name',\n        },\n        {\n          text: this.$i18n.t('version'),\n          value: 'version',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('status'),\n          value: 'status',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('lastTask'),\n          value: 'last_task',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('playbook'),\n          value: 'playbook',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('inventory'),\n          value: 'inventory_id',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('environment'),\n          value: 'environment_id',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('repository2'),\n          value: 'repository_id',\n          sortable: false,\n        },\n        {\n          text: this.$i18n.t('actions'),\n          value: 'actions',\n          sortable: false,\n          width: '0%',\n        },\n      ];\n    },\n\n    getItemsUrl() {\n      return this.viewId == null\n        ? `/api/project/${this.projectId}/templates`\n        : `/api/project/${this.projectId}/views/${this.viewId}/templates`;\n    },\n\n    async loadData() {\n      this.inventory = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/inventory`,\n        responseType: 'json',\n      })).data;\n\n      this.environment = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/environment`,\n        responseType: 'json',\n      })).data;\n\n      this.repositories = (await axios({\n        method: 'get',\n        url: `/api/project/${this.projectId}/repositories`,\n        responseType: 'json',\n      })).data;\n    },\n\n    onTableSettingsChange({ headers }) {\n      this.filteredHeaders = headers;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}