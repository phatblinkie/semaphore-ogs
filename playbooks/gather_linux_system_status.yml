---
- name: Gather Linux System Status Data
  hosts: linux_hosts
  vars:
    ansible_remote_tmp: /var/tmp/ans
    host_key_checking: false
  gather_facts: false
  tasks:
    - block:
        - name: Test Connections
          wait_for_connection:
            delay: 1
            timeout: 10

        - name: Collect facts
          gather_facts:

        - name: Check if inventory_hostname is an IP address
          set_fact:
            is_ip_address: "{{ inventory_hostname | regex_search('^\\d+\\.\\d+\\.\\d+\\.\\d+$') is not none }}"
          delegate_to: localhost

        - name: Resolve IP address on control node if not already an IP address
          shell: getent ahostsv4 {{ inventory_hostname }} | head -n 1 | awk '{print $1}'
          register: ip_lookup
          when: not is_ip_address
          delegate_to: localhost

        - name: Set IP address fact
          set_fact:
            ip_address: "{{ inventory_hostname if is_ip_address else ip_lookup.stdout.strip() }}"
          delegate_to: localhost

        - name: Initialize system_status_results
          set_fact:
            system_status_results: []

        - name: Gather Ansible Ping
          ping:
          register: ansible_ping_output

        - name: Gather Disk Capacity for all partitions
          shell: df -h | egrep -v "loop|tmpfs" | awk 'NR>1 {print $6, $5}'
          register: disk_capacity_output

        - name: Clean up disk capacity output
          set_fact:
            cleaned_disk_capacity: "{{ disk_capacity_output.stdout_lines | map('regex_replace', '^\\s+', '') | join(', ') }}"

        - name: Gather Process Usage
          shell: uptime | awk -F, '{ print $5 }' | xargs
          register: proc_usage_output

        - name: Gather App Check for sshd
          service:
            name: sshd
            state: started
          register: app_check_output

        - name: Append Linux data to results
          set_fact:
            system_status_results: |
              {{
                system_status_results + [{
                  "ip_address": ip_address,
                  "hostname": inventory_hostname,
                  "ansible_ping": ansible_ping_output.ping,
                  "disk_capacity": cleaned_disk_capacity,
                  "proc_usage": proc_usage_output.stdout_lines,
                  "app_check": app_check_output.state,
                  "uptime": ansible_uptime_seconds,
                  "project_id": semaphore_vars.task_details.project_id,
                  "task_id": semaphore_vars.task_details.id
                }]
              }}

        - name: Send custom data to web URL
          ansible.builtin.uri:
            url: "http://localhost/post/store_system_status.php?taskid={{ semaphore_vars.task_details.id }}"
            method: POST
            body_format: json
            body: "{{ system_status_results }}"
            headers:
              Content-Type: application/json
            status_code: 200
            return_content: True
          register: postoutput
          delegate_to: localhost

      rescue:
        - name: Check if inventory_hostname is an IP address
          set_fact:
            is_ip_address: "{{ inventory_hostname | regex_search('^\\d+\\.\\d+\\.\\d+\\.\\d+$') is not none }}"
          delegate_to: localhost

        - name: Resolve IP address on control node if not already an IP address
          shell: getent ahostsv4 {{ inventory_hostname }} | head -n 1 | awk '{print $1}'
          register: ip_lookup
          when: not is_ip_address
          delegate_to: localhost

        - name: Set IP address fact
          set_fact:
            ip_address: "{{ inventory_hostname if is_ip_address else ip_lookup.stdout.strip() }}"
          delegate_to: localhost

        - name: Initialize system_status_results on rescue
          set_fact:
            system_status_results: []

        - name: Handle unreachable hosts
          set_fact:
            system_status_results: |
              {{
                system_status_results + [{
                  "ip_address": ip_address,
                  "hostname": inventory_hostname,
                  "ansible_ping": "unreachable",
                  "disk_capacity": "0",
                  "proc_usage": ["0"],
                  "app_check": "FAILED",
                  "uptime": 0,
                  "project_id": semaphore_vars.task_details.project_id,
                  "task_id": semaphore_vars.task_details.id
                }]
              }}

        - name: Send custom data to web URL - unreachable hosts
          ansible.builtin.uri:
            url: "http://localhost/post/store_system_status.php?taskid={{ semaphore_vars.task_details.id }}"
            method: POST
            body_format: json
            body: "{{ system_status_results }}"
            headers:
              Content-Type: application/json
            status_code: 200
            return_content: True
          register: postoutput
          delegate_to: localhost
