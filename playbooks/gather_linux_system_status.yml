---
- name: Gather Linux System Status Data
  hosts: linux_hosts
  vars:
    ansible_remote_tmp: /var/tmp/ans
    host_key_checking: false
    services_to_check:
      default:
        - sshd
      ansible-headnode:
        - sshd
        - nginx
        - mysqld
      mediaserver:
        - sshd
      gameserver:
        - sshd
        - rust
  gather_facts: false
  tasks:
    - block:
        - name: Test Connections
          wait_for_connection:
            delay: 1
            timeout: 30

        - name: Collect Uptime
          shell: cat /proc/uptime | awk -F. '{ print $1 }'
          register: uptime_output

        - name: Initialize system_status_results
          set_fact:
            system_status_results: []
            app_check_results: []

        - name: Gather Ansible Ping
          ping:
          register: ansible_ping_output

        - name: Gather Disk Capacity for all partitions
          shell: df -h | egrep -v "loop|tmpfs" | awk 'NR>1 {print $6, $5}'
          register: disk_capacity_output

        - name: Clean up disk capacity output
          set_fact:
            cleaned_disk_capacity: "{{ disk_capacity_output.stdout_lines | map('trim') | join(', ') }}"

        - name: Gather Process Usage
          shell: uptime | awk -F, '{ print $5 }' | xargs
          register: proc_usage_output

        - name: Determine services to check
          set_fact:
            services_to_check_for_host: "{{ services_to_check[inventory_hostname] | default(services_to_check['default']) }}"

#        #this is commented out, because we may not want to activate the service, only check it.
#        - name: Check service status
#          service:
#            name: "{{ service_item }}"
#            state: started
#          register: app_check_output
#          loop: "{{ services_to_check_for_host }}"
#          loop_control:
#            loop_var: service_item
#          when: ansible_ping_output.ping == 'pong'
#          failed_when: false
#          changed_when: true
#          check_mode: yes
#          ignore_errors: yes

        - name: Check service status with systemctl
          shell: "systemctl is-active {{ service_item}} || true"
          register: app_check_output
          loop: "{{ services_to_check_for_host }}"
          loop_control:
            loop_var: service_item
          when: ansible_ping_output.ping == 'pong'
          failed_when: false
          ignore_errors: yes

        - name: Append service status to results
          set_fact:
#            app_check_results: "{{ app_check_results + [item.service_item + ': ' + item.state] }}"
            app_check_results: "{{ app_check_results + [item.service_item + ': ' + item.stdout] }}"
          loop: "{{ app_check_output.results }}"
          loop_control:
            loop_var: item
#            label: "{{ [item.service_item + ': ' + item.state] }}"
            label: "{{ [item.service_item + ': ' + item.stdout] }}"
#          when: item is defined and item.state is defined
          when: item is defined and item.stdout is defined
          no_log: false

        - name: Append Linux data to results
          set_fact:
            system_status_results: |
              {{
                system_status_results + [{
                  "hostname": inventory_hostname,
                  "ansible_ping": ansible_ping_output.ping,
                  "disk_capacity": cleaned_disk_capacity,
                  "proc_usage": proc_usage_output.stdout_lines,
                  "app_check": app_check_results | join(', '),
                  "uptime": uptime_output.stdout,
                  "project_id": semaphore_vars.task_details.project_id,
                  "task_id": semaphore_vars.task_details.id
                }]
              }}

              #        - name: system_status_results results
              #          debug:
              #            var: system_status_results

        - name: Send custom data to web URL
          ansible.builtin.uri:
            url: "http://localhost/post/store_system_status.php"
            method: POST
            body_format: json
            body: "{{ system_status_results }}"
            headers:
              Content-Type: application/json
            status_code: 200
            return_content: True
          register: postoutput
          delegate_to: localhost

#        - name: post results
#          debug:
#            var: postoutput

      rescue:
        - name: Initialize system_status_results
          set_fact:
            system_status_results: []
            app_check_results: []

        - name: Handle unreachable hosts
          set_fact:
            system_status_results: |
              {{
                system_status_results + [{
                  "hostname": inventory_hostname,
                  "ansible_ping": "unreachable",
                  "disk_capacity": "0",
                  "proc_usage": ["0"],
                  "app_check": "sshd: unreachable",
                  "uptime": 0,
                  "project_id": semaphore_vars.task_details.project_id,
                  "task_id": semaphore_vars.task_details.id
                }]
              }}

        - name: Send custom data to web URL - unreachable hosts
          ansible.builtin.uri:
            url: "http://localhost/post/store_system_status.php"
            method: POST
            body_format: json
            body: "{{ system_status_results }}"
            headers:
              Content-Type: application/json
            status_code: 200
            return_content: True
          register: postoutputrescue
          delegate_to: localhost

        - name: Rescue-Output post results
          debug:
            var: postoutputrescue
