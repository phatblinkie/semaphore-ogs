---
- name: Gather Windows System Status Data
  hosts: win_hosts
  vars:
    ansible_remote_tmp: /var/tmp/ans
    host_key_checking: false
    services_to_check:
      default:
        - winrm
      '192.168.11.57':
        - winrm
        - LanmanWorkstation
      '192.168.10.19':
        - Netlogon
        - LanmanServer
      dc1.j114.army.mil:
        - dns
        - kdc
        - ntds
        - winrm
        - Netlogon
      dc2.j114.army.mil:
        - dns
        - kdc
        - ntds
        - winrm
        - Netlogon
      ENTERPRISE-CA.J114.ARMY.MIL:
        - certsvc
        - winrm
      FMV.J114.ARMY.MIL:
        - openfire
        - dhcpserver
      HBSS.J114.ARMY.MIL:
        - hqmc-hbss-mcafee-epolicy-orchestrator
        - hqmc-hbss-mcafee-agent
        - winrm
        - epo svcs (5)+db
        - MCAFEEAPACHESRV
        - MCAFEEEVENTPARSER
      ans-syscon.j114.army.mil:
        - winrm
        - Netlogon
        - VANTAGE
        - MySQL
      viewcon.j114.army.mil:
        - Netlogon
        - winrm
        - hor view
        - ws broker
      vsql.j114.army.mil:
        - Netlogon
        - winrm
        - mssqlserver
      vader-5.5.j114.army.mil:
        - Netlogon
        - winrm
        - MySQL57
      VMFWS3.J114.ARMY.MIL:
        - winrm
        - Netlogon

  gather_facts: false
  tasks:
    - name: Gather data from Windows hosts
      block:
        - name: Test Connections
          wait_for_connection:
            delay: 1
            timeout: 30

        - name: Initialize system_status_results
          set_fact:
            system_status_results: []
            app_check_results: []

        - name: Gather Ansible Ping
          win_ping:
          register: ansible_ping_output

        - name: Gather Windows Uptime
          win_shell: |
            $uptime = (Get-CimInstance -ClassName Win32_OperatingSystem).LastBootUpTime
            $uptime = (Get-Date) - $uptime
            [math]::Round($uptime.TotalSeconds)
          register: uptime_output

        - name: Gather Disk Capacity for all partitions
          win_shell: |
            Get-Volume | Where-Object { $_.DriveType -eq 'Fixed' -and $_.DriveLetter } | Select-Object DriveLetter, @{Name="Used";Expression={[math]::Floor((($_.Size - $_.SizeRemaining) / $_.Size) * 100)}} | ForEach-Object { "$($_.DriveLetter) $($_.Used)" }
          register: disk_capacity_output

        - name: Gather Process Usage
          win_shell: (Get-WmiObject -Class Win32_Processor | Measure-Object -Property LoadPercentage -Average).Average
          register: proc_usage_output

        - name: Clean up disk capacity output
          set_fact:
            cleaned_disk_capacity: "{{ disk_capacity_output.stdout_lines | map('regex_replace', '^\\s+', '') | join(', ') }}"

        - name: Set services to check for each host
          set_fact:
            services_to_check_for_host: "{{ services_to_check[inventory_hostname] | default(services_to_check['default']) }}"

        - name: Check service status
          ansible.windows.win_service_info:
            name: "{{ service_item }}"
          register: app_check_output
          loop: "{{ services_to_check_for_host }}"
          loop_control:
            loop_var: service_item
          when: ansible_ping_output.ping == 'pong'
          failed_when: false

        - name: Process service status
          set_fact:
            app_check_results: "{{ app_check_results | default([]) + [item.invocation.module_args.name ~ ': ' ~ (item.services[0].state if 'services' in item and item.services | length > 0 else 'unknown')] }}"
          loop: "{{ app_check_output.results }}"
          loop_control:
            loop_var: item
            label: "{{ [item.invocation.module_args.name ~ ': ' ~ (item.services[0].state if 'services' in item and item.services | length > 0 else 'unknown')] }}"
          when: ansible_ping_output.ping == 'pong'
          failed_when: false

#        - name: Display service status
#          debug:
#            msg: "{{ app_check_results }}"

        - name: Append Windows data to results
          set_fact:
            system_status_results: |
              {{
                system_status_results + [{
                  "hostname": inventory_hostname,
                  "ansible_ping": ansible_ping_output.ping,
                  "disk_capacity": cleaned_disk_capacity,
                  "proc_usage": proc_usage_output.stdout_lines,
                  "app_check": app_check_results | join(', '),
                  "uptime": uptime_output.stdout,
                  "project_id": semaphore_vars.task_details.project_id,
                  "task_id": semaphore_vars.task_details.id
                }]
              }}

        - name: Send custom data to web URL
          ansible.builtin.uri:
            url: "http://localhost/post/store_system_status.php"
            method: POST
            body_format: json
            body: "{{ system_status_results }}"
            headers:
              Content-Type: application/json
            status_code: 200
            return_content: True
          register: postoutput
          delegate_to: localhost

#        - name: Output
#          ansible.builtin.debug:
#            msg:
#              - "post output:"
#              - "{{ postoutput }}"
#              - "system_status_results:"
#              - "{{ system_status_results }}"

      rescue:
        - name: Rescue-Initialize system_status_results
          set_fact:
            system_status_results: []

        - name: Rescue-Append Windows data to results
          set_fact:
            system_status_results: |
              {{
                system_status_results + [{
                  "hostname": inventory_hostname,
                  "ansible_ping": "unreachable",
                  "disk_capacity": "0",
                  "proc_usage": ["0"],
                  "app_check": "system: unreachable",
                  "uptime": "0",
                  "project_id": semaphore_vars.task_details.project_id,
                  "task_id": semaphore_vars.task_details.id
                }]
              }}

        - name: Rescue-Send custom data to web URL for failed hosts
          ansible.builtin.uri:
            url: "http://localhost/post/store_system_status.php"
            method: POST
            body_format: json
            body: "{{ system_status_results }}"
            headers:
              Content-Type: application/json
            status_code: 200
            return_content: True
          register: postoutput
          delegate_to: localhost
